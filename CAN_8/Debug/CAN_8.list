
CAN_8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d1c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000168  08003ecc  08003ecc  00013ecc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004034  08004034  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  08004034  08004034  00014034  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800403c  0800403c  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800403c  0800403c  0001403c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004040  08004040  00014040  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08004044  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000168  20000080  080040c4  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001e8  080040c4  000201e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007175  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001257  00000000  00000000  00027225  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000005a0  00000000  00000000  00028480  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000508  00000000  00000000  00028a20  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022d86  00000000  00000000  00028f28  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000051d5  00000000  00000000  0004bcae  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d4a71  00000000  00000000  00050e83  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001258f4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002080  00000000  00000000  00125970  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000080 	.word	0x20000080
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08003eb4 	.word	0x08003eb4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000084 	.word	0x20000084
 80001ec:	08003eb4 	.word	0x08003eb4

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b972 	b.w	800059c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9e08      	ldr	r6, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	4688      	mov	r8, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14b      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4615      	mov	r5, r2
 80002e2:	d967      	bls.n	80003b4 <__udivmoddi4+0xe4>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0720 	rsb	r7, r2, #32
 80002ee:	fa01 f302 	lsl.w	r3, r1, r2
 80002f2:	fa20 f707 	lsr.w	r7, r0, r7
 80002f6:	4095      	lsls	r5, r2
 80002f8:	ea47 0803 	orr.w	r8, r7, r3
 80002fc:	4094      	lsls	r4, r2
 80002fe:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fbb8 f7fe 	udiv	r7, r8, lr
 8000308:	fa1f fc85 	uxth.w	ip, r5
 800030c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000310:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000314:	fb07 f10c 	mul.w	r1, r7, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d909      	bls.n	8000330 <__udivmoddi4+0x60>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000322:	f080 811b 	bcs.w	800055c <__udivmoddi4+0x28c>
 8000326:	4299      	cmp	r1, r3
 8000328:	f240 8118 	bls.w	800055c <__udivmoddi4+0x28c>
 800032c:	3f02      	subs	r7, #2
 800032e:	442b      	add	r3, r5
 8000330:	1a5b      	subs	r3, r3, r1
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb3 f0fe 	udiv	r0, r3, lr
 8000338:	fb0e 3310 	mls	r3, lr, r0, r3
 800033c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000340:	fb00 fc0c 	mul.w	ip, r0, ip
 8000344:	45a4      	cmp	ip, r4
 8000346:	d909      	bls.n	800035c <__udivmoddi4+0x8c>
 8000348:	192c      	adds	r4, r5, r4
 800034a:	f100 33ff 	add.w	r3, r0, #4294967295
 800034e:	f080 8107 	bcs.w	8000560 <__udivmoddi4+0x290>
 8000352:	45a4      	cmp	ip, r4
 8000354:	f240 8104 	bls.w	8000560 <__udivmoddi4+0x290>
 8000358:	3802      	subs	r0, #2
 800035a:	442c      	add	r4, r5
 800035c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000360:	eba4 040c 	sub.w	r4, r4, ip
 8000364:	2700      	movs	r7, #0
 8000366:	b11e      	cbz	r6, 8000370 <__udivmoddi4+0xa0>
 8000368:	40d4      	lsrs	r4, r2
 800036a:	2300      	movs	r3, #0
 800036c:	e9c6 4300 	strd	r4, r3, [r6]
 8000370:	4639      	mov	r1, r7
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d909      	bls.n	800038e <__udivmoddi4+0xbe>
 800037a:	2e00      	cmp	r6, #0
 800037c:	f000 80eb 	beq.w	8000556 <__udivmoddi4+0x286>
 8000380:	2700      	movs	r7, #0
 8000382:	e9c6 0100 	strd	r0, r1, [r6]
 8000386:	4638      	mov	r0, r7
 8000388:	4639      	mov	r1, r7
 800038a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038e:	fab3 f783 	clz	r7, r3
 8000392:	2f00      	cmp	r7, #0
 8000394:	d147      	bne.n	8000426 <__udivmoddi4+0x156>
 8000396:	428b      	cmp	r3, r1
 8000398:	d302      	bcc.n	80003a0 <__udivmoddi4+0xd0>
 800039a:	4282      	cmp	r2, r0
 800039c:	f200 80fa 	bhi.w	8000594 <__udivmoddi4+0x2c4>
 80003a0:	1a84      	subs	r4, r0, r2
 80003a2:	eb61 0303 	sbc.w	r3, r1, r3
 80003a6:	2001      	movs	r0, #1
 80003a8:	4698      	mov	r8, r3
 80003aa:	2e00      	cmp	r6, #0
 80003ac:	d0e0      	beq.n	8000370 <__udivmoddi4+0xa0>
 80003ae:	e9c6 4800 	strd	r4, r8, [r6]
 80003b2:	e7dd      	b.n	8000370 <__udivmoddi4+0xa0>
 80003b4:	b902      	cbnz	r2, 80003b8 <__udivmoddi4+0xe8>
 80003b6:	deff      	udf	#255	; 0xff
 80003b8:	fab2 f282 	clz	r2, r2
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f040 808f 	bne.w	80004e0 <__udivmoddi4+0x210>
 80003c2:	1b49      	subs	r1, r1, r5
 80003c4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003c8:	fa1f f885 	uxth.w	r8, r5
 80003cc:	2701      	movs	r7, #1
 80003ce:	fbb1 fcfe 	udiv	ip, r1, lr
 80003d2:	0c23      	lsrs	r3, r4, #16
 80003d4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003d8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003dc:	fb08 f10c 	mul.w	r1, r8, ip
 80003e0:	4299      	cmp	r1, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x124>
 80003e4:	18eb      	adds	r3, r5, r3
 80003e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x122>
 80003ec:	4299      	cmp	r1, r3
 80003ee:	f200 80cd 	bhi.w	800058c <__udivmoddi4+0x2bc>
 80003f2:	4684      	mov	ip, r0
 80003f4:	1a59      	subs	r1, r3, r1
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003fc:	fb0e 1410 	mls	r4, lr, r0, r1
 8000400:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000404:	fb08 f800 	mul.w	r8, r8, r0
 8000408:	45a0      	cmp	r8, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x14c>
 800040c:	192c      	adds	r4, r5, r4
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x14a>
 8000414:	45a0      	cmp	r8, r4
 8000416:	f200 80b6 	bhi.w	8000586 <__udivmoddi4+0x2b6>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 0408 	sub.w	r4, r4, r8
 8000420:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000424:	e79f      	b.n	8000366 <__udivmoddi4+0x96>
 8000426:	f1c7 0c20 	rsb	ip, r7, #32
 800042a:	40bb      	lsls	r3, r7
 800042c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000430:	ea4e 0e03 	orr.w	lr, lr, r3
 8000434:	fa01 f407 	lsl.w	r4, r1, r7
 8000438:	fa20 f50c 	lsr.w	r5, r0, ip
 800043c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000440:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000444:	4325      	orrs	r5, r4
 8000446:	fbb3 f9f8 	udiv	r9, r3, r8
 800044a:	0c2c      	lsrs	r4, r5, #16
 800044c:	fb08 3319 	mls	r3, r8, r9, r3
 8000450:	fa1f fa8e 	uxth.w	sl, lr
 8000454:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000458:	fb09 f40a 	mul.w	r4, r9, sl
 800045c:	429c      	cmp	r4, r3
 800045e:	fa02 f207 	lsl.w	r2, r2, r7
 8000462:	fa00 f107 	lsl.w	r1, r0, r7
 8000466:	d90b      	bls.n	8000480 <__udivmoddi4+0x1b0>
 8000468:	eb1e 0303 	adds.w	r3, lr, r3
 800046c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000470:	f080 8087 	bcs.w	8000582 <__udivmoddi4+0x2b2>
 8000474:	429c      	cmp	r4, r3
 8000476:	f240 8084 	bls.w	8000582 <__udivmoddi4+0x2b2>
 800047a:	f1a9 0902 	sub.w	r9, r9, #2
 800047e:	4473      	add	r3, lr
 8000480:	1b1b      	subs	r3, r3, r4
 8000482:	b2ad      	uxth	r5, r5
 8000484:	fbb3 f0f8 	udiv	r0, r3, r8
 8000488:	fb08 3310 	mls	r3, r8, r0, r3
 800048c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000490:	fb00 fa0a 	mul.w	sl, r0, sl
 8000494:	45a2      	cmp	sl, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x1da>
 8000498:	eb1e 0404 	adds.w	r4, lr, r4
 800049c:	f100 33ff 	add.w	r3, r0, #4294967295
 80004a0:	d26b      	bcs.n	800057a <__udivmoddi4+0x2aa>
 80004a2:	45a2      	cmp	sl, r4
 80004a4:	d969      	bls.n	800057a <__udivmoddi4+0x2aa>
 80004a6:	3802      	subs	r0, #2
 80004a8:	4474      	add	r4, lr
 80004aa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ae:	fba0 8902 	umull	r8, r9, r0, r2
 80004b2:	eba4 040a 	sub.w	r4, r4, sl
 80004b6:	454c      	cmp	r4, r9
 80004b8:	46c2      	mov	sl, r8
 80004ba:	464b      	mov	r3, r9
 80004bc:	d354      	bcc.n	8000568 <__udivmoddi4+0x298>
 80004be:	d051      	beq.n	8000564 <__udivmoddi4+0x294>
 80004c0:	2e00      	cmp	r6, #0
 80004c2:	d069      	beq.n	8000598 <__udivmoddi4+0x2c8>
 80004c4:	ebb1 050a 	subs.w	r5, r1, sl
 80004c8:	eb64 0403 	sbc.w	r4, r4, r3
 80004cc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004d0:	40fd      	lsrs	r5, r7
 80004d2:	40fc      	lsrs	r4, r7
 80004d4:	ea4c 0505 	orr.w	r5, ip, r5
 80004d8:	e9c6 5400 	strd	r5, r4, [r6]
 80004dc:	2700      	movs	r7, #0
 80004de:	e747      	b.n	8000370 <__udivmoddi4+0xa0>
 80004e0:	f1c2 0320 	rsb	r3, r2, #32
 80004e4:	fa20 f703 	lsr.w	r7, r0, r3
 80004e8:	4095      	lsls	r5, r2
 80004ea:	fa01 f002 	lsl.w	r0, r1, r2
 80004ee:	fa21 f303 	lsr.w	r3, r1, r3
 80004f2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004f6:	4338      	orrs	r0, r7
 80004f8:	0c01      	lsrs	r1, r0, #16
 80004fa:	fbb3 f7fe 	udiv	r7, r3, lr
 80004fe:	fa1f f885 	uxth.w	r8, r5
 8000502:	fb0e 3317 	mls	r3, lr, r7, r3
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb07 f308 	mul.w	r3, r7, r8
 800050e:	428b      	cmp	r3, r1
 8000510:	fa04 f402 	lsl.w	r4, r4, r2
 8000514:	d907      	bls.n	8000526 <__udivmoddi4+0x256>
 8000516:	1869      	adds	r1, r5, r1
 8000518:	f107 3cff 	add.w	ip, r7, #4294967295
 800051c:	d22f      	bcs.n	800057e <__udivmoddi4+0x2ae>
 800051e:	428b      	cmp	r3, r1
 8000520:	d92d      	bls.n	800057e <__udivmoddi4+0x2ae>
 8000522:	3f02      	subs	r7, #2
 8000524:	4429      	add	r1, r5
 8000526:	1acb      	subs	r3, r1, r3
 8000528:	b281      	uxth	r1, r0
 800052a:	fbb3 f0fe 	udiv	r0, r3, lr
 800052e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000532:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000536:	fb00 f308 	mul.w	r3, r0, r8
 800053a:	428b      	cmp	r3, r1
 800053c:	d907      	bls.n	800054e <__udivmoddi4+0x27e>
 800053e:	1869      	adds	r1, r5, r1
 8000540:	f100 3cff 	add.w	ip, r0, #4294967295
 8000544:	d217      	bcs.n	8000576 <__udivmoddi4+0x2a6>
 8000546:	428b      	cmp	r3, r1
 8000548:	d915      	bls.n	8000576 <__udivmoddi4+0x2a6>
 800054a:	3802      	subs	r0, #2
 800054c:	4429      	add	r1, r5
 800054e:	1ac9      	subs	r1, r1, r3
 8000550:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000554:	e73b      	b.n	80003ce <__udivmoddi4+0xfe>
 8000556:	4637      	mov	r7, r6
 8000558:	4630      	mov	r0, r6
 800055a:	e709      	b.n	8000370 <__udivmoddi4+0xa0>
 800055c:	4607      	mov	r7, r0
 800055e:	e6e7      	b.n	8000330 <__udivmoddi4+0x60>
 8000560:	4618      	mov	r0, r3
 8000562:	e6fb      	b.n	800035c <__udivmoddi4+0x8c>
 8000564:	4541      	cmp	r1, r8
 8000566:	d2ab      	bcs.n	80004c0 <__udivmoddi4+0x1f0>
 8000568:	ebb8 0a02 	subs.w	sl, r8, r2
 800056c:	eb69 020e 	sbc.w	r2, r9, lr
 8000570:	3801      	subs	r0, #1
 8000572:	4613      	mov	r3, r2
 8000574:	e7a4      	b.n	80004c0 <__udivmoddi4+0x1f0>
 8000576:	4660      	mov	r0, ip
 8000578:	e7e9      	b.n	800054e <__udivmoddi4+0x27e>
 800057a:	4618      	mov	r0, r3
 800057c:	e795      	b.n	80004aa <__udivmoddi4+0x1da>
 800057e:	4667      	mov	r7, ip
 8000580:	e7d1      	b.n	8000526 <__udivmoddi4+0x256>
 8000582:	4681      	mov	r9, r0
 8000584:	e77c      	b.n	8000480 <__udivmoddi4+0x1b0>
 8000586:	3802      	subs	r0, #2
 8000588:	442c      	add	r4, r5
 800058a:	e747      	b.n	800041c <__udivmoddi4+0x14c>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	442b      	add	r3, r5
 8000592:	e72f      	b.n	80003f4 <__udivmoddi4+0x124>
 8000594:	4638      	mov	r0, r7
 8000596:	e708      	b.n	80003aa <__udivmoddi4+0xda>
 8000598:	4637      	mov	r7, r6
 800059a:	e6e9      	b.n	8000370 <__udivmoddi4+0xa0>

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
	initialise_monitor_handles();
 80005a4:	f003 fc06 	bl	8003db4 <initialise_monitor_handles>

  HAL_Init();
 80005a8:	f000 fbbe 	bl	8000d28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ac:	f000 f91a 	bl	80007e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005b0:	f000 f9d4 	bl	800095c <MX_GPIO_Init>
  MX_CAN1_Init();
 80005b4:	f000 f998 	bl	80008e8 <MX_CAN1_Init>

  printf("App is running\n");
 80005b8:	4806      	ldr	r0, [pc, #24]	; (80005d4 <main+0x34>)
 80005ba:	f002 fad5 	bl	8002b68 <puts>

	HAL_CAN_Start(&hcan1); //start CAN
 80005be:	4806      	ldr	r0, [pc, #24]	; (80005d8 <main+0x38>)
 80005c0:	f000 fe00 	bl	80011c4 <HAL_CAN_Start>

	/* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1){

		CAN_Filter_Config();
 80005c4:	f000 f80a 	bl	80005dc <CAN_Filter_Config>
		CAN1_Tx();
 80005c8:	f000 f862 	bl	8000690 <CAN1_Tx>
		CAN1_Rx();
 80005cc:	f000 f82e 	bl	800062c <CAN1_Rx>
		CAN_Filter_Config();
 80005d0:	e7f8      	b.n	80005c4 <main+0x24>
 80005d2:	bf00      	nop
 80005d4:	08003ecc 	.word	0x08003ecc
 80005d8:	200001a0 	.word	0x200001a0

080005dc <CAN_Filter_Config>:
  /* USER CODE END 3 */

}

void CAN_Filter_Config(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b08a      	sub	sp, #40	; 0x28
 80005e0:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef can1_filter_init;

	can1_filter_init.FilterActivation = ENABLE;
 80005e2:	2301      	movs	r3, #1
 80005e4:	623b      	str	r3, [r7, #32]
	can1_filter_init.FilterBank  = 0;
 80005e6:	2300      	movs	r3, #0
 80005e8:	617b      	str	r3, [r7, #20]
	can1_filter_init.FilterFIFOAssignment = CAN_RX_FIFO0;
 80005ea:	2300      	movs	r3, #0
 80005ec:	613b      	str	r3, [r7, #16]
	can1_filter_init.FilterIdHigh = 0x0000;
 80005ee:	2300      	movs	r3, #0
 80005f0:	603b      	str	r3, [r7, #0]
	can1_filter_init.FilterIdLow = 0x0000;
 80005f2:	2300      	movs	r3, #0
 80005f4:	607b      	str	r3, [r7, #4]
	can1_filter_init.FilterMaskIdHigh = 0x0000;
 80005f6:	2300      	movs	r3, #0
 80005f8:	60bb      	str	r3, [r7, #8]
	can1_filter_init.FilterMaskIdLow = 0x0000;
 80005fa:	2300      	movs	r3, #0
 80005fc:	60fb      	str	r3, [r7, #12]
	can1_filter_init.FilterMode = CAN_FILTERMODE_IDMASK;
 80005fe:	2300      	movs	r3, #0
 8000600:	61bb      	str	r3, [r7, #24]
	can1_filter_init.FilterScale = CAN_FILTERSCALE_32BIT;
 8000602:	2301      	movs	r3, #1
 8000604:	61fb      	str	r3, [r7, #28]

	if( HAL_CAN_ConfigFilter(&hcan1,&can1_filter_init) != HAL_OK)
 8000606:	463b      	mov	r3, r7
 8000608:	4619      	mov	r1, r3
 800060a:	4806      	ldr	r0, [pc, #24]	; (8000624 <CAN_Filter_Config+0x48>)
 800060c:	f000 fcfa 	bl	8001004 <HAL_CAN_ConfigFilter>
 8000610:	4603      	mov	r3, r0
 8000612:	2b00      	cmp	r3, #0
 8000614:	d002      	beq.n	800061c <CAN_Filter_Config+0x40>
	{
		//Error_handler();
		printf("Error CAN FILTER\n");
 8000616:	4804      	ldr	r0, [pc, #16]	; (8000628 <CAN_Filter_Config+0x4c>)
 8000618:	f002 faa6 	bl	8002b68 <puts>
	}

}
 800061c:	bf00      	nop
 800061e:	3728      	adds	r7, #40	; 0x28
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}
 8000624:	200001a0 	.word	0x200001a0
 8000628:	08003edc 	.word	0x08003edc

0800062c <CAN1_Rx>:


void CAN1_Rx(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b082      	sub	sp, #8
 8000630:	af00      	add	r7, sp, #0
	uint8_t rcvd_msg=0;// DECLARATE RECIVE MESSAGE
 8000632:	2300      	movs	r3, #0
 8000634:	71fb      	strb	r3, [r7, #7]

	  /* USER CODE END CAN1_RX0_IRQn 0 */
	  HAL_CAN_IRQHandler(&hcan1);
 8000636:	4811      	ldr	r0, [pc, #68]	; (800067c <CAN1_Rx+0x50>)
 8000638:	f001 f841 	bl	80016be <HAL_CAN_IRQHandler>

	  if(HAL_CAN_GetRxFifoFillLevel(&hcan1,CAN_RX_FIFO0)>0)
 800063c:	2100      	movs	r1, #0
 800063e:	480f      	ldr	r0, [pc, #60]	; (800067c <CAN1_Rx+0x50>)
 8000640:	f001 f815 	bl	800166e <HAL_CAN_GetRxFifoFillLevel>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d014      	beq.n	8000674 <CAN1_Rx+0x48>
	  {
		  printf("Mensaje Recibido\n");
 800064a:	480d      	ldr	r0, [pc, #52]	; (8000680 <CAN1_Rx+0x54>)
 800064c:	f002 fa8c 	bl	8002b68 <puts>
		  //Obtiene una trama CAN de la zona Rx FIFO RECIBIDO
		  HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &pRxHeader, &rcvd_msg);
 8000650:	1dfb      	adds	r3, r7, #7
 8000652:	4a0c      	ldr	r2, [pc, #48]	; (8000684 <CAN1_Rx+0x58>)
 8000654:	2100      	movs	r1, #0
 8000656:	4809      	ldr	r0, [pc, #36]	; (800067c <CAN1_Rx+0x50>)
 8000658:	f000 fef7 	bl	800144a <HAL_CAN_GetRxMessage>
		  printf("%s\n", rcvd_msg);
 800065c:	79fb      	ldrb	r3, [r7, #7]
 800065e:	4619      	mov	r1, r3
 8000660:	4809      	ldr	r0, [pc, #36]	; (8000688 <CAN1_Rx+0x5c>)
 8000662:	f002 fa0d 	bl	8002a80 <iprintf>
		  printf("Mensaje Procesado\n");
 8000666:	4809      	ldr	r0, [pc, #36]	; (800068c <CAN1_Rx+0x60>)
 8000668:	f002 fa7e 	bl	8002b68 <puts>
		  botton_codification(rcvd_msg);
 800066c:	79fb      	ldrb	r3, [r7, #7]
 800066e:	4618      	mov	r0, r3
 8000670:	f000 f872 	bl	8000758 <botton_codification>
	  }


}
 8000674:	bf00      	nop
 8000676:	3708      	adds	r7, #8
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}
 800067c:	200001a0 	.word	0x200001a0
 8000680:	08003ef0 	.word	0x08003ef0
 8000684:	20000184 	.word	0x20000184
 8000688:	08003f04 	.word	0x08003f04
 800068c:	08003f08 	.word	0x08003f08

08000690 <CAN1_Tx>:

/**
 * Lo que manda el mensaje
 */
void CAN1_Tx(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b08a      	sub	sp, #40	; 0x28
 8000694:	af00      	add	r7, sp, #0

	CAN_TxHeaderTypeDef TxHeader;
	uint32_t TxMailbox; //MARCO DE DATOS
	uint8_t our_message; //MENSAJE QUE SE VA A MANDAR

	TxHeader.DLC = 3;
 8000696:	2303      	movs	r3, #3
 8000698:	61fb      	str	r3, [r7, #28]
	TxHeader.StdId = PLACA1;//ID PLACA1
 800069a:	4b25      	ldr	r3, [pc, #148]	; (8000730 <CAN1_Tx+0xa0>)
 800069c:	781b      	ldrb	r3, [r3, #0]
 800069e:	60fb      	str	r3, [r7, #12]
	TxHeader.IDE   = CAN_ID_STD;
 80006a0:	2300      	movs	r3, #0
 80006a2:	617b      	str	r3, [r7, #20]
	TxHeader.RTR = CAN_RTR_DATA;
 80006a4:	2300      	movs	r3, #0
 80006a6:	61bb      	str	r3, [r7, #24]

	//This peice of code is for debouncing the mechanical contact of the switch and/or eliminating any external glitch
    if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)) //check to ensure pin is pressed
 80006a8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006ac:	4821      	ldr	r0, [pc, #132]	; (8000734 <CAN1_Tx+0xa4>)
 80006ae:	f001 fd11 	bl	80020d4 <HAL_GPIO_ReadPin>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d034      	beq.n	8000722 <CAN1_Tx+0x92>
	{
    	for(int n=0;n<1000000;n++); //this loop is used to make a software delay, remove optimization for this to work
 80006b8:	2300      	movs	r3, #0
 80006ba:	627b      	str	r3, [r7, #36]	; 0x24
 80006bc:	e002      	b.n	80006c4 <CAN1_Tx+0x34>
 80006be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006c0:	3301      	adds	r3, #1
 80006c2:	627b      	str	r3, [r7, #36]	; 0x24
 80006c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006c6:	4a1c      	ldr	r2, [pc, #112]	; (8000738 <CAN1_Tx+0xa8>)
 80006c8:	4293      	cmp	r3, r2
 80006ca:	ddf8      	ble.n	80006be <CAN1_Tx+0x2e>
    	our_message= ++contador; //increment EL MENSAJE
 80006cc:	4b1b      	ldr	r3, [pc, #108]	; (800073c <CAN1_Tx+0xac>)
 80006ce:	781b      	ldrb	r3, [r3, #0]
 80006d0:	3301      	adds	r3, #1
 80006d2:	b2da      	uxtb	r2, r3
 80006d4:	4b19      	ldr	r3, [pc, #100]	; (800073c <CAN1_Tx+0xac>)
 80006d6:	701a      	strb	r2, [r3, #0]
 80006d8:	4b18      	ldr	r3, [pc, #96]	; (800073c <CAN1_Tx+0xac>)
 80006da:	781b      	ldrb	r3, [r3, #0]
 80006dc:	71fb      	strb	r3, [r7, #7]

    	//CUANDO LLEGA AL LIMITE LO RESETA
    	if(contador == 3)
 80006de:	4b17      	ldr	r3, [pc, #92]	; (800073c <CAN1_Tx+0xac>)
 80006e0:	781b      	ldrb	r3, [r3, #0]
 80006e2:	2b03      	cmp	r3, #3
 80006e4:	d102      	bne.n	80006ec <CAN1_Tx+0x5c>
    	{
    		contador = 0;
 80006e6:	4b15      	ldr	r3, [pc, #84]	; (800073c <CAN1_Tx+0xac>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	701a      	strb	r2, [r3, #0]
    	}
    	HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_0);
 80006ec:	2101      	movs	r1, #1
 80006ee:	4814      	ldr	r0, [pc, #80]	; (8000740 <CAN1_Tx+0xb0>)
 80006f0:	f001 fd21 	bl	8002136 <HAL_GPIO_TogglePin>

		HAL_CAN_AddTxMessage(&hcan1, &pHeader, &our_message, &TxMailbox);  //function to add message for transmition
 80006f4:	f107 0308 	add.w	r3, r7, #8
 80006f8:	1dfa      	adds	r2, r7, #7
 80006fa:	4912      	ldr	r1, [pc, #72]	; (8000744 <CAN1_Tx+0xb4>)
 80006fc:	4812      	ldr	r0, [pc, #72]	; (8000748 <CAN1_Tx+0xb8>)
 80006fe:	f000 fda5 	bl	800124c <HAL_CAN_AddTxMessage>
		printf("Estamos ready\n");
 8000702:	4812      	ldr	r0, [pc, #72]	; (800074c <CAN1_Tx+0xbc>)
 8000704:	f002 fa30 	bl	8002b68 <puts>
		printf("%d \n", our_message);
 8000708:	79fb      	ldrb	r3, [r7, #7]
 800070a:	4619      	mov	r1, r3
 800070c:	4810      	ldr	r0, [pc, #64]	; (8000750 <CAN1_Tx+0xc0>)
 800070e:	f002 f9b7 	bl	8002a80 <iprintf>

		//Compruebe si hay una solicitud de transmisión pendiente en el Tx seleccionado
		if( HAL_CAN_IsTxMessagePending(&hcan1,TxMailbox));
 8000712:	68bb      	ldr	r3, [r7, #8]
 8000714:	4619      	mov	r1, r3
 8000716:	480c      	ldr	r0, [pc, #48]	; (8000748 <CAN1_Tx+0xb8>)
 8000718:	f000 fe73 	bl	8001402 <HAL_CAN_IsTxMessagePending>
		{
			printf("Message Transmitted\r\n");
 800071c:	480d      	ldr	r0, [pc, #52]	; (8000754 <CAN1_Tx+0xc4>)
 800071e:	f002 fa23 	bl	8002b68 <puts>
		}
	}

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000722:	2001      	movs	r0, #1
 8000724:	f001 fd22 	bl	800216c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000728:	bf00      	nop
 800072a:	3728      	adds	r7, #40	; 0x28
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}
 8000730:	20000000 	.word	0x20000000
 8000734:	40020800 	.word	0x40020800
 8000738:	000f423f 	.word	0x000f423f
 800073c:	2000009c 	.word	0x2000009c
 8000740:	40020400 	.word	0x40020400
 8000744:	200001c8 	.word	0x200001c8
 8000748:	200001a0 	.word	0x200001a0
 800074c:	08003f1c 	.word	0x08003f1c
 8000750:	08003f2c 	.word	0x08003f2c
 8000754:	08003f34 	.word	0x08003f34

08000758 <botton_codification>:
	{
		return 0;
	}
}
void botton_codification(uint8_t contador)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b082      	sub	sp, #8
 800075c:	af00      	add	r7, sp, #0
 800075e:	4603      	mov	r3, r0
 8000760:	71fb      	strb	r3, [r7, #7]
	switch(contador)
 8000762:	79fb      	ldrb	r3, [r7, #7]
 8000764:	2b02      	cmp	r3, #2
 8000766:	d015      	beq.n	8000794 <botton_codification+0x3c>
 8000768:	2b03      	cmp	r3, #3
 800076a:	d024      	beq.n	80007b6 <botton_codification+0x5e>
 800076c:	2b01      	cmp	r3, #1
 800076e:	d000      	beq.n	8000772 <botton_codification+0x1a>
	 		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,GPIO_PIN_RESET);
	 		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_7,GPIO_PIN_RESET);
	 		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_SET);
	 		break;
	 	}
}
 8000770:	e032      	b.n	80007d8 <botton_codification+0x80>
	 		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,GPIO_PIN_SET);
 8000772:	2201      	movs	r2, #1
 8000774:	2101      	movs	r1, #1
 8000776:	481a      	ldr	r0, [pc, #104]	; (80007e0 <botton_codification+0x88>)
 8000778:	f001 fcc4 	bl	8002104 <HAL_GPIO_WritePin>
	 		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_7,GPIO_PIN_RESET);
 800077c:	2200      	movs	r2, #0
 800077e:	2180      	movs	r1, #128	; 0x80
 8000780:	4817      	ldr	r0, [pc, #92]	; (80007e0 <botton_codification+0x88>)
 8000782:	f001 fcbf 	bl	8002104 <HAL_GPIO_WritePin>
	 		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_RESET);
 8000786:	2200      	movs	r2, #0
 8000788:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800078c:	4814      	ldr	r0, [pc, #80]	; (80007e0 <botton_codification+0x88>)
 800078e:	f001 fcb9 	bl	8002104 <HAL_GPIO_WritePin>
	 		break;
 8000792:	e021      	b.n	80007d8 <botton_codification+0x80>
	 		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,GPIO_PIN_RESET);
 8000794:	2200      	movs	r2, #0
 8000796:	2101      	movs	r1, #1
 8000798:	4811      	ldr	r0, [pc, #68]	; (80007e0 <botton_codification+0x88>)
 800079a:	f001 fcb3 	bl	8002104 <HAL_GPIO_WritePin>
	 		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_7,GPIO_PIN_SET);
 800079e:	2201      	movs	r2, #1
 80007a0:	2180      	movs	r1, #128	; 0x80
 80007a2:	480f      	ldr	r0, [pc, #60]	; (80007e0 <botton_codification+0x88>)
 80007a4:	f001 fcae 	bl	8002104 <HAL_GPIO_WritePin>
	 		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_RESET);
 80007a8:	2200      	movs	r2, #0
 80007aa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007ae:	480c      	ldr	r0, [pc, #48]	; (80007e0 <botton_codification+0x88>)
 80007b0:	f001 fca8 	bl	8002104 <HAL_GPIO_WritePin>
	 		break;
 80007b4:	e010      	b.n	80007d8 <botton_codification+0x80>
	 		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,GPIO_PIN_RESET);
 80007b6:	2200      	movs	r2, #0
 80007b8:	2101      	movs	r1, #1
 80007ba:	4809      	ldr	r0, [pc, #36]	; (80007e0 <botton_codification+0x88>)
 80007bc:	f001 fca2 	bl	8002104 <HAL_GPIO_WritePin>
	 		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_7,GPIO_PIN_RESET);
 80007c0:	2200      	movs	r2, #0
 80007c2:	2180      	movs	r1, #128	; 0x80
 80007c4:	4806      	ldr	r0, [pc, #24]	; (80007e0 <botton_codification+0x88>)
 80007c6:	f001 fc9d 	bl	8002104 <HAL_GPIO_WritePin>
	 		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_SET);
 80007ca:	2201      	movs	r2, #1
 80007cc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007d0:	4803      	ldr	r0, [pc, #12]	; (80007e0 <botton_codification+0x88>)
 80007d2:	f001 fc97 	bl	8002104 <HAL_GPIO_WritePin>
	 		break;
 80007d6:	bf00      	nop
}
 80007d8:	bf00      	nop
 80007da:	3708      	adds	r7, #8
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	40020400 	.word	0x40020400

080007e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b094      	sub	sp, #80	; 0x50
 80007e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ea:	f107 0320 	add.w	r3, r7, #32
 80007ee:	2230      	movs	r2, #48	; 0x30
 80007f0:	2100      	movs	r1, #0
 80007f2:	4618      	mov	r0, r3
 80007f4:	f002 f93c 	bl	8002a70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007f8:	f107 030c 	add.w	r3, r7, #12
 80007fc:	2200      	movs	r2, #0
 80007fe:	601a      	str	r2, [r3, #0]
 8000800:	605a      	str	r2, [r3, #4]
 8000802:	609a      	str	r2, [r3, #8]
 8000804:	60da      	str	r2, [r3, #12]
 8000806:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000808:	2300      	movs	r3, #0
 800080a:	60bb      	str	r3, [r7, #8]
 800080c:	4b32      	ldr	r3, [pc, #200]	; (80008d8 <SystemClock_Config+0xf4>)
 800080e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000810:	4a31      	ldr	r2, [pc, #196]	; (80008d8 <SystemClock_Config+0xf4>)
 8000812:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000816:	6413      	str	r3, [r2, #64]	; 0x40
 8000818:	4b2f      	ldr	r3, [pc, #188]	; (80008d8 <SystemClock_Config+0xf4>)
 800081a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800081c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000820:	60bb      	str	r3, [r7, #8]
 8000822:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000824:	2300      	movs	r3, #0
 8000826:	607b      	str	r3, [r7, #4]
 8000828:	4b2c      	ldr	r3, [pc, #176]	; (80008dc <SystemClock_Config+0xf8>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	4a2b      	ldr	r2, [pc, #172]	; (80008dc <SystemClock_Config+0xf8>)
 800082e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000832:	6013      	str	r3, [r2, #0]
 8000834:	4b29      	ldr	r3, [pc, #164]	; (80008dc <SystemClock_Config+0xf8>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800083c:	607b      	str	r3, [r7, #4]
 800083e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000840:	2301      	movs	r3, #1
 8000842:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000844:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000848:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800084a:	2302      	movs	r3, #2
 800084c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800084e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000852:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000854:	2304      	movs	r3, #4
 8000856:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000858:	23a8      	movs	r3, #168	; 0xa8
 800085a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800085c:	2302      	movs	r3, #2
 800085e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000860:	2307      	movs	r3, #7
 8000862:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000864:	f107 0320 	add.w	r3, r7, #32
 8000868:	4618      	mov	r0, r3
 800086a:	f001 fca3 	bl	80021b4 <HAL_RCC_OscConfig>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d001      	beq.n	8000878 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000874:	f000 f968 	bl	8000b48 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000878:	230f      	movs	r3, #15
 800087a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800087c:	2302      	movs	r3, #2
 800087e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000880:	2300      	movs	r3, #0
 8000882:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000884:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000888:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800088a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800088e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000890:	f107 030c 	add.w	r3, r7, #12
 8000894:	2105      	movs	r1, #5
 8000896:	4618      	mov	r0, r3
 8000898:	f001 fefc 	bl	8002694 <HAL_RCC_ClockConfig>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d002      	beq.n	80008a8 <SystemClock_Config+0xc4>
  {
   // Error_Handler();
	  printf("HAL_RCC_ClockConfig");
 80008a2:	480f      	ldr	r0, [pc, #60]	; (80008e0 <SystemClock_Config+0xfc>)
 80008a4:	f002 f8ec 	bl	8002a80 <iprintf>
  }
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80008a8:	f002 f8b2 	bl	8002a10 <HAL_RCC_GetHCLKFreq>
 80008ac:	4602      	mov	r2, r0
 80008ae:	4b0d      	ldr	r3, [pc, #52]	; (80008e4 <SystemClock_Config+0x100>)
 80008b0:	fba3 2302 	umull	r2, r3, r3, r2
 80008b4:	099b      	lsrs	r3, r3, #6
 80008b6:	4618      	mov	r0, r3
 80008b8:	f001 fa39 	bl	8001d2e <HAL_SYSTICK_Config>

    /**Configure the Systick
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80008bc:	2004      	movs	r0, #4
 80008be:	f001 fa43 	bl	8001d48 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80008c2:	2200      	movs	r2, #0
 80008c4:	2100      	movs	r1, #0
 80008c6:	f04f 30ff 	mov.w	r0, #4294967295
 80008ca:	f001 fa06 	bl	8001cda <HAL_NVIC_SetPriority>
}
 80008ce:	bf00      	nop
 80008d0:	3750      	adds	r7, #80	; 0x50
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	40023800 	.word	0x40023800
 80008dc:	40007000 	.word	0x40007000
 80008e0:	08003f4c 	.word	0x08003f4c
 80008e4:	10624dd3 	.word	0x10624dd3

080008e8 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80008ec:	4b18      	ldr	r3, [pc, #96]	; (8000950 <MX_CAN1_Init+0x68>)
 80008ee:	4a19      	ldr	r2, [pc, #100]	; (8000954 <MX_CAN1_Init+0x6c>)
 80008f0:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 21;
 80008f2:	4b17      	ldr	r3, [pc, #92]	; (8000950 <MX_CAN1_Init+0x68>)
 80008f4:	2215      	movs	r2, #21
 80008f6:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80008f8:	4b15      	ldr	r3, [pc, #84]	; (8000950 <MX_CAN1_Init+0x68>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80008fe:	4b14      	ldr	r3, [pc, #80]	; (8000950 <MX_CAN1_Init+0x68>)
 8000900:	2200      	movs	r2, #0
 8000902:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_12TQ;
 8000904:	4b12      	ldr	r3, [pc, #72]	; (8000950 <MX_CAN1_Init+0x68>)
 8000906:	f44f 2230 	mov.w	r2, #720896	; 0xb0000
 800090a:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 800090c:	4b10      	ldr	r3, [pc, #64]	; (8000950 <MX_CAN1_Init+0x68>)
 800090e:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8000912:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000914:	4b0e      	ldr	r3, [pc, #56]	; (8000950 <MX_CAN1_Init+0x68>)
 8000916:	2200      	movs	r2, #0
 8000918:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800091a:	4b0d      	ldr	r3, [pc, #52]	; (8000950 <MX_CAN1_Init+0x68>)
 800091c:	2200      	movs	r2, #0
 800091e:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000920:	4b0b      	ldr	r3, [pc, #44]	; (8000950 <MX_CAN1_Init+0x68>)
 8000922:	2200      	movs	r2, #0
 8000924:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000926:	4b0a      	ldr	r3, [pc, #40]	; (8000950 <MX_CAN1_Init+0x68>)
 8000928:	2200      	movs	r2, #0
 800092a:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800092c:	4b08      	ldr	r3, [pc, #32]	; (8000950 <MX_CAN1_Init+0x68>)
 800092e:	2200      	movs	r2, #0
 8000930:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000932:	4b07      	ldr	r3, [pc, #28]	; (8000950 <MX_CAN1_Init+0x68>)
 8000934:	2200      	movs	r2, #0
 8000936:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000938:	4805      	ldr	r0, [pc, #20]	; (8000950 <MX_CAN1_Init+0x68>)
 800093a:	f000 fa67 	bl	8000e0c <HAL_CAN_Init>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d002      	beq.n	800094a <MX_CAN1_Init+0x62>
  {
   // Error_Handler();
	  printf("HAL_CAN_Init");
 8000944:	4804      	ldr	r0, [pc, #16]	; (8000958 <MX_CAN1_Init+0x70>)
 8000946:	f002 f89b 	bl	8002a80 <iprintf>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 800094a:	bf00      	nop
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	200001a0 	.word	0x200001a0
 8000954:	40006400 	.word	0x40006400
 8000958:	08003f60 	.word	0x08003f60

0800095c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b08c      	sub	sp, #48	; 0x30
 8000960:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000962:	f107 031c 	add.w	r3, r7, #28
 8000966:	2200      	movs	r2, #0
 8000968:	601a      	str	r2, [r3, #0]
 800096a:	605a      	str	r2, [r3, #4]
 800096c:	609a      	str	r2, [r3, #8]
 800096e:	60da      	str	r2, [r3, #12]
 8000970:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000972:	2300      	movs	r3, #0
 8000974:	61bb      	str	r3, [r7, #24]
 8000976:	4b6e      	ldr	r3, [pc, #440]	; (8000b30 <MX_GPIO_Init+0x1d4>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097a:	4a6d      	ldr	r2, [pc, #436]	; (8000b30 <MX_GPIO_Init+0x1d4>)
 800097c:	f043 0304 	orr.w	r3, r3, #4
 8000980:	6313      	str	r3, [r2, #48]	; 0x30
 8000982:	4b6b      	ldr	r3, [pc, #428]	; (8000b30 <MX_GPIO_Init+0x1d4>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000986:	f003 0304 	and.w	r3, r3, #4
 800098a:	61bb      	str	r3, [r7, #24]
 800098c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800098e:	2300      	movs	r3, #0
 8000990:	617b      	str	r3, [r7, #20]
 8000992:	4b67      	ldr	r3, [pc, #412]	; (8000b30 <MX_GPIO_Init+0x1d4>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000996:	4a66      	ldr	r2, [pc, #408]	; (8000b30 <MX_GPIO_Init+0x1d4>)
 8000998:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800099c:	6313      	str	r3, [r2, #48]	; 0x30
 800099e:	4b64      	ldr	r3, [pc, #400]	; (8000b30 <MX_GPIO_Init+0x1d4>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009a6:	617b      	str	r3, [r7, #20]
 80009a8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009aa:	2300      	movs	r3, #0
 80009ac:	613b      	str	r3, [r7, #16]
 80009ae:	4b60      	ldr	r3, [pc, #384]	; (8000b30 <MX_GPIO_Init+0x1d4>)
 80009b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b2:	4a5f      	ldr	r2, [pc, #380]	; (8000b30 <MX_GPIO_Init+0x1d4>)
 80009b4:	f043 0301 	orr.w	r3, r3, #1
 80009b8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ba:	4b5d      	ldr	r3, [pc, #372]	; (8000b30 <MX_GPIO_Init+0x1d4>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009be:	f003 0301 	and.w	r3, r3, #1
 80009c2:	613b      	str	r3, [r7, #16]
 80009c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009c6:	2300      	movs	r3, #0
 80009c8:	60fb      	str	r3, [r7, #12]
 80009ca:	4b59      	ldr	r3, [pc, #356]	; (8000b30 <MX_GPIO_Init+0x1d4>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ce:	4a58      	ldr	r2, [pc, #352]	; (8000b30 <MX_GPIO_Init+0x1d4>)
 80009d0:	f043 0302 	orr.w	r3, r3, #2
 80009d4:	6313      	str	r3, [r2, #48]	; 0x30
 80009d6:	4b56      	ldr	r3, [pc, #344]	; (8000b30 <MX_GPIO_Init+0x1d4>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009da:	f003 0302 	and.w	r3, r3, #2
 80009de:	60fb      	str	r3, [r7, #12]
 80009e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009e2:	2300      	movs	r3, #0
 80009e4:	60bb      	str	r3, [r7, #8]
 80009e6:	4b52      	ldr	r3, [pc, #328]	; (8000b30 <MX_GPIO_Init+0x1d4>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ea:	4a51      	ldr	r2, [pc, #324]	; (8000b30 <MX_GPIO_Init+0x1d4>)
 80009ec:	f043 0308 	orr.w	r3, r3, #8
 80009f0:	6313      	str	r3, [r2, #48]	; 0x30
 80009f2:	4b4f      	ldr	r3, [pc, #316]	; (8000b30 <MX_GPIO_Init+0x1d4>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f6:	f003 0308 	and.w	r3, r3, #8
 80009fa:	60bb      	str	r3, [r7, #8]
 80009fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80009fe:	2300      	movs	r3, #0
 8000a00:	607b      	str	r3, [r7, #4]
 8000a02:	4b4b      	ldr	r3, [pc, #300]	; (8000b30 <MX_GPIO_Init+0x1d4>)
 8000a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a06:	4a4a      	ldr	r2, [pc, #296]	; (8000b30 <MX_GPIO_Init+0x1d4>)
 8000a08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a0e:	4b48      	ldr	r3, [pc, #288]	; (8000b30 <MX_GPIO_Init+0x1d4>)
 8000a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a16:	607b      	str	r3, [r7, #4]
 8000a18:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_7, GPIO_PIN_RESET);
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	f244 0181 	movw	r1, #16513	; 0x4081
 8000a20:	4844      	ldr	r0, [pc, #272]	; (8000b34 <MX_GPIO_Init+0x1d8>)
 8000a22:	f001 fb6f 	bl	8002104 <HAL_GPIO_WritePin>


  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000a26:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a2c:	4b42      	ldr	r3, [pc, #264]	; (8000b38 <MX_GPIO_Init+0x1dc>)
 8000a2e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a30:	2300      	movs	r3, #0
 8000a32:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000a34:	f107 031c 	add.w	r3, r7, #28
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4840      	ldr	r0, [pc, #256]	; (8000b3c <MX_GPIO_Init+0x1e0>)
 8000a3c:	f001 f9a0 	bl	8001d80 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000a40:	2332      	movs	r3, #50	; 0x32
 8000a42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a44:	2302      	movs	r3, #2
 8000a46:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a4c:	2303      	movs	r3, #3
 8000a4e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a50:	230b      	movs	r3, #11
 8000a52:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a54:	f107 031c 	add.w	r3, r7, #28
 8000a58:	4619      	mov	r1, r3
 8000a5a:	4838      	ldr	r0, [pc, #224]	; (8000b3c <MX_GPIO_Init+0x1e0>)
 8000a5c:	f001 f990 	bl	8001d80 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000a60:	2386      	movs	r3, #134	; 0x86
 8000a62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a64:	2302      	movs	r3, #2
 8000a66:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a6c:	2303      	movs	r3, #3
 8000a6e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a70:	230b      	movs	r3, #11
 8000a72:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a74:	f107 031c 	add.w	r3, r7, #28
 8000a78:	4619      	mov	r1, r3
 8000a7a:	4831      	ldr	r0, [pc, #196]	; (8000b40 <MX_GPIO_Init+0x1e4>)
 8000a7c:	f001 f980 	bl	8001d80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB14 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_7;
 8000a80:	f244 0381 	movw	r3, #16513	; 0x4081
 8000a84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a86:	2301      	movs	r3, #1
 8000a88:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a92:	f107 031c 	add.w	r3, r7, #28
 8000a96:	4619      	mov	r1, r3
 8000a98:	4826      	ldr	r0, [pc, #152]	; (8000b34 <MX_GPIO_Init+0x1d8>)
 8000a9a:	f001 f971 	bl	8001d80 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000a9e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000aa2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa4:	2302      	movs	r3, #2
 8000aa6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aac:	2303      	movs	r3, #3
 8000aae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ab0:	230b      	movs	r3, #11
 8000ab2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000ab4:	f107 031c 	add.w	r3, r7, #28
 8000ab8:	4619      	mov	r1, r3
 8000aba:	481e      	ldr	r0, [pc, #120]	; (8000b34 <MX_GPIO_Init+0x1d8>)
 8000abc:	f001 f960 	bl	8001d80 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000ac0:	2340      	movs	r3, #64	; 0x40
 8000ac2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ac4:	2301      	movs	r3, #1
 8000ac6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000acc:	2300      	movs	r3, #0
 8000ace:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000ad0:	f107 031c 	add.w	r3, r7, #28
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	481b      	ldr	r0, [pc, #108]	; (8000b44 <MX_GPIO_Init+0x1e8>)
 8000ad8:	f001 f952 	bl	8001d80 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000adc:	2380      	movs	r3, #128	; 0x80
 8000ade:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000ae8:	f107 031c 	add.w	r3, r7, #28
 8000aec:	4619      	mov	r1, r3
 8000aee:	4815      	ldr	r0, [pc, #84]	; (8000b44 <MX_GPIO_Init+0x1e8>)
 8000af0:	f001 f946 	bl	8001d80 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000af4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000af8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000afa:	2302      	movs	r3, #2
 8000afc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afe:	2300      	movs	r3, #0
 8000b00:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b02:	2303      	movs	r3, #3
 8000b04:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b06:	230b      	movs	r3, #11
 8000b08:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b0a:	f107 031c 	add.w	r3, r7, #28
 8000b0e:	4619      	mov	r1, r3
 8000b10:	480c      	ldr	r0, [pc, #48]	; (8000b44 <MX_GPIO_Init+0x1e8>)
 8000b12:	f001 f935 	bl	8001d80 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 1);
 8000b16:	2201      	movs	r2, #1
 8000b18:	2100      	movs	r1, #0
 8000b1a:	2006      	movs	r0, #6
 8000b1c:	f001 f8dd 	bl	8001cda <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000b20:	2006      	movs	r0, #6
 8000b22:	f001 f8f6 	bl	8001d12 <HAL_NVIC_EnableIRQ>


}
 8000b26:	bf00      	nop
 8000b28:	3730      	adds	r7, #48	; 0x30
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	40023800 	.word	0x40023800
 8000b34:	40020400 	.word	0x40020400
 8000b38:	10110000 	.word	0x10110000
 8000b3c:	40020800 	.word	0x40020800
 8000b40:	40020000 	.word	0x40020000
 8000b44:	40021800 	.word	0x40021800

08000b48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b4c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b4e:	e7fe      	b.n	8000b4e <Error_Handler+0x6>

08000b50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	b083      	sub	sp, #12
 8000b54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b56:	2300      	movs	r3, #0
 8000b58:	607b      	str	r3, [r7, #4]
 8000b5a:	4b10      	ldr	r3, [pc, #64]	; (8000b9c <HAL_MspInit+0x4c>)
 8000b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b5e:	4a0f      	ldr	r2, [pc, #60]	; (8000b9c <HAL_MspInit+0x4c>)
 8000b60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b64:	6453      	str	r3, [r2, #68]	; 0x44
 8000b66:	4b0d      	ldr	r3, [pc, #52]	; (8000b9c <HAL_MspInit+0x4c>)
 8000b68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b6e:	607b      	str	r3, [r7, #4]
 8000b70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b72:	2300      	movs	r3, #0
 8000b74:	603b      	str	r3, [r7, #0]
 8000b76:	4b09      	ldr	r3, [pc, #36]	; (8000b9c <HAL_MspInit+0x4c>)
 8000b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b7a:	4a08      	ldr	r2, [pc, #32]	; (8000b9c <HAL_MspInit+0x4c>)
 8000b7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b80:	6413      	str	r3, [r2, #64]	; 0x40
 8000b82:	4b06      	ldr	r3, [pc, #24]	; (8000b9c <HAL_MspInit+0x4c>)
 8000b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b8a:	603b      	str	r3, [r7, #0]
 8000b8c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b8e:	bf00      	nop
 8000b90:	370c      	adds	r7, #12
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop
 8000b9c:	40023800 	.word	0x40023800

08000ba0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b08a      	sub	sp, #40	; 0x28
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba8:	f107 0314 	add.w	r3, r7, #20
 8000bac:	2200      	movs	r2, #0
 8000bae:	601a      	str	r2, [r3, #0]
 8000bb0:	605a      	str	r2, [r3, #4]
 8000bb2:	609a      	str	r2, [r3, #8]
 8000bb4:	60da      	str	r2, [r3, #12]
 8000bb6:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	4a1d      	ldr	r2, [pc, #116]	; (8000c34 <HAL_CAN_MspInit+0x94>)
 8000bbe:	4293      	cmp	r3, r2
 8000bc0:	d133      	bne.n	8000c2a <HAL_CAN_MspInit+0x8a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	613b      	str	r3, [r7, #16]
 8000bc6:	4b1c      	ldr	r3, [pc, #112]	; (8000c38 <HAL_CAN_MspInit+0x98>)
 8000bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bca:	4a1b      	ldr	r2, [pc, #108]	; (8000c38 <HAL_CAN_MspInit+0x98>)
 8000bcc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000bd0:	6413      	str	r3, [r2, #64]	; 0x40
 8000bd2:	4b19      	ldr	r3, [pc, #100]	; (8000c38 <HAL_CAN_MspInit+0x98>)
 8000bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000bda:	613b      	str	r3, [r7, #16]
 8000bdc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bde:	2300      	movs	r3, #0
 8000be0:	60fb      	str	r3, [r7, #12]
 8000be2:	4b15      	ldr	r3, [pc, #84]	; (8000c38 <HAL_CAN_MspInit+0x98>)
 8000be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be6:	4a14      	ldr	r2, [pc, #80]	; (8000c38 <HAL_CAN_MspInit+0x98>)
 8000be8:	f043 0308 	orr.w	r3, r3, #8
 8000bec:	6313      	str	r3, [r2, #48]	; 0x30
 8000bee:	4b12      	ldr	r3, [pc, #72]	; (8000c38 <HAL_CAN_MspInit+0x98>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf2:	f003 0308 	and.w	r3, r3, #8
 8000bf6:	60fb      	str	r3, [r7, #12]
 8000bf8:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000bfa:	2303      	movs	r3, #3
 8000bfc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bfe:	2302      	movs	r3, #2
 8000c00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c02:	2300      	movs	r3, #0
 8000c04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c06:	2303      	movs	r3, #3
 8000c08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000c0a:	2309      	movs	r3, #9
 8000c0c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c0e:	f107 0314 	add.w	r3, r7, #20
 8000c12:	4619      	mov	r1, r3
 8000c14:	4809      	ldr	r0, [pc, #36]	; (8000c3c <HAL_CAN_MspInit+0x9c>)
 8000c16:	f001 f8b3 	bl	8001d80 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	2100      	movs	r1, #0
 8000c1e:	2014      	movs	r0, #20
 8000c20:	f001 f85b 	bl	8001cda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000c24:	2014      	movs	r0, #20
 8000c26:	f001 f874 	bl	8001d12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000c2a:	bf00      	nop
 8000c2c:	3728      	adds	r7, #40	; 0x28
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	40006400 	.word	0x40006400
 8000c38:	40023800 	.word	0x40023800
 8000c3c:	40020c00 	.word	0x40020c00

08000c40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c44:	e7fe      	b.n	8000c44 <NMI_Handler+0x4>

08000c46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c46:	b480      	push	{r7}
 8000c48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c4a:	e7fe      	b.n	8000c4a <HardFault_Handler+0x4>

08000c4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c50:	e7fe      	b.n	8000c50 <MemManage_Handler+0x4>

08000c52 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c52:	b480      	push	{r7}
 8000c54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c56:	e7fe      	b.n	8000c56 <BusFault_Handler+0x4>

08000c58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c5c:	e7fe      	b.n	8000c5c <UsageFault_Handler+0x4>

08000c5e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c5e:	b480      	push	{r7}
 8000c60:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c62:	bf00      	nop
 8000c64:	46bd      	mov	sp, r7
 8000c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6a:	4770      	bx	lr

08000c6c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c70:	bf00      	nop
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr

08000c7a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c7a:	b480      	push	{r7}
 8000c7c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c7e:	bf00      	nop
 8000c80:	46bd      	mov	sp, r7
 8000c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c86:	4770      	bx	lr

08000c88 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c8c:	f000 f89e 	bl	8000dcc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c90:	bf00      	nop
 8000c92:	bd80      	pop	{r7, pc}

08000c94 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000c98:	4802      	ldr	r0, [pc, #8]	; (8000ca4 <CAN1_RX0_IRQHandler+0x10>)
 8000c9a:	f000 fd10 	bl	80016be <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000c9e:	bf00      	nop
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	200001a0 	.word	0x200001a0

08000ca8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cac:	4b08      	ldr	r3, [pc, #32]	; (8000cd0 <SystemInit+0x28>)
 8000cae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cb2:	4a07      	ldr	r2, [pc, #28]	; (8000cd0 <SystemInit+0x28>)
 8000cb4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cb8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000cbc:	4b04      	ldr	r3, [pc, #16]	; (8000cd0 <SystemInit+0x28>)
 8000cbe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000cc2:	609a      	str	r2, [r3, #8]
#endif
}
 8000cc4:	bf00      	nop
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop
 8000cd0:	e000ed00 	.word	0xe000ed00

08000cd4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000cd4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d0c <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000cd8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000cda:	e003      	b.n	8000ce4 <LoopCopyDataInit>

08000cdc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000cdc:	4b0c      	ldr	r3, [pc, #48]	; (8000d10 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000cde:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000ce0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000ce2:	3104      	adds	r1, #4

08000ce4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000ce4:	480b      	ldr	r0, [pc, #44]	; (8000d14 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000ce6:	4b0c      	ldr	r3, [pc, #48]	; (8000d18 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000ce8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000cea:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000cec:	d3f6      	bcc.n	8000cdc <CopyDataInit>
  ldr  r2, =_sbss
 8000cee:	4a0b      	ldr	r2, [pc, #44]	; (8000d1c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000cf0:	e002      	b.n	8000cf8 <LoopFillZerobss>

08000cf2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000cf2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000cf4:	f842 3b04 	str.w	r3, [r2], #4

08000cf8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000cf8:	4b09      	ldr	r3, [pc, #36]	; (8000d20 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000cfa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000cfc:	d3f9      	bcc.n	8000cf2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000cfe:	f7ff ffd3 	bl	8000ca8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d02:	f001 fe91 	bl	8002a28 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d06:	f7ff fc4b 	bl	80005a0 <main>
  bx  lr    
 8000d0a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000d0c:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8000d10:	08004044 	.word	0x08004044
  ldr  r0, =_sdata
 8000d14:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000d18:	20000080 	.word	0x20000080
  ldr  r2, =_sbss
 8000d1c:	20000080 	.word	0x20000080
  ldr  r3, = _ebss
 8000d20:	200001e8 	.word	0x200001e8

08000d24 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d24:	e7fe      	b.n	8000d24 <ADC_IRQHandler>
	...

08000d28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d2c:	4b0e      	ldr	r3, [pc, #56]	; (8000d68 <HAL_Init+0x40>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	4a0d      	ldr	r2, [pc, #52]	; (8000d68 <HAL_Init+0x40>)
 8000d32:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d36:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d38:	4b0b      	ldr	r3, [pc, #44]	; (8000d68 <HAL_Init+0x40>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	4a0a      	ldr	r2, [pc, #40]	; (8000d68 <HAL_Init+0x40>)
 8000d3e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d42:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d44:	4b08      	ldr	r3, [pc, #32]	; (8000d68 <HAL_Init+0x40>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	4a07      	ldr	r2, [pc, #28]	; (8000d68 <HAL_Init+0x40>)
 8000d4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d4e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d50:	2003      	movs	r0, #3
 8000d52:	f000 ffb7 	bl	8001cc4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d56:	2000      	movs	r0, #0
 8000d58:	f000 f808 	bl	8000d6c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d5c:	f7ff fef8 	bl	8000b50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d60:	2300      	movs	r3, #0
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	40023c00 	.word	0x40023c00

08000d6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d74:	4b12      	ldr	r3, [pc, #72]	; (8000dc0 <HAL_InitTick+0x54>)
 8000d76:	681a      	ldr	r2, [r3, #0]
 8000d78:	4b12      	ldr	r3, [pc, #72]	; (8000dc4 <HAL_InitTick+0x58>)
 8000d7a:	781b      	ldrb	r3, [r3, #0]
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d82:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d86:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f000 ffcf 	bl	8001d2e <HAL_SYSTICK_Config>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d001      	beq.n	8000d9a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d96:	2301      	movs	r3, #1
 8000d98:	e00e      	b.n	8000db8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	2b0f      	cmp	r3, #15
 8000d9e:	d80a      	bhi.n	8000db6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000da0:	2200      	movs	r2, #0
 8000da2:	6879      	ldr	r1, [r7, #4]
 8000da4:	f04f 30ff 	mov.w	r0, #4294967295
 8000da8:	f000 ff97 	bl	8001cda <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000dac:	4a06      	ldr	r2, [pc, #24]	; (8000dc8 <HAL_InitTick+0x5c>)
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000db2:	2300      	movs	r3, #0
 8000db4:	e000      	b.n	8000db8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000db6:	2301      	movs	r3, #1
}
 8000db8:	4618      	mov	r0, r3
 8000dba:	3708      	adds	r7, #8
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	20000004 	.word	0x20000004
 8000dc4:	2000000c 	.word	0x2000000c
 8000dc8:	20000008 	.word	0x20000008

08000dcc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dd0:	4b06      	ldr	r3, [pc, #24]	; (8000dec <HAL_IncTick+0x20>)
 8000dd2:	781b      	ldrb	r3, [r3, #0]
 8000dd4:	461a      	mov	r2, r3
 8000dd6:	4b06      	ldr	r3, [pc, #24]	; (8000df0 <HAL_IncTick+0x24>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	4413      	add	r3, r2
 8000ddc:	4a04      	ldr	r2, [pc, #16]	; (8000df0 <HAL_IncTick+0x24>)
 8000dde:	6013      	str	r3, [r2, #0]
}
 8000de0:	bf00      	nop
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop
 8000dec:	2000000c 	.word	0x2000000c
 8000df0:	200001e0 	.word	0x200001e0

08000df4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  return uwTick;
 8000df8:	4b03      	ldr	r3, [pc, #12]	; (8000e08 <HAL_GetTick+0x14>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
}
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr
 8000e06:	bf00      	nop
 8000e08:	200001e0 	.word	0x200001e0

08000e0c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b084      	sub	sp, #16
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d101      	bne.n	8000e1e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	e0ed      	b.n	8000ffa <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e24:	b2db      	uxtb	r3, r3
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d102      	bne.n	8000e30 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000e2a:	6878      	ldr	r0, [r7, #4]
 8000e2c:	f7ff feb8 	bl	8000ba0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	681a      	ldr	r2, [r3, #0]
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	f022 0202 	bic.w	r2, r2, #2
 8000e3e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000e40:	f7ff ffd8 	bl	8000df4 <HAL_GetTick>
 8000e44:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000e46:	e012      	b.n	8000e6e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000e48:	f7ff ffd4 	bl	8000df4 <HAL_GetTick>
 8000e4c:	4602      	mov	r2, r0
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	1ad3      	subs	r3, r2, r3
 8000e52:	2b0a      	cmp	r3, #10
 8000e54:	d90b      	bls.n	8000e6e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e5a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	2205      	movs	r2, #5
 8000e66:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	e0c5      	b.n	8000ffa <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	685b      	ldr	r3, [r3, #4]
 8000e74:	f003 0302 	and.w	r3, r3, #2
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d1e5      	bne.n	8000e48 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	681a      	ldr	r2, [r3, #0]
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	f042 0201 	orr.w	r2, r2, #1
 8000e8a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000e8c:	f7ff ffb2 	bl	8000df4 <HAL_GetTick>
 8000e90:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000e92:	e012      	b.n	8000eba <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000e94:	f7ff ffae 	bl	8000df4 <HAL_GetTick>
 8000e98:	4602      	mov	r2, r0
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	1ad3      	subs	r3, r2, r3
 8000e9e:	2b0a      	cmp	r3, #10
 8000ea0:	d90b      	bls.n	8000eba <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ea6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	2205      	movs	r2, #5
 8000eb2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	e09f      	b.n	8000ffa <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	f003 0301 	and.w	r3, r3, #1
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d0e5      	beq.n	8000e94 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	7e1b      	ldrb	r3, [r3, #24]
 8000ecc:	2b01      	cmp	r3, #1
 8000ece:	d108      	bne.n	8000ee2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	681a      	ldr	r2, [r3, #0]
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000ede:	601a      	str	r2, [r3, #0]
 8000ee0:	e007      	b.n	8000ef2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	681a      	ldr	r2, [r3, #0]
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000ef0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	7e5b      	ldrb	r3, [r3, #25]
 8000ef6:	2b01      	cmp	r3, #1
 8000ef8:	d108      	bne.n	8000f0c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	681a      	ldr	r2, [r3, #0]
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000f08:	601a      	str	r2, [r3, #0]
 8000f0a:	e007      	b.n	8000f1c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	681a      	ldr	r2, [r3, #0]
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000f1a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	7e9b      	ldrb	r3, [r3, #26]
 8000f20:	2b01      	cmp	r3, #1
 8000f22:	d108      	bne.n	8000f36 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	681a      	ldr	r2, [r3, #0]
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	f042 0220 	orr.w	r2, r2, #32
 8000f32:	601a      	str	r2, [r3, #0]
 8000f34:	e007      	b.n	8000f46 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	681a      	ldr	r2, [r3, #0]
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	f022 0220 	bic.w	r2, r2, #32
 8000f44:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	7edb      	ldrb	r3, [r3, #27]
 8000f4a:	2b01      	cmp	r3, #1
 8000f4c:	d108      	bne.n	8000f60 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	681a      	ldr	r2, [r3, #0]
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	f022 0210 	bic.w	r2, r2, #16
 8000f5c:	601a      	str	r2, [r3, #0]
 8000f5e:	e007      	b.n	8000f70 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	681a      	ldr	r2, [r3, #0]
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	f042 0210 	orr.w	r2, r2, #16
 8000f6e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	7f1b      	ldrb	r3, [r3, #28]
 8000f74:	2b01      	cmp	r3, #1
 8000f76:	d108      	bne.n	8000f8a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	681a      	ldr	r2, [r3, #0]
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	f042 0208 	orr.w	r2, r2, #8
 8000f86:	601a      	str	r2, [r3, #0]
 8000f88:	e007      	b.n	8000f9a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	681a      	ldr	r2, [r3, #0]
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	f022 0208 	bic.w	r2, r2, #8
 8000f98:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	7f5b      	ldrb	r3, [r3, #29]
 8000f9e:	2b01      	cmp	r3, #1
 8000fa0:	d108      	bne.n	8000fb4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	681a      	ldr	r2, [r3, #0]
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	f042 0204 	orr.w	r2, r2, #4
 8000fb0:	601a      	str	r2, [r3, #0]
 8000fb2:	e007      	b.n	8000fc4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	681a      	ldr	r2, [r3, #0]
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	f022 0204 	bic.w	r2, r2, #4
 8000fc2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	689a      	ldr	r2, [r3, #8]
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	68db      	ldr	r3, [r3, #12]
 8000fcc:	431a      	orrs	r2, r3
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	691b      	ldr	r3, [r3, #16]
 8000fd2:	431a      	orrs	r2, r3
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	695b      	ldr	r3, [r3, #20]
 8000fd8:	ea42 0103 	orr.w	r1, r2, r3
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	1e5a      	subs	r2, r3, #1
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	430a      	orrs	r2, r1
 8000fe8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	2200      	movs	r2, #0
 8000fee:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000ff8:	2300      	movs	r3, #0
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	3710      	adds	r7, #16
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
	...

08001004 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001004:	b480      	push	{r7}
 8001006:	b087      	sub	sp, #28
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
 800100c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	f893 3020 	ldrb.w	r3, [r3, #32]
 800101a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800101c:	7cfb      	ldrb	r3, [r7, #19]
 800101e:	2b01      	cmp	r3, #1
 8001020:	d003      	beq.n	800102a <HAL_CAN_ConfigFilter+0x26>
 8001022:	7cfb      	ldrb	r3, [r7, #19]
 8001024:	2b02      	cmp	r3, #2
 8001026:	f040 80be 	bne.w	80011a6 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800102a:	4b65      	ldr	r3, [pc, #404]	; (80011c0 <HAL_CAN_ConfigFilter+0x1bc>)
 800102c:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800102e:	697b      	ldr	r3, [r7, #20]
 8001030:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001034:	f043 0201 	orr.w	r2, r3, #1
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800103e:	697b      	ldr	r3, [r7, #20]
 8001040:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001044:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8001048:	697b      	ldr	r3, [r7, #20]
 800104a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800104e:	697b      	ldr	r3, [r7, #20]
 8001050:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001058:	021b      	lsls	r3, r3, #8
 800105a:	431a      	orrs	r2, r3
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	695b      	ldr	r3, [r3, #20]
 8001066:	f003 031f 	and.w	r3, r3, #31
 800106a:	2201      	movs	r2, #1
 800106c:	fa02 f303 	lsl.w	r3, r2, r3
 8001070:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001072:	697b      	ldr	r3, [r7, #20]
 8001074:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	43db      	mvns	r3, r3
 800107c:	401a      	ands	r2, r3
 800107e:	697b      	ldr	r3, [r7, #20]
 8001080:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	69db      	ldr	r3, [r3, #28]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d123      	bne.n	80010d4 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	43db      	mvns	r3, r3
 8001096:	401a      	ands	r2, r3
 8001098:	697b      	ldr	r3, [r7, #20]
 800109a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	68db      	ldr	r3, [r3, #12]
 80010a2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80010aa:	683a      	ldr	r2, [r7, #0]
 80010ac:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80010ae:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80010b0:	697b      	ldr	r3, [r7, #20]
 80010b2:	3248      	adds	r2, #72	; 0x48
 80010b4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	689b      	ldr	r3, [r3, #8]
 80010bc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80010c8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80010ca:	6979      	ldr	r1, [r7, #20]
 80010cc:	3348      	adds	r3, #72	; 0x48
 80010ce:	00db      	lsls	r3, r3, #3
 80010d0:	440b      	add	r3, r1
 80010d2:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	69db      	ldr	r3, [r3, #28]
 80010d8:	2b01      	cmp	r3, #1
 80010da:	d122      	bne.n	8001122 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80010dc:	697b      	ldr	r3, [r7, #20]
 80010de:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	431a      	orrs	r2, r3
 80010e6:	697b      	ldr	r3, [r7, #20]
 80010e8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80010f8:	683a      	ldr	r2, [r7, #0]
 80010fa:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80010fc:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80010fe:	697b      	ldr	r3, [r7, #20]
 8001100:	3248      	adds	r2, #72	; 0x48
 8001102:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	689b      	ldr	r3, [r3, #8]
 800110a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	68db      	ldr	r3, [r3, #12]
 8001110:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001116:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001118:	6979      	ldr	r1, [r7, #20]
 800111a:	3348      	adds	r3, #72	; 0x48
 800111c:	00db      	lsls	r3, r3, #3
 800111e:	440b      	add	r3, r1
 8001120:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	699b      	ldr	r3, [r3, #24]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d109      	bne.n	800113e <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	43db      	mvns	r3, r3
 8001134:	401a      	ands	r2, r3
 8001136:	697b      	ldr	r3, [r7, #20]
 8001138:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800113c:	e007      	b.n	800114e <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800113e:	697b      	ldr	r3, [r7, #20]
 8001140:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	431a      	orrs	r2, r3
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	691b      	ldr	r3, [r3, #16]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d109      	bne.n	800116a <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001156:	697b      	ldr	r3, [r7, #20]
 8001158:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	43db      	mvns	r3, r3
 8001160:	401a      	ands	r2, r3
 8001162:	697b      	ldr	r3, [r7, #20]
 8001164:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001168:	e007      	b.n	800117a <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800116a:	697b      	ldr	r3, [r7, #20]
 800116c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	431a      	orrs	r2, r3
 8001174:	697b      	ldr	r3, [r7, #20]
 8001176:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	6a1b      	ldr	r3, [r3, #32]
 800117e:	2b01      	cmp	r3, #1
 8001180:	d107      	bne.n	8001192 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001182:	697b      	ldr	r3, [r7, #20]
 8001184:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	431a      	orrs	r2, r3
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001192:	697b      	ldr	r3, [r7, #20]
 8001194:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001198:	f023 0201 	bic.w	r2, r3, #1
 800119c:	697b      	ldr	r3, [r7, #20]
 800119e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80011a2:	2300      	movs	r3, #0
 80011a4:	e006      	b.n	80011b4 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011aa:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80011b2:	2301      	movs	r3, #1
  }
}
 80011b4:	4618      	mov	r0, r3
 80011b6:	371c      	adds	r7, #28
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr
 80011c0:	40006400 	.word	0x40006400

080011c4 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b084      	sub	sp, #16
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011d2:	b2db      	uxtb	r3, r3
 80011d4:	2b01      	cmp	r3, #1
 80011d6:	d12e      	bne.n	8001236 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	2202      	movs	r2, #2
 80011dc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	681a      	ldr	r2, [r3, #0]
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f022 0201 	bic.w	r2, r2, #1
 80011ee:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80011f0:	f7ff fe00 	bl	8000df4 <HAL_GetTick>
 80011f4:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80011f6:	e012      	b.n	800121e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80011f8:	f7ff fdfc 	bl	8000df4 <HAL_GetTick>
 80011fc:	4602      	mov	r2, r0
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	1ad3      	subs	r3, r2, r3
 8001202:	2b0a      	cmp	r3, #10
 8001204:	d90b      	bls.n	800121e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800120a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	2205      	movs	r2, #5
 8001216:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800121a:	2301      	movs	r3, #1
 800121c:	e012      	b.n	8001244 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	f003 0301 	and.w	r3, r3, #1
 8001228:	2b00      	cmp	r3, #0
 800122a:	d1e5      	bne.n	80011f8 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	2200      	movs	r2, #0
 8001230:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001232:	2300      	movs	r3, #0
 8001234:	e006      	b.n	8001244 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800123a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001242:	2301      	movs	r3, #1
  }
}
 8001244:	4618      	mov	r0, r3
 8001246:	3710      	adds	r7, #16
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}

0800124c <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 800124c:	b480      	push	{r7}
 800124e:	b089      	sub	sp, #36	; 0x24
 8001250:	af00      	add	r7, sp, #0
 8001252:	60f8      	str	r0, [r7, #12]
 8001254:	60b9      	str	r1, [r7, #8]
 8001256:	607a      	str	r2, [r7, #4]
 8001258:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001260:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	689b      	ldr	r3, [r3, #8]
 8001268:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800126a:	7ffb      	ldrb	r3, [r7, #31]
 800126c:	2b01      	cmp	r3, #1
 800126e:	d003      	beq.n	8001278 <HAL_CAN_AddTxMessage+0x2c>
 8001270:	7ffb      	ldrb	r3, [r7, #31]
 8001272:	2b02      	cmp	r3, #2
 8001274:	f040 80b8 	bne.w	80013e8 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001278:	69bb      	ldr	r3, [r7, #24]
 800127a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800127e:	2b00      	cmp	r3, #0
 8001280:	d10a      	bne.n	8001298 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001282:	69bb      	ldr	r3, [r7, #24]
 8001284:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001288:	2b00      	cmp	r3, #0
 800128a:	d105      	bne.n	8001298 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800128c:	69bb      	ldr	r3, [r7, #24]
 800128e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001292:	2b00      	cmp	r3, #0
 8001294:	f000 80a0 	beq.w	80013d8 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001298:	69bb      	ldr	r3, [r7, #24]
 800129a:	0e1b      	lsrs	r3, r3, #24
 800129c:	f003 0303 	and.w	r3, r3, #3
 80012a0:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	2b02      	cmp	r3, #2
 80012a6:	d907      	bls.n	80012b8 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012ac:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80012b4:	2301      	movs	r3, #1
 80012b6:	e09e      	b.n	80013f6 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80012b8:	2201      	movs	r2, #1
 80012ba:	697b      	ldr	r3, [r7, #20]
 80012bc:	409a      	lsls	r2, r3
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80012c2:	68bb      	ldr	r3, [r7, #8]
 80012c4:	689b      	ldr	r3, [r3, #8]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d10d      	bne.n	80012e6 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80012ca:	68bb      	ldr	r3, [r7, #8]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80012d0:	68bb      	ldr	r3, [r7, #8]
 80012d2:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80012d4:	68f9      	ldr	r1, [r7, #12]
 80012d6:	6809      	ldr	r1, [r1, #0]
 80012d8:	431a      	orrs	r2, r3
 80012da:	697b      	ldr	r3, [r7, #20]
 80012dc:	3318      	adds	r3, #24
 80012de:	011b      	lsls	r3, r3, #4
 80012e0:	440b      	add	r3, r1
 80012e2:	601a      	str	r2, [r3, #0]
 80012e4:	e00f      	b.n	8001306 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80012e6:	68bb      	ldr	r3, [r7, #8]
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80012ec:	68bb      	ldr	r3, [r7, #8]
 80012ee:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80012f0:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80012f2:	68bb      	ldr	r3, [r7, #8]
 80012f4:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80012f6:	68f9      	ldr	r1, [r7, #12]
 80012f8:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80012fa:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80012fc:	697b      	ldr	r3, [r7, #20]
 80012fe:	3318      	adds	r3, #24
 8001300:	011b      	lsls	r3, r3, #4
 8001302:	440b      	add	r3, r1
 8001304:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	6819      	ldr	r1, [r3, #0]
 800130a:	68bb      	ldr	r3, [r7, #8]
 800130c:	691a      	ldr	r2, [r3, #16]
 800130e:	697b      	ldr	r3, [r7, #20]
 8001310:	3318      	adds	r3, #24
 8001312:	011b      	lsls	r3, r3, #4
 8001314:	440b      	add	r3, r1
 8001316:	3304      	adds	r3, #4
 8001318:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800131a:	68bb      	ldr	r3, [r7, #8]
 800131c:	7d1b      	ldrb	r3, [r3, #20]
 800131e:	2b01      	cmp	r3, #1
 8001320:	d111      	bne.n	8001346 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	681a      	ldr	r2, [r3, #0]
 8001326:	697b      	ldr	r3, [r7, #20]
 8001328:	3318      	adds	r3, #24
 800132a:	011b      	lsls	r3, r3, #4
 800132c:	4413      	add	r3, r2
 800132e:	3304      	adds	r3, #4
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	68fa      	ldr	r2, [r7, #12]
 8001334:	6811      	ldr	r1, [r2, #0]
 8001336:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800133a:	697b      	ldr	r3, [r7, #20]
 800133c:	3318      	adds	r3, #24
 800133e:	011b      	lsls	r3, r3, #4
 8001340:	440b      	add	r3, r1
 8001342:	3304      	adds	r3, #4
 8001344:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	3307      	adds	r3, #7
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	061a      	lsls	r2, r3, #24
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	3306      	adds	r3, #6
 8001352:	781b      	ldrb	r3, [r3, #0]
 8001354:	041b      	lsls	r3, r3, #16
 8001356:	431a      	orrs	r2, r3
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	3305      	adds	r3, #5
 800135c:	781b      	ldrb	r3, [r3, #0]
 800135e:	021b      	lsls	r3, r3, #8
 8001360:	4313      	orrs	r3, r2
 8001362:	687a      	ldr	r2, [r7, #4]
 8001364:	3204      	adds	r2, #4
 8001366:	7812      	ldrb	r2, [r2, #0]
 8001368:	4610      	mov	r0, r2
 800136a:	68fa      	ldr	r2, [r7, #12]
 800136c:	6811      	ldr	r1, [r2, #0]
 800136e:	ea43 0200 	orr.w	r2, r3, r0
 8001372:	697b      	ldr	r3, [r7, #20]
 8001374:	011b      	lsls	r3, r3, #4
 8001376:	440b      	add	r3, r1
 8001378:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800137c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	3303      	adds	r3, #3
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	061a      	lsls	r2, r3, #24
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	3302      	adds	r3, #2
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	041b      	lsls	r3, r3, #16
 800138e:	431a      	orrs	r2, r3
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	3301      	adds	r3, #1
 8001394:	781b      	ldrb	r3, [r3, #0]
 8001396:	021b      	lsls	r3, r3, #8
 8001398:	4313      	orrs	r3, r2
 800139a:	687a      	ldr	r2, [r7, #4]
 800139c:	7812      	ldrb	r2, [r2, #0]
 800139e:	4610      	mov	r0, r2
 80013a0:	68fa      	ldr	r2, [r7, #12]
 80013a2:	6811      	ldr	r1, [r2, #0]
 80013a4:	ea43 0200 	orr.w	r2, r3, r0
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	011b      	lsls	r3, r3, #4
 80013ac:	440b      	add	r3, r1
 80013ae:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80013b2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	681a      	ldr	r2, [r3, #0]
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	3318      	adds	r3, #24
 80013bc:	011b      	lsls	r3, r3, #4
 80013be:	4413      	add	r3, r2
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	68fa      	ldr	r2, [r7, #12]
 80013c4:	6811      	ldr	r1, [r2, #0]
 80013c6:	f043 0201 	orr.w	r2, r3, #1
 80013ca:	697b      	ldr	r3, [r7, #20]
 80013cc:	3318      	adds	r3, #24
 80013ce:	011b      	lsls	r3, r3, #4
 80013d0:	440b      	add	r3, r1
 80013d2:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80013d4:	2300      	movs	r3, #0
 80013d6:	e00e      	b.n	80013f6 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013dc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80013e4:	2301      	movs	r3, #1
 80013e6:	e006      	b.n	80013f6 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ec:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80013f4:	2301      	movs	r3, #1
  }
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	3724      	adds	r7, #36	; 0x24
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr

08001402 <HAL_CAN_IsTxMessagePending>:
  *          - 0 : No pending transmission request on any selected Tx Mailboxes.
  *          - 1 : Pending transmission request on at least one of the selected
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 8001402:	b480      	push	{r7}
 8001404:	b085      	sub	sp, #20
 8001406:	af00      	add	r7, sp, #0
 8001408:	6078      	str	r0, [r7, #4]
 800140a:	6039      	str	r1, [r7, #0]
  uint32_t status = 0U;
 800140c:	2300      	movs	r3, #0
 800140e:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001416:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 8001418:	7afb      	ldrb	r3, [r7, #11]
 800141a:	2b01      	cmp	r3, #1
 800141c:	d002      	beq.n	8001424 <HAL_CAN_IsTxMessagePending+0x22>
 800141e:	7afb      	ldrb	r3, [r7, #11]
 8001420:	2b02      	cmp	r3, #2
 8001422:	d10b      	bne.n	800143c <HAL_CAN_IsTxMessagePending+0x3a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	689a      	ldr	r2, [r3, #8]
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	069b      	lsls	r3, r3, #26
 800142e:	401a      	ands	r2, r3
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	069b      	lsls	r3, r3, #26
 8001434:	429a      	cmp	r2, r3
 8001436:	d001      	beq.n	800143c <HAL_CAN_IsTxMessagePending+0x3a>
    {
      status = 1U;
 8001438:	2301      	movs	r3, #1
 800143a:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return status */
  return status;
 800143c:	68fb      	ldr	r3, [r7, #12]
}
 800143e:	4618      	mov	r0, r3
 8001440:	3714      	adds	r7, #20
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr

0800144a <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800144a:	b480      	push	{r7}
 800144c:	b087      	sub	sp, #28
 800144e:	af00      	add	r7, sp, #0
 8001450:	60f8      	str	r0, [r7, #12]
 8001452:	60b9      	str	r1, [r7, #8]
 8001454:	607a      	str	r2, [r7, #4]
 8001456:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800145e:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001460:	7dfb      	ldrb	r3, [r7, #23]
 8001462:	2b01      	cmp	r3, #1
 8001464:	d003      	beq.n	800146e <HAL_CAN_GetRxMessage+0x24>
 8001466:	7dfb      	ldrb	r3, [r7, #23]
 8001468:	2b02      	cmp	r3, #2
 800146a:	f040 80f3 	bne.w	8001654 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800146e:	68bb      	ldr	r3, [r7, #8]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d10e      	bne.n	8001492 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	68db      	ldr	r3, [r3, #12]
 800147a:	f003 0303 	and.w	r3, r3, #3
 800147e:	2b00      	cmp	r3, #0
 8001480:	d116      	bne.n	80014b0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001486:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800148e:	2301      	movs	r3, #1
 8001490:	e0e7      	b.n	8001662 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	691b      	ldr	r3, [r3, #16]
 8001498:	f003 0303 	and.w	r3, r3, #3
 800149c:	2b00      	cmp	r3, #0
 800149e:	d107      	bne.n	80014b0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014a4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80014ac:	2301      	movs	r3, #1
 80014ae:	e0d8      	b.n	8001662 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	681a      	ldr	r2, [r3, #0]
 80014b4:	68bb      	ldr	r3, [r7, #8]
 80014b6:	331b      	adds	r3, #27
 80014b8:	011b      	lsls	r3, r3, #4
 80014ba:	4413      	add	r3, r2
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f003 0204 	and.w	r2, r3, #4
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	689b      	ldr	r3, [r3, #8]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d10c      	bne.n	80014e8 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	681a      	ldr	r2, [r3, #0]
 80014d2:	68bb      	ldr	r3, [r7, #8]
 80014d4:	331b      	adds	r3, #27
 80014d6:	011b      	lsls	r3, r3, #4
 80014d8:	4413      	add	r3, r2
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	0d5b      	lsrs	r3, r3, #21
 80014de:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	601a      	str	r2, [r3, #0]
 80014e6:	e00b      	b.n	8001500 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	681a      	ldr	r2, [r3, #0]
 80014ec:	68bb      	ldr	r3, [r7, #8]
 80014ee:	331b      	adds	r3, #27
 80014f0:	011b      	lsls	r3, r3, #4
 80014f2:	4413      	add	r3, r2
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	08db      	lsrs	r3, r3, #3
 80014f8:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	681a      	ldr	r2, [r3, #0]
 8001504:	68bb      	ldr	r3, [r7, #8]
 8001506:	331b      	adds	r3, #27
 8001508:	011b      	lsls	r3, r3, #4
 800150a:	4413      	add	r3, r2
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f003 0202 	and.w	r2, r3, #2
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	681a      	ldr	r2, [r3, #0]
 800151a:	68bb      	ldr	r3, [r7, #8]
 800151c:	331b      	adds	r3, #27
 800151e:	011b      	lsls	r3, r3, #4
 8001520:	4413      	add	r3, r2
 8001522:	3304      	adds	r3, #4
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f003 020f 	and.w	r2, r3, #15
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	681a      	ldr	r2, [r3, #0]
 8001532:	68bb      	ldr	r3, [r7, #8]
 8001534:	331b      	adds	r3, #27
 8001536:	011b      	lsls	r3, r3, #4
 8001538:	4413      	add	r3, r2
 800153a:	3304      	adds	r3, #4
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	0a1b      	lsrs	r3, r3, #8
 8001540:	b2da      	uxtb	r2, r3
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	681a      	ldr	r2, [r3, #0]
 800154a:	68bb      	ldr	r3, [r7, #8]
 800154c:	331b      	adds	r3, #27
 800154e:	011b      	lsls	r3, r3, #4
 8001550:	4413      	add	r3, r2
 8001552:	3304      	adds	r3, #4
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	0c1b      	lsrs	r3, r3, #16
 8001558:	b29a      	uxth	r2, r3
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	681a      	ldr	r2, [r3, #0]
 8001562:	68bb      	ldr	r3, [r7, #8]
 8001564:	011b      	lsls	r3, r3, #4
 8001566:	4413      	add	r3, r2
 8001568:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	b2da      	uxtb	r2, r3
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	681a      	ldr	r2, [r3, #0]
 8001578:	68bb      	ldr	r3, [r7, #8]
 800157a:	011b      	lsls	r3, r3, #4
 800157c:	4413      	add	r3, r2
 800157e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	0a1a      	lsrs	r2, r3, #8
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	3301      	adds	r3, #1
 800158a:	b2d2      	uxtb	r2, r2
 800158c:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	681a      	ldr	r2, [r3, #0]
 8001592:	68bb      	ldr	r3, [r7, #8]
 8001594:	011b      	lsls	r3, r3, #4
 8001596:	4413      	add	r3, r2
 8001598:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	0c1a      	lsrs	r2, r3, #16
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	3302      	adds	r3, #2
 80015a4:	b2d2      	uxtb	r2, r2
 80015a6:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	681a      	ldr	r2, [r3, #0]
 80015ac:	68bb      	ldr	r3, [r7, #8]
 80015ae:	011b      	lsls	r3, r3, #4
 80015b0:	4413      	add	r3, r2
 80015b2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	0e1a      	lsrs	r2, r3, #24
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	3303      	adds	r3, #3
 80015be:	b2d2      	uxtb	r2, r2
 80015c0:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	681a      	ldr	r2, [r3, #0]
 80015c6:	68bb      	ldr	r3, [r7, #8]
 80015c8:	011b      	lsls	r3, r3, #4
 80015ca:	4413      	add	r3, r2
 80015cc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80015d0:	681a      	ldr	r2, [r3, #0]
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	3304      	adds	r3, #4
 80015d6:	b2d2      	uxtb	r2, r2
 80015d8:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	681a      	ldr	r2, [r3, #0]
 80015de:	68bb      	ldr	r3, [r7, #8]
 80015e0:	011b      	lsls	r3, r3, #4
 80015e2:	4413      	add	r3, r2
 80015e4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	0a1a      	lsrs	r2, r3, #8
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	3305      	adds	r3, #5
 80015f0:	b2d2      	uxtb	r2, r2
 80015f2:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	681a      	ldr	r2, [r3, #0]
 80015f8:	68bb      	ldr	r3, [r7, #8]
 80015fa:	011b      	lsls	r3, r3, #4
 80015fc:	4413      	add	r3, r2
 80015fe:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	0c1a      	lsrs	r2, r3, #16
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	3306      	adds	r3, #6
 800160a:	b2d2      	uxtb	r2, r2
 800160c:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	681a      	ldr	r2, [r3, #0]
 8001612:	68bb      	ldr	r3, [r7, #8]
 8001614:	011b      	lsls	r3, r3, #4
 8001616:	4413      	add	r3, r2
 8001618:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	0e1a      	lsrs	r2, r3, #24
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	3307      	adds	r3, #7
 8001624:	b2d2      	uxtb	r2, r2
 8001626:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001628:	68bb      	ldr	r3, [r7, #8]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d108      	bne.n	8001640 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	68da      	ldr	r2, [r3, #12]
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f042 0220 	orr.w	r2, r2, #32
 800163c:	60da      	str	r2, [r3, #12]
 800163e:	e007      	b.n	8001650 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	691a      	ldr	r2, [r3, #16]
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f042 0220 	orr.w	r2, r2, #32
 800164e:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001650:	2300      	movs	r3, #0
 8001652:	e006      	b.n	8001662 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001658:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001660:	2301      	movs	r3, #1
  }
}
 8001662:	4618      	mov	r0, r3
 8001664:	371c      	adds	r7, #28
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr

0800166e <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 800166e:	b480      	push	{r7}
 8001670:	b085      	sub	sp, #20
 8001672:	af00      	add	r7, sp, #0
 8001674:	6078      	str	r0, [r7, #4]
 8001676:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 8001678:	2300      	movs	r3, #0
 800167a:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001682:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001684:	7afb      	ldrb	r3, [r7, #11]
 8001686:	2b01      	cmp	r3, #1
 8001688:	d002      	beq.n	8001690 <HAL_CAN_GetRxFifoFillLevel+0x22>
 800168a:	7afb      	ldrb	r3, [r7, #11]
 800168c:	2b02      	cmp	r3, #2
 800168e:	d10f      	bne.n	80016b0 <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d106      	bne.n	80016a4 <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	68db      	ldr	r3, [r3, #12]
 800169c:	f003 0303 	and.w	r3, r3, #3
 80016a0:	60fb      	str	r3, [r7, #12]
 80016a2:	e005      	b.n	80016b0 <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	691b      	ldr	r3, [r3, #16]
 80016aa:	f003 0303 	and.w	r3, r3, #3
 80016ae:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 80016b0:	68fb      	ldr	r3, [r7, #12]
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	3714      	adds	r7, #20
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr

080016be <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80016be:	b580      	push	{r7, lr}
 80016c0:	b08a      	sub	sp, #40	; 0x28
 80016c2:	af00      	add	r7, sp, #0
 80016c4:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80016c6:	2300      	movs	r3, #0
 80016c8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	695b      	ldr	r3, [r3, #20]
 80016d0:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	689b      	ldr	r3, [r3, #8]
 80016e0:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	68db      	ldr	r3, [r3, #12]
 80016e8:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	691b      	ldr	r3, [r3, #16]
 80016f0:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	699b      	ldr	r3, [r3, #24]
 80016f8:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80016fa:	6a3b      	ldr	r3, [r7, #32]
 80016fc:	f003 0301 	and.w	r3, r3, #1
 8001700:	2b00      	cmp	r3, #0
 8001702:	d07c      	beq.n	80017fe <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001704:	69bb      	ldr	r3, [r7, #24]
 8001706:	f003 0301 	and.w	r3, r3, #1
 800170a:	2b00      	cmp	r3, #0
 800170c:	d023      	beq.n	8001756 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	2201      	movs	r2, #1
 8001714:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001716:	69bb      	ldr	r3, [r7, #24]
 8001718:	f003 0302 	and.w	r3, r3, #2
 800171c:	2b00      	cmp	r3, #0
 800171e:	d003      	beq.n	8001728 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001720:	6878      	ldr	r0, [r7, #4]
 8001722:	f000 f97d 	bl	8001a20 <HAL_CAN_TxMailbox0CompleteCallback>
 8001726:	e016      	b.n	8001756 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001728:	69bb      	ldr	r3, [r7, #24]
 800172a:	f003 0304 	and.w	r3, r3, #4
 800172e:	2b00      	cmp	r3, #0
 8001730:	d004      	beq.n	800173c <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001734:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001738:	627b      	str	r3, [r7, #36]	; 0x24
 800173a:	e00c      	b.n	8001756 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800173c:	69bb      	ldr	r3, [r7, #24]
 800173e:	f003 0308 	and.w	r3, r3, #8
 8001742:	2b00      	cmp	r3, #0
 8001744:	d004      	beq.n	8001750 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001748:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800174c:	627b      	str	r3, [r7, #36]	; 0x24
 800174e:	e002      	b.n	8001756 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001750:	6878      	ldr	r0, [r7, #4]
 8001752:	f000 f983 	bl	8001a5c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001756:	69bb      	ldr	r3, [r7, #24]
 8001758:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800175c:	2b00      	cmp	r3, #0
 800175e:	d024      	beq.n	80017aa <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001768:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800176a:	69bb      	ldr	r3, [r7, #24]
 800176c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001770:	2b00      	cmp	r3, #0
 8001772:	d003      	beq.n	800177c <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001774:	6878      	ldr	r0, [r7, #4]
 8001776:	f000 f95d 	bl	8001a34 <HAL_CAN_TxMailbox1CompleteCallback>
 800177a:	e016      	b.n	80017aa <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800177c:	69bb      	ldr	r3, [r7, #24]
 800177e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001782:	2b00      	cmp	r3, #0
 8001784:	d004      	beq.n	8001790 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001788:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800178c:	627b      	str	r3, [r7, #36]	; 0x24
 800178e:	e00c      	b.n	80017aa <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001790:	69bb      	ldr	r3, [r7, #24]
 8001792:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001796:	2b00      	cmp	r3, #0
 8001798:	d004      	beq.n	80017a4 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800179a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800179c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017a0:	627b      	str	r3, [r7, #36]	; 0x24
 80017a2:	e002      	b.n	80017aa <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80017a4:	6878      	ldr	r0, [r7, #4]
 80017a6:	f000 f963 	bl	8001a70 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80017aa:	69bb      	ldr	r3, [r7, #24]
 80017ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d024      	beq.n	80017fe <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80017bc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80017be:	69bb      	ldr	r3, [r7, #24]
 80017c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d003      	beq.n	80017d0 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80017c8:	6878      	ldr	r0, [r7, #4]
 80017ca:	f000 f93d 	bl	8001a48 <HAL_CAN_TxMailbox2CompleteCallback>
 80017ce:	e016      	b.n	80017fe <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80017d0:	69bb      	ldr	r3, [r7, #24]
 80017d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d004      	beq.n	80017e4 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80017da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80017e0:	627b      	str	r3, [r7, #36]	; 0x24
 80017e2:	e00c      	b.n	80017fe <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80017e4:	69bb      	ldr	r3, [r7, #24]
 80017e6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d004      	beq.n	80017f8 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80017ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017f4:	627b      	str	r3, [r7, #36]	; 0x24
 80017f6:	e002      	b.n	80017fe <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80017f8:	6878      	ldr	r0, [r7, #4]
 80017fa:	f000 f943 	bl	8001a84 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80017fe:	6a3b      	ldr	r3, [r7, #32]
 8001800:	f003 0308 	and.w	r3, r3, #8
 8001804:	2b00      	cmp	r3, #0
 8001806:	d00c      	beq.n	8001822 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	f003 0310 	and.w	r3, r3, #16
 800180e:	2b00      	cmp	r3, #0
 8001810:	d007      	beq.n	8001822 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001814:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001818:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	2210      	movs	r2, #16
 8001820:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001822:	6a3b      	ldr	r3, [r7, #32]
 8001824:	f003 0304 	and.w	r3, r3, #4
 8001828:	2b00      	cmp	r3, #0
 800182a:	d00b      	beq.n	8001844 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	f003 0308 	and.w	r3, r3, #8
 8001832:	2b00      	cmp	r3, #0
 8001834:	d006      	beq.n	8001844 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	2208      	movs	r2, #8
 800183c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800183e:	6878      	ldr	r0, [r7, #4]
 8001840:	f000 f934 	bl	8001aac <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001844:	6a3b      	ldr	r3, [r7, #32]
 8001846:	f003 0302 	and.w	r3, r3, #2
 800184a:	2b00      	cmp	r3, #0
 800184c:	d009      	beq.n	8001862 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	68db      	ldr	r3, [r3, #12]
 8001854:	f003 0303 	and.w	r3, r3, #3
 8001858:	2b00      	cmp	r3, #0
 800185a:	d002      	beq.n	8001862 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800185c:	6878      	ldr	r0, [r7, #4]
 800185e:	f000 f91b 	bl	8001a98 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001862:	6a3b      	ldr	r3, [r7, #32]
 8001864:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001868:	2b00      	cmp	r3, #0
 800186a:	d00c      	beq.n	8001886 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800186c:	693b      	ldr	r3, [r7, #16]
 800186e:	f003 0310 	and.w	r3, r3, #16
 8001872:	2b00      	cmp	r3, #0
 8001874:	d007      	beq.n	8001886 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001878:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800187c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	2210      	movs	r2, #16
 8001884:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001886:	6a3b      	ldr	r3, [r7, #32]
 8001888:	f003 0320 	and.w	r3, r3, #32
 800188c:	2b00      	cmp	r3, #0
 800188e:	d00b      	beq.n	80018a8 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001890:	693b      	ldr	r3, [r7, #16]
 8001892:	f003 0308 	and.w	r3, r3, #8
 8001896:	2b00      	cmp	r3, #0
 8001898:	d006      	beq.n	80018a8 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	2208      	movs	r2, #8
 80018a0:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80018a2:	6878      	ldr	r0, [r7, #4]
 80018a4:	f000 f916 	bl	8001ad4 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80018a8:	6a3b      	ldr	r3, [r7, #32]
 80018aa:	f003 0310 	and.w	r3, r3, #16
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d009      	beq.n	80018c6 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	691b      	ldr	r3, [r3, #16]
 80018b8:	f003 0303 	and.w	r3, r3, #3
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d002      	beq.n	80018c6 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80018c0:	6878      	ldr	r0, [r7, #4]
 80018c2:	f000 f8fd 	bl	8001ac0 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80018c6:	6a3b      	ldr	r3, [r7, #32]
 80018c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d00b      	beq.n	80018e8 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80018d0:	69fb      	ldr	r3, [r7, #28]
 80018d2:	f003 0310 	and.w	r3, r3, #16
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d006      	beq.n	80018e8 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	2210      	movs	r2, #16
 80018e0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80018e2:	6878      	ldr	r0, [r7, #4]
 80018e4:	f000 f900 	bl	8001ae8 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80018e8:	6a3b      	ldr	r3, [r7, #32]
 80018ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d00b      	beq.n	800190a <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	f003 0308 	and.w	r3, r3, #8
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d006      	beq.n	800190a <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	2208      	movs	r2, #8
 8001902:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001904:	6878      	ldr	r0, [r7, #4]
 8001906:	f000 f8f9 	bl	8001afc <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800190a:	6a3b      	ldr	r3, [r7, #32]
 800190c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001910:	2b00      	cmp	r3, #0
 8001912:	d075      	beq.n	8001a00 <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001914:	69fb      	ldr	r3, [r7, #28]
 8001916:	f003 0304 	and.w	r3, r3, #4
 800191a:	2b00      	cmp	r3, #0
 800191c:	d06c      	beq.n	80019f8 <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800191e:	6a3b      	ldr	r3, [r7, #32]
 8001920:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001924:	2b00      	cmp	r3, #0
 8001926:	d008      	beq.n	800193a <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800192e:	2b00      	cmp	r3, #0
 8001930:	d003      	beq.n	800193a <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001934:	f043 0301 	orr.w	r3, r3, #1
 8001938:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800193a:	6a3b      	ldr	r3, [r7, #32]
 800193c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001940:	2b00      	cmp	r3, #0
 8001942:	d008      	beq.n	8001956 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800194a:	2b00      	cmp	r3, #0
 800194c:	d003      	beq.n	8001956 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800194e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001950:	f043 0302 	orr.w	r3, r3, #2
 8001954:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001956:	6a3b      	ldr	r3, [r7, #32]
 8001958:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800195c:	2b00      	cmp	r3, #0
 800195e:	d008      	beq.n	8001972 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001966:	2b00      	cmp	r3, #0
 8001968:	d003      	beq.n	8001972 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800196a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800196c:	f043 0304 	orr.w	r3, r3, #4
 8001970:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001972:	6a3b      	ldr	r3, [r7, #32]
 8001974:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001978:	2b00      	cmp	r3, #0
 800197a:	d03d      	beq.n	80019f8 <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001982:	2b00      	cmp	r3, #0
 8001984:	d038      	beq.n	80019f8 <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800198c:	2b30      	cmp	r3, #48	; 0x30
 800198e:	d017      	beq.n	80019c0 <HAL_CAN_IRQHandler+0x302>
 8001990:	2b30      	cmp	r3, #48	; 0x30
 8001992:	d804      	bhi.n	800199e <HAL_CAN_IRQHandler+0x2e0>
 8001994:	2b10      	cmp	r3, #16
 8001996:	d009      	beq.n	80019ac <HAL_CAN_IRQHandler+0x2ee>
 8001998:	2b20      	cmp	r3, #32
 800199a:	d00c      	beq.n	80019b6 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800199c:	e024      	b.n	80019e8 <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 800199e:	2b50      	cmp	r3, #80	; 0x50
 80019a0:	d018      	beq.n	80019d4 <HAL_CAN_IRQHandler+0x316>
 80019a2:	2b60      	cmp	r3, #96	; 0x60
 80019a4:	d01b      	beq.n	80019de <HAL_CAN_IRQHandler+0x320>
 80019a6:	2b40      	cmp	r3, #64	; 0x40
 80019a8:	d00f      	beq.n	80019ca <HAL_CAN_IRQHandler+0x30c>
            break;
 80019aa:	e01d      	b.n	80019e8 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 80019ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ae:	f043 0308 	orr.w	r3, r3, #8
 80019b2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80019b4:	e018      	b.n	80019e8 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 80019b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b8:	f043 0310 	orr.w	r3, r3, #16
 80019bc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80019be:	e013      	b.n	80019e8 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 80019c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c2:	f043 0320 	orr.w	r3, r3, #32
 80019c6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80019c8:	e00e      	b.n	80019e8 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 80019ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80019d0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80019d2:	e009      	b.n	80019e8 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 80019d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019da:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80019dc:	e004      	b.n	80019e8 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 80019de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019e4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80019e6:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	699a      	ldr	r2, [r3, #24]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80019f6:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	2204      	movs	r2, #4
 80019fe:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d008      	beq.n	8001a18 <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a0c:	431a      	orrs	r2, r3
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001a12:	6878      	ldr	r0, [r7, #4]
 8001a14:	f000 f87c 	bl	8001b10 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001a18:	bf00      	nop
 8001a1a:	3728      	adds	r7, #40	; 0x28
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}

08001a20 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b083      	sub	sp, #12
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001a28:	bf00      	nop
 8001a2a:	370c      	adds	r7, #12
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a32:	4770      	bx	lr

08001a34 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b083      	sub	sp, #12
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001a3c:	bf00      	nop
 8001a3e:	370c      	adds	r7, #12
 8001a40:	46bd      	mov	sp, r7
 8001a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a46:	4770      	bx	lr

08001a48 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b083      	sub	sp, #12
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001a50:	bf00      	nop
 8001a52:	370c      	adds	r7, #12
 8001a54:	46bd      	mov	sp, r7
 8001a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5a:	4770      	bx	lr

08001a5c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b083      	sub	sp, #12
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001a64:	bf00      	nop
 8001a66:	370c      	adds	r7, #12
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6e:	4770      	bx	lr

08001a70 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b083      	sub	sp, #12
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001a78:	bf00      	nop
 8001a7a:	370c      	adds	r7, #12
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr

08001a84 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b083      	sub	sp, #12
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001a8c:	bf00      	nop
 8001a8e:	370c      	adds	r7, #12
 8001a90:	46bd      	mov	sp, r7
 8001a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a96:	4770      	bx	lr

08001a98 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b083      	sub	sp, #12
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8001aa0:	bf00      	nop
 8001aa2:	370c      	adds	r7, #12
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aaa:	4770      	bx	lr

08001aac <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b083      	sub	sp, #12
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001ab4:	bf00      	nop
 8001ab6:	370c      	adds	r7, #12
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr

08001ac0 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b083      	sub	sp, #12
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001ac8:	bf00      	nop
 8001aca:	370c      	adds	r7, #12
 8001acc:	46bd      	mov	sp, r7
 8001ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad2:	4770      	bx	lr

08001ad4 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b083      	sub	sp, #12
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001adc:	bf00      	nop
 8001ade:	370c      	adds	r7, #12
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae6:	4770      	bx	lr

08001ae8 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b083      	sub	sp, #12
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001af0:	bf00      	nop
 8001af2:	370c      	adds	r7, #12
 8001af4:	46bd      	mov	sp, r7
 8001af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afa:	4770      	bx	lr

08001afc <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b083      	sub	sp, #12
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001b04:	bf00      	nop
 8001b06:	370c      	adds	r7, #12
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0e:	4770      	bx	lr

08001b10 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b083      	sub	sp, #12
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001b18:	bf00      	nop
 8001b1a:	370c      	adds	r7, #12
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b22:	4770      	bx	lr

08001b24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b085      	sub	sp, #20
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	f003 0307 	and.w	r3, r3, #7
 8001b32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b34:	4b0c      	ldr	r3, [pc, #48]	; (8001b68 <__NVIC_SetPriorityGrouping+0x44>)
 8001b36:	68db      	ldr	r3, [r3, #12]
 8001b38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b3a:	68ba      	ldr	r2, [r7, #8]
 8001b3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b40:	4013      	ands	r3, r2
 8001b42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b48:	68bb      	ldr	r3, [r7, #8]
 8001b4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b56:	4a04      	ldr	r2, [pc, #16]	; (8001b68 <__NVIC_SetPriorityGrouping+0x44>)
 8001b58:	68bb      	ldr	r3, [r7, #8]
 8001b5a:	60d3      	str	r3, [r2, #12]
}
 8001b5c:	bf00      	nop
 8001b5e:	3714      	adds	r7, #20
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr
 8001b68:	e000ed00 	.word	0xe000ed00

08001b6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b70:	4b04      	ldr	r3, [pc, #16]	; (8001b84 <__NVIC_GetPriorityGrouping+0x18>)
 8001b72:	68db      	ldr	r3, [r3, #12]
 8001b74:	0a1b      	lsrs	r3, r3, #8
 8001b76:	f003 0307 	and.w	r3, r3, #7
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b82:	4770      	bx	lr
 8001b84:	e000ed00 	.word	0xe000ed00

08001b88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b083      	sub	sp, #12
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	4603      	mov	r3, r0
 8001b90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	db0b      	blt.n	8001bb2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b9a:	79fb      	ldrb	r3, [r7, #7]
 8001b9c:	f003 021f 	and.w	r2, r3, #31
 8001ba0:	4907      	ldr	r1, [pc, #28]	; (8001bc0 <__NVIC_EnableIRQ+0x38>)
 8001ba2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ba6:	095b      	lsrs	r3, r3, #5
 8001ba8:	2001      	movs	r0, #1
 8001baa:	fa00 f202 	lsl.w	r2, r0, r2
 8001bae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001bb2:	bf00      	nop
 8001bb4:	370c      	adds	r7, #12
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr
 8001bbe:	bf00      	nop
 8001bc0:	e000e100 	.word	0xe000e100

08001bc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b083      	sub	sp, #12
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	4603      	mov	r3, r0
 8001bcc:	6039      	str	r1, [r7, #0]
 8001bce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	db0a      	blt.n	8001bee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	b2da      	uxtb	r2, r3
 8001bdc:	490c      	ldr	r1, [pc, #48]	; (8001c10 <__NVIC_SetPriority+0x4c>)
 8001bde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001be2:	0112      	lsls	r2, r2, #4
 8001be4:	b2d2      	uxtb	r2, r2
 8001be6:	440b      	add	r3, r1
 8001be8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bec:	e00a      	b.n	8001c04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	b2da      	uxtb	r2, r3
 8001bf2:	4908      	ldr	r1, [pc, #32]	; (8001c14 <__NVIC_SetPriority+0x50>)
 8001bf4:	79fb      	ldrb	r3, [r7, #7]
 8001bf6:	f003 030f 	and.w	r3, r3, #15
 8001bfa:	3b04      	subs	r3, #4
 8001bfc:	0112      	lsls	r2, r2, #4
 8001bfe:	b2d2      	uxtb	r2, r2
 8001c00:	440b      	add	r3, r1
 8001c02:	761a      	strb	r2, [r3, #24]
}
 8001c04:	bf00      	nop
 8001c06:	370c      	adds	r7, #12
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0e:	4770      	bx	lr
 8001c10:	e000e100 	.word	0xe000e100
 8001c14:	e000ed00 	.word	0xe000ed00

08001c18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b089      	sub	sp, #36	; 0x24
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	60f8      	str	r0, [r7, #12]
 8001c20:	60b9      	str	r1, [r7, #8]
 8001c22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	f003 0307 	and.w	r3, r3, #7
 8001c2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c2c:	69fb      	ldr	r3, [r7, #28]
 8001c2e:	f1c3 0307 	rsb	r3, r3, #7
 8001c32:	2b04      	cmp	r3, #4
 8001c34:	bf28      	it	cs
 8001c36:	2304      	movcs	r3, #4
 8001c38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c3a:	69fb      	ldr	r3, [r7, #28]
 8001c3c:	3304      	adds	r3, #4
 8001c3e:	2b06      	cmp	r3, #6
 8001c40:	d902      	bls.n	8001c48 <NVIC_EncodePriority+0x30>
 8001c42:	69fb      	ldr	r3, [r7, #28]
 8001c44:	3b03      	subs	r3, #3
 8001c46:	e000      	b.n	8001c4a <NVIC_EncodePriority+0x32>
 8001c48:	2300      	movs	r3, #0
 8001c4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c4c:	f04f 32ff 	mov.w	r2, #4294967295
 8001c50:	69bb      	ldr	r3, [r7, #24]
 8001c52:	fa02 f303 	lsl.w	r3, r2, r3
 8001c56:	43da      	mvns	r2, r3
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	401a      	ands	r2, r3
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c60:	f04f 31ff 	mov.w	r1, #4294967295
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	fa01 f303 	lsl.w	r3, r1, r3
 8001c6a:	43d9      	mvns	r1, r3
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c70:	4313      	orrs	r3, r2
         );
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	3724      	adds	r7, #36	; 0x24
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr
	...

08001c80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b082      	sub	sp, #8
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	3b01      	subs	r3, #1
 8001c8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c90:	d301      	bcc.n	8001c96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c92:	2301      	movs	r3, #1
 8001c94:	e00f      	b.n	8001cb6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c96:	4a0a      	ldr	r2, [pc, #40]	; (8001cc0 <SysTick_Config+0x40>)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	3b01      	subs	r3, #1
 8001c9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c9e:	210f      	movs	r1, #15
 8001ca0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ca4:	f7ff ff8e 	bl	8001bc4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ca8:	4b05      	ldr	r3, [pc, #20]	; (8001cc0 <SysTick_Config+0x40>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cae:	4b04      	ldr	r3, [pc, #16]	; (8001cc0 <SysTick_Config+0x40>)
 8001cb0:	2207      	movs	r2, #7
 8001cb2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cb4:	2300      	movs	r3, #0
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	3708      	adds	r7, #8
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	e000e010 	.word	0xe000e010

08001cc4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b082      	sub	sp, #8
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ccc:	6878      	ldr	r0, [r7, #4]
 8001cce:	f7ff ff29 	bl	8001b24 <__NVIC_SetPriorityGrouping>
}
 8001cd2:	bf00      	nop
 8001cd4:	3708      	adds	r7, #8
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}

08001cda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cda:	b580      	push	{r7, lr}
 8001cdc:	b086      	sub	sp, #24
 8001cde:	af00      	add	r7, sp, #0
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	60b9      	str	r1, [r7, #8]
 8001ce4:	607a      	str	r2, [r7, #4]
 8001ce6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cec:	f7ff ff3e 	bl	8001b6c <__NVIC_GetPriorityGrouping>
 8001cf0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cf2:	687a      	ldr	r2, [r7, #4]
 8001cf4:	68b9      	ldr	r1, [r7, #8]
 8001cf6:	6978      	ldr	r0, [r7, #20]
 8001cf8:	f7ff ff8e 	bl	8001c18 <NVIC_EncodePriority>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d02:	4611      	mov	r1, r2
 8001d04:	4618      	mov	r0, r3
 8001d06:	f7ff ff5d 	bl	8001bc4 <__NVIC_SetPriority>
}
 8001d0a:	bf00      	nop
 8001d0c:	3718      	adds	r7, #24
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}

08001d12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d12:	b580      	push	{r7, lr}
 8001d14:	b082      	sub	sp, #8
 8001d16:	af00      	add	r7, sp, #0
 8001d18:	4603      	mov	r3, r0
 8001d1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d20:	4618      	mov	r0, r3
 8001d22:	f7ff ff31 	bl	8001b88 <__NVIC_EnableIRQ>
}
 8001d26:	bf00      	nop
 8001d28:	3708      	adds	r7, #8
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}

08001d2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d2e:	b580      	push	{r7, lr}
 8001d30:	b082      	sub	sp, #8
 8001d32:	af00      	add	r7, sp, #0
 8001d34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d36:	6878      	ldr	r0, [r7, #4]
 8001d38:	f7ff ffa2 	bl	8001c80 <SysTick_Config>
 8001d3c:	4603      	mov	r3, r0
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	3708      	adds	r7, #8
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
	...

08001d48 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b083      	sub	sp, #12
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2b04      	cmp	r3, #4
 8001d54:	d106      	bne.n	8001d64 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8001d56:	4b09      	ldr	r3, [pc, #36]	; (8001d7c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4a08      	ldr	r2, [pc, #32]	; (8001d7c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001d5c:	f043 0304 	orr.w	r3, r3, #4
 8001d60:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8001d62:	e005      	b.n	8001d70 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8001d64:	4b05      	ldr	r3, [pc, #20]	; (8001d7c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a04      	ldr	r2, [pc, #16]	; (8001d7c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001d6a:	f023 0304 	bic.w	r3, r3, #4
 8001d6e:	6013      	str	r3, [r2, #0]
}
 8001d70:	bf00      	nop
 8001d72:	370c      	adds	r7, #12
 8001d74:	46bd      	mov	sp, r7
 8001d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7a:	4770      	bx	lr
 8001d7c:	e000e010 	.word	0xe000e010

08001d80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b089      	sub	sp, #36	; 0x24
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
 8001d88:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d92:	2300      	movs	r3, #0
 8001d94:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d96:	2300      	movs	r3, #0
 8001d98:	61fb      	str	r3, [r7, #28]
 8001d9a:	e177      	b.n	800208c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	69fb      	ldr	r3, [r7, #28]
 8001da0:	fa02 f303 	lsl.w	r3, r2, r3
 8001da4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	697a      	ldr	r2, [r7, #20]
 8001dac:	4013      	ands	r3, r2
 8001dae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001db0:	693a      	ldr	r2, [r7, #16]
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	429a      	cmp	r2, r3
 8001db6:	f040 8166 	bne.w	8002086 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	2b01      	cmp	r3, #1
 8001dc0:	d00b      	beq.n	8001dda <HAL_GPIO_Init+0x5a>
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	2b02      	cmp	r3, #2
 8001dc8:	d007      	beq.n	8001dda <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001dce:	2b11      	cmp	r3, #17
 8001dd0:	d003      	beq.n	8001dda <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	2b12      	cmp	r3, #18
 8001dd8:	d130      	bne.n	8001e3c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	689b      	ldr	r3, [r3, #8]
 8001dde:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001de0:	69fb      	ldr	r3, [r7, #28]
 8001de2:	005b      	lsls	r3, r3, #1
 8001de4:	2203      	movs	r2, #3
 8001de6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dea:	43db      	mvns	r3, r3
 8001dec:	69ba      	ldr	r2, [r7, #24]
 8001dee:	4013      	ands	r3, r2
 8001df0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	68da      	ldr	r2, [r3, #12]
 8001df6:	69fb      	ldr	r3, [r7, #28]
 8001df8:	005b      	lsls	r3, r3, #1
 8001dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfe:	69ba      	ldr	r2, [r7, #24]
 8001e00:	4313      	orrs	r3, r2
 8001e02:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	69ba      	ldr	r2, [r7, #24]
 8001e08:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e10:	2201      	movs	r2, #1
 8001e12:	69fb      	ldr	r3, [r7, #28]
 8001e14:	fa02 f303 	lsl.w	r3, r2, r3
 8001e18:	43db      	mvns	r3, r3
 8001e1a:	69ba      	ldr	r2, [r7, #24]
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	091b      	lsrs	r3, r3, #4
 8001e26:	f003 0201 	and.w	r2, r3, #1
 8001e2a:	69fb      	ldr	r3, [r7, #28]
 8001e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e30:	69ba      	ldr	r2, [r7, #24]
 8001e32:	4313      	orrs	r3, r2
 8001e34:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	69ba      	ldr	r2, [r7, #24]
 8001e3a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	68db      	ldr	r3, [r3, #12]
 8001e40:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001e42:	69fb      	ldr	r3, [r7, #28]
 8001e44:	005b      	lsls	r3, r3, #1
 8001e46:	2203      	movs	r2, #3
 8001e48:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4c:	43db      	mvns	r3, r3
 8001e4e:	69ba      	ldr	r2, [r7, #24]
 8001e50:	4013      	ands	r3, r2
 8001e52:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	689a      	ldr	r2, [r3, #8]
 8001e58:	69fb      	ldr	r3, [r7, #28]
 8001e5a:	005b      	lsls	r3, r3, #1
 8001e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e60:	69ba      	ldr	r2, [r7, #24]
 8001e62:	4313      	orrs	r3, r2
 8001e64:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	69ba      	ldr	r2, [r7, #24]
 8001e6a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	2b02      	cmp	r3, #2
 8001e72:	d003      	beq.n	8001e7c <HAL_GPIO_Init+0xfc>
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	2b12      	cmp	r3, #18
 8001e7a:	d123      	bne.n	8001ec4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e7c:	69fb      	ldr	r3, [r7, #28]
 8001e7e:	08da      	lsrs	r2, r3, #3
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	3208      	adds	r2, #8
 8001e84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e88:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e8a:	69fb      	ldr	r3, [r7, #28]
 8001e8c:	f003 0307 	and.w	r3, r3, #7
 8001e90:	009b      	lsls	r3, r3, #2
 8001e92:	220f      	movs	r2, #15
 8001e94:	fa02 f303 	lsl.w	r3, r2, r3
 8001e98:	43db      	mvns	r3, r3
 8001e9a:	69ba      	ldr	r2, [r7, #24]
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	691a      	ldr	r2, [r3, #16]
 8001ea4:	69fb      	ldr	r3, [r7, #28]
 8001ea6:	f003 0307 	and.w	r3, r3, #7
 8001eaa:	009b      	lsls	r3, r3, #2
 8001eac:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb0:	69ba      	ldr	r2, [r7, #24]
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001eb6:	69fb      	ldr	r3, [r7, #28]
 8001eb8:	08da      	lsrs	r2, r3, #3
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	3208      	adds	r2, #8
 8001ebe:	69b9      	ldr	r1, [r7, #24]
 8001ec0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001eca:	69fb      	ldr	r3, [r7, #28]
 8001ecc:	005b      	lsls	r3, r3, #1
 8001ece:	2203      	movs	r2, #3
 8001ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed4:	43db      	mvns	r3, r3
 8001ed6:	69ba      	ldr	r2, [r7, #24]
 8001ed8:	4013      	ands	r3, r2
 8001eda:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	f003 0203 	and.w	r2, r3, #3
 8001ee4:	69fb      	ldr	r3, [r7, #28]
 8001ee6:	005b      	lsls	r3, r3, #1
 8001ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8001eec:	69ba      	ldr	r2, [r7, #24]
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	69ba      	ldr	r2, [r7, #24]
 8001ef6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	f000 80c0 	beq.w	8002086 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f06:	2300      	movs	r3, #0
 8001f08:	60fb      	str	r3, [r7, #12]
 8001f0a:	4b65      	ldr	r3, [pc, #404]	; (80020a0 <HAL_GPIO_Init+0x320>)
 8001f0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f0e:	4a64      	ldr	r2, [pc, #400]	; (80020a0 <HAL_GPIO_Init+0x320>)
 8001f10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f14:	6453      	str	r3, [r2, #68]	; 0x44
 8001f16:	4b62      	ldr	r3, [pc, #392]	; (80020a0 <HAL_GPIO_Init+0x320>)
 8001f18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f1e:	60fb      	str	r3, [r7, #12]
 8001f20:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f22:	4a60      	ldr	r2, [pc, #384]	; (80020a4 <HAL_GPIO_Init+0x324>)
 8001f24:	69fb      	ldr	r3, [r7, #28]
 8001f26:	089b      	lsrs	r3, r3, #2
 8001f28:	3302      	adds	r3, #2
 8001f2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001f30:	69fb      	ldr	r3, [r7, #28]
 8001f32:	f003 0303 	and.w	r3, r3, #3
 8001f36:	009b      	lsls	r3, r3, #2
 8001f38:	220f      	movs	r2, #15
 8001f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3e:	43db      	mvns	r3, r3
 8001f40:	69ba      	ldr	r2, [r7, #24]
 8001f42:	4013      	ands	r3, r2
 8001f44:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	4a57      	ldr	r2, [pc, #348]	; (80020a8 <HAL_GPIO_Init+0x328>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d037      	beq.n	8001fbe <HAL_GPIO_Init+0x23e>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	4a56      	ldr	r2, [pc, #344]	; (80020ac <HAL_GPIO_Init+0x32c>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d031      	beq.n	8001fba <HAL_GPIO_Init+0x23a>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	4a55      	ldr	r2, [pc, #340]	; (80020b0 <HAL_GPIO_Init+0x330>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d02b      	beq.n	8001fb6 <HAL_GPIO_Init+0x236>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	4a54      	ldr	r2, [pc, #336]	; (80020b4 <HAL_GPIO_Init+0x334>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d025      	beq.n	8001fb2 <HAL_GPIO_Init+0x232>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	4a53      	ldr	r2, [pc, #332]	; (80020b8 <HAL_GPIO_Init+0x338>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d01f      	beq.n	8001fae <HAL_GPIO_Init+0x22e>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	4a52      	ldr	r2, [pc, #328]	; (80020bc <HAL_GPIO_Init+0x33c>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d019      	beq.n	8001faa <HAL_GPIO_Init+0x22a>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	4a51      	ldr	r2, [pc, #324]	; (80020c0 <HAL_GPIO_Init+0x340>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d013      	beq.n	8001fa6 <HAL_GPIO_Init+0x226>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	4a50      	ldr	r2, [pc, #320]	; (80020c4 <HAL_GPIO_Init+0x344>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d00d      	beq.n	8001fa2 <HAL_GPIO_Init+0x222>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	4a4f      	ldr	r2, [pc, #316]	; (80020c8 <HAL_GPIO_Init+0x348>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d007      	beq.n	8001f9e <HAL_GPIO_Init+0x21e>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	4a4e      	ldr	r2, [pc, #312]	; (80020cc <HAL_GPIO_Init+0x34c>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d101      	bne.n	8001f9a <HAL_GPIO_Init+0x21a>
 8001f96:	2309      	movs	r3, #9
 8001f98:	e012      	b.n	8001fc0 <HAL_GPIO_Init+0x240>
 8001f9a:	230a      	movs	r3, #10
 8001f9c:	e010      	b.n	8001fc0 <HAL_GPIO_Init+0x240>
 8001f9e:	2308      	movs	r3, #8
 8001fa0:	e00e      	b.n	8001fc0 <HAL_GPIO_Init+0x240>
 8001fa2:	2307      	movs	r3, #7
 8001fa4:	e00c      	b.n	8001fc0 <HAL_GPIO_Init+0x240>
 8001fa6:	2306      	movs	r3, #6
 8001fa8:	e00a      	b.n	8001fc0 <HAL_GPIO_Init+0x240>
 8001faa:	2305      	movs	r3, #5
 8001fac:	e008      	b.n	8001fc0 <HAL_GPIO_Init+0x240>
 8001fae:	2304      	movs	r3, #4
 8001fb0:	e006      	b.n	8001fc0 <HAL_GPIO_Init+0x240>
 8001fb2:	2303      	movs	r3, #3
 8001fb4:	e004      	b.n	8001fc0 <HAL_GPIO_Init+0x240>
 8001fb6:	2302      	movs	r3, #2
 8001fb8:	e002      	b.n	8001fc0 <HAL_GPIO_Init+0x240>
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e000      	b.n	8001fc0 <HAL_GPIO_Init+0x240>
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	69fa      	ldr	r2, [r7, #28]
 8001fc2:	f002 0203 	and.w	r2, r2, #3
 8001fc6:	0092      	lsls	r2, r2, #2
 8001fc8:	4093      	lsls	r3, r2
 8001fca:	69ba      	ldr	r2, [r7, #24]
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001fd0:	4934      	ldr	r1, [pc, #208]	; (80020a4 <HAL_GPIO_Init+0x324>)
 8001fd2:	69fb      	ldr	r3, [r7, #28]
 8001fd4:	089b      	lsrs	r3, r3, #2
 8001fd6:	3302      	adds	r3, #2
 8001fd8:	69ba      	ldr	r2, [r7, #24]
 8001fda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001fde:	4b3c      	ldr	r3, [pc, #240]	; (80020d0 <HAL_GPIO_Init+0x350>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fe4:	693b      	ldr	r3, [r7, #16]
 8001fe6:	43db      	mvns	r3, r3
 8001fe8:	69ba      	ldr	r2, [r7, #24]
 8001fea:	4013      	ands	r3, r2
 8001fec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d003      	beq.n	8002002 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001ffa:	69ba      	ldr	r2, [r7, #24]
 8001ffc:	693b      	ldr	r3, [r7, #16]
 8001ffe:	4313      	orrs	r3, r2
 8002000:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002002:	4a33      	ldr	r2, [pc, #204]	; (80020d0 <HAL_GPIO_Init+0x350>)
 8002004:	69bb      	ldr	r3, [r7, #24]
 8002006:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002008:	4b31      	ldr	r3, [pc, #196]	; (80020d0 <HAL_GPIO_Init+0x350>)
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800200e:	693b      	ldr	r3, [r7, #16]
 8002010:	43db      	mvns	r3, r3
 8002012:	69ba      	ldr	r2, [r7, #24]
 8002014:	4013      	ands	r3, r2
 8002016:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002020:	2b00      	cmp	r3, #0
 8002022:	d003      	beq.n	800202c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002024:	69ba      	ldr	r2, [r7, #24]
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	4313      	orrs	r3, r2
 800202a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800202c:	4a28      	ldr	r2, [pc, #160]	; (80020d0 <HAL_GPIO_Init+0x350>)
 800202e:	69bb      	ldr	r3, [r7, #24]
 8002030:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002032:	4b27      	ldr	r3, [pc, #156]	; (80020d0 <HAL_GPIO_Init+0x350>)
 8002034:	689b      	ldr	r3, [r3, #8]
 8002036:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002038:	693b      	ldr	r3, [r7, #16]
 800203a:	43db      	mvns	r3, r3
 800203c:	69ba      	ldr	r2, [r7, #24]
 800203e:	4013      	ands	r3, r2
 8002040:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800204a:	2b00      	cmp	r3, #0
 800204c:	d003      	beq.n	8002056 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800204e:	69ba      	ldr	r2, [r7, #24]
 8002050:	693b      	ldr	r3, [r7, #16]
 8002052:	4313      	orrs	r3, r2
 8002054:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002056:	4a1e      	ldr	r2, [pc, #120]	; (80020d0 <HAL_GPIO_Init+0x350>)
 8002058:	69bb      	ldr	r3, [r7, #24]
 800205a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800205c:	4b1c      	ldr	r3, [pc, #112]	; (80020d0 <HAL_GPIO_Init+0x350>)
 800205e:	68db      	ldr	r3, [r3, #12]
 8002060:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	43db      	mvns	r3, r3
 8002066:	69ba      	ldr	r2, [r7, #24]
 8002068:	4013      	ands	r3, r2
 800206a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002074:	2b00      	cmp	r3, #0
 8002076:	d003      	beq.n	8002080 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002078:	69ba      	ldr	r2, [r7, #24]
 800207a:	693b      	ldr	r3, [r7, #16]
 800207c:	4313      	orrs	r3, r2
 800207e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002080:	4a13      	ldr	r2, [pc, #76]	; (80020d0 <HAL_GPIO_Init+0x350>)
 8002082:	69bb      	ldr	r3, [r7, #24]
 8002084:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002086:	69fb      	ldr	r3, [r7, #28]
 8002088:	3301      	adds	r3, #1
 800208a:	61fb      	str	r3, [r7, #28]
 800208c:	69fb      	ldr	r3, [r7, #28]
 800208e:	2b0f      	cmp	r3, #15
 8002090:	f67f ae84 	bls.w	8001d9c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002094:	bf00      	nop
 8002096:	3724      	adds	r7, #36	; 0x24
 8002098:	46bd      	mov	sp, r7
 800209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209e:	4770      	bx	lr
 80020a0:	40023800 	.word	0x40023800
 80020a4:	40013800 	.word	0x40013800
 80020a8:	40020000 	.word	0x40020000
 80020ac:	40020400 	.word	0x40020400
 80020b0:	40020800 	.word	0x40020800
 80020b4:	40020c00 	.word	0x40020c00
 80020b8:	40021000 	.word	0x40021000
 80020bc:	40021400 	.word	0x40021400
 80020c0:	40021800 	.word	0x40021800
 80020c4:	40021c00 	.word	0x40021c00
 80020c8:	40022000 	.word	0x40022000
 80020cc:	40022400 	.word	0x40022400
 80020d0:	40013c00 	.word	0x40013c00

080020d4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b085      	sub	sp, #20
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
 80020dc:	460b      	mov	r3, r1
 80020de:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	691a      	ldr	r2, [r3, #16]
 80020e4:	887b      	ldrh	r3, [r7, #2]
 80020e6:	4013      	ands	r3, r2
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d002      	beq.n	80020f2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80020ec:	2301      	movs	r3, #1
 80020ee:	73fb      	strb	r3, [r7, #15]
 80020f0:	e001      	b.n	80020f6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80020f2:	2300      	movs	r3, #0
 80020f4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80020f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	3714      	adds	r7, #20
 80020fc:	46bd      	mov	sp, r7
 80020fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002102:	4770      	bx	lr

08002104 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002104:	b480      	push	{r7}
 8002106:	b083      	sub	sp, #12
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
 800210c:	460b      	mov	r3, r1
 800210e:	807b      	strh	r3, [r7, #2]
 8002110:	4613      	mov	r3, r2
 8002112:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002114:	787b      	ldrb	r3, [r7, #1]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d003      	beq.n	8002122 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800211a:	887a      	ldrh	r2, [r7, #2]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002120:	e003      	b.n	800212a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002122:	887b      	ldrh	r3, [r7, #2]
 8002124:	041a      	lsls	r2, r3, #16
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	619a      	str	r2, [r3, #24]
}
 800212a:	bf00      	nop
 800212c:	370c      	adds	r7, #12
 800212e:	46bd      	mov	sp, r7
 8002130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002134:	4770      	bx	lr

08002136 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002136:	b480      	push	{r7}
 8002138:	b083      	sub	sp, #12
 800213a:	af00      	add	r7, sp, #0
 800213c:	6078      	str	r0, [r7, #4]
 800213e:	460b      	mov	r3, r1
 8002140:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	695a      	ldr	r2, [r3, #20]
 8002146:	887b      	ldrh	r3, [r7, #2]
 8002148:	401a      	ands	r2, r3
 800214a:	887b      	ldrh	r3, [r7, #2]
 800214c:	429a      	cmp	r2, r3
 800214e:	d104      	bne.n	800215a <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002150:	887b      	ldrh	r3, [r7, #2]
 8002152:	041a      	lsls	r2, r3, #16
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8002158:	e002      	b.n	8002160 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800215a:	887a      	ldrh	r2, [r7, #2]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	619a      	str	r2, [r3, #24]
}
 8002160:	bf00      	nop
 8002162:	370c      	adds	r7, #12
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr

0800216c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b082      	sub	sp, #8
 8002170:	af00      	add	r7, sp, #0
 8002172:	4603      	mov	r3, r0
 8002174:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002176:	4b08      	ldr	r3, [pc, #32]	; (8002198 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002178:	695a      	ldr	r2, [r3, #20]
 800217a:	88fb      	ldrh	r3, [r7, #6]
 800217c:	4013      	ands	r3, r2
 800217e:	2b00      	cmp	r3, #0
 8002180:	d006      	beq.n	8002190 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002182:	4a05      	ldr	r2, [pc, #20]	; (8002198 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002184:	88fb      	ldrh	r3, [r7, #6]
 8002186:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002188:	88fb      	ldrh	r3, [r7, #6]
 800218a:	4618      	mov	r0, r3
 800218c:	f000 f806 	bl	800219c <HAL_GPIO_EXTI_Callback>
  }
}
 8002190:	bf00      	nop
 8002192:	3708      	adds	r7, #8
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}
 8002198:	40013c00 	.word	0x40013c00

0800219c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800219c:	b480      	push	{r7}
 800219e:	b083      	sub	sp, #12
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	4603      	mov	r3, r0
 80021a4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80021a6:	bf00      	nop
 80021a8:	370c      	adds	r7, #12
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr
	...

080021b4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b086      	sub	sp, #24
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d101      	bne.n	80021c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	e25b      	b.n	800267e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f003 0301 	and.w	r3, r3, #1
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d075      	beq.n	80022be <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80021d2:	4ba3      	ldr	r3, [pc, #652]	; (8002460 <HAL_RCC_OscConfig+0x2ac>)
 80021d4:	689b      	ldr	r3, [r3, #8]
 80021d6:	f003 030c 	and.w	r3, r3, #12
 80021da:	2b04      	cmp	r3, #4
 80021dc:	d00c      	beq.n	80021f8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021de:	4ba0      	ldr	r3, [pc, #640]	; (8002460 <HAL_RCC_OscConfig+0x2ac>)
 80021e0:	689b      	ldr	r3, [r3, #8]
 80021e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80021e6:	2b08      	cmp	r3, #8
 80021e8:	d112      	bne.n	8002210 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021ea:	4b9d      	ldr	r3, [pc, #628]	; (8002460 <HAL_RCC_OscConfig+0x2ac>)
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80021f6:	d10b      	bne.n	8002210 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021f8:	4b99      	ldr	r3, [pc, #612]	; (8002460 <HAL_RCC_OscConfig+0x2ac>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002200:	2b00      	cmp	r3, #0
 8002202:	d05b      	beq.n	80022bc <HAL_RCC_OscConfig+0x108>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d157      	bne.n	80022bc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800220c:	2301      	movs	r3, #1
 800220e:	e236      	b.n	800267e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002218:	d106      	bne.n	8002228 <HAL_RCC_OscConfig+0x74>
 800221a:	4b91      	ldr	r3, [pc, #580]	; (8002460 <HAL_RCC_OscConfig+0x2ac>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a90      	ldr	r2, [pc, #576]	; (8002460 <HAL_RCC_OscConfig+0x2ac>)
 8002220:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002224:	6013      	str	r3, [r2, #0]
 8002226:	e01d      	b.n	8002264 <HAL_RCC_OscConfig+0xb0>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002230:	d10c      	bne.n	800224c <HAL_RCC_OscConfig+0x98>
 8002232:	4b8b      	ldr	r3, [pc, #556]	; (8002460 <HAL_RCC_OscConfig+0x2ac>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a8a      	ldr	r2, [pc, #552]	; (8002460 <HAL_RCC_OscConfig+0x2ac>)
 8002238:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800223c:	6013      	str	r3, [r2, #0]
 800223e:	4b88      	ldr	r3, [pc, #544]	; (8002460 <HAL_RCC_OscConfig+0x2ac>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a87      	ldr	r2, [pc, #540]	; (8002460 <HAL_RCC_OscConfig+0x2ac>)
 8002244:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002248:	6013      	str	r3, [r2, #0]
 800224a:	e00b      	b.n	8002264 <HAL_RCC_OscConfig+0xb0>
 800224c:	4b84      	ldr	r3, [pc, #528]	; (8002460 <HAL_RCC_OscConfig+0x2ac>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a83      	ldr	r2, [pc, #524]	; (8002460 <HAL_RCC_OscConfig+0x2ac>)
 8002252:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002256:	6013      	str	r3, [r2, #0]
 8002258:	4b81      	ldr	r3, [pc, #516]	; (8002460 <HAL_RCC_OscConfig+0x2ac>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a80      	ldr	r2, [pc, #512]	; (8002460 <HAL_RCC_OscConfig+0x2ac>)
 800225e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002262:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d013      	beq.n	8002294 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800226c:	f7fe fdc2 	bl	8000df4 <HAL_GetTick>
 8002270:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002272:	e008      	b.n	8002286 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002274:	f7fe fdbe 	bl	8000df4 <HAL_GetTick>
 8002278:	4602      	mov	r2, r0
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	1ad3      	subs	r3, r2, r3
 800227e:	2b64      	cmp	r3, #100	; 0x64
 8002280:	d901      	bls.n	8002286 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002282:	2303      	movs	r3, #3
 8002284:	e1fb      	b.n	800267e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002286:	4b76      	ldr	r3, [pc, #472]	; (8002460 <HAL_RCC_OscConfig+0x2ac>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800228e:	2b00      	cmp	r3, #0
 8002290:	d0f0      	beq.n	8002274 <HAL_RCC_OscConfig+0xc0>
 8002292:	e014      	b.n	80022be <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002294:	f7fe fdae 	bl	8000df4 <HAL_GetTick>
 8002298:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800229a:	e008      	b.n	80022ae <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800229c:	f7fe fdaa 	bl	8000df4 <HAL_GetTick>
 80022a0:	4602      	mov	r2, r0
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	1ad3      	subs	r3, r2, r3
 80022a6:	2b64      	cmp	r3, #100	; 0x64
 80022a8:	d901      	bls.n	80022ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80022aa:	2303      	movs	r3, #3
 80022ac:	e1e7      	b.n	800267e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022ae:	4b6c      	ldr	r3, [pc, #432]	; (8002460 <HAL_RCC_OscConfig+0x2ac>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d1f0      	bne.n	800229c <HAL_RCC_OscConfig+0xe8>
 80022ba:	e000      	b.n	80022be <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 0302 	and.w	r3, r3, #2
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d063      	beq.n	8002392 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80022ca:	4b65      	ldr	r3, [pc, #404]	; (8002460 <HAL_RCC_OscConfig+0x2ac>)
 80022cc:	689b      	ldr	r3, [r3, #8]
 80022ce:	f003 030c 	and.w	r3, r3, #12
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d00b      	beq.n	80022ee <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80022d6:	4b62      	ldr	r3, [pc, #392]	; (8002460 <HAL_RCC_OscConfig+0x2ac>)
 80022d8:	689b      	ldr	r3, [r3, #8]
 80022da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80022de:	2b08      	cmp	r3, #8
 80022e0:	d11c      	bne.n	800231c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80022e2:	4b5f      	ldr	r3, [pc, #380]	; (8002460 <HAL_RCC_OscConfig+0x2ac>)
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d116      	bne.n	800231c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022ee:	4b5c      	ldr	r3, [pc, #368]	; (8002460 <HAL_RCC_OscConfig+0x2ac>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f003 0302 	and.w	r3, r3, #2
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d005      	beq.n	8002306 <HAL_RCC_OscConfig+0x152>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	68db      	ldr	r3, [r3, #12]
 80022fe:	2b01      	cmp	r3, #1
 8002300:	d001      	beq.n	8002306 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	e1bb      	b.n	800267e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002306:	4b56      	ldr	r3, [pc, #344]	; (8002460 <HAL_RCC_OscConfig+0x2ac>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	691b      	ldr	r3, [r3, #16]
 8002312:	00db      	lsls	r3, r3, #3
 8002314:	4952      	ldr	r1, [pc, #328]	; (8002460 <HAL_RCC_OscConfig+0x2ac>)
 8002316:	4313      	orrs	r3, r2
 8002318:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800231a:	e03a      	b.n	8002392 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	68db      	ldr	r3, [r3, #12]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d020      	beq.n	8002366 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002324:	4b4f      	ldr	r3, [pc, #316]	; (8002464 <HAL_RCC_OscConfig+0x2b0>)
 8002326:	2201      	movs	r2, #1
 8002328:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800232a:	f7fe fd63 	bl	8000df4 <HAL_GetTick>
 800232e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002330:	e008      	b.n	8002344 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002332:	f7fe fd5f 	bl	8000df4 <HAL_GetTick>
 8002336:	4602      	mov	r2, r0
 8002338:	693b      	ldr	r3, [r7, #16]
 800233a:	1ad3      	subs	r3, r2, r3
 800233c:	2b02      	cmp	r3, #2
 800233e:	d901      	bls.n	8002344 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002340:	2303      	movs	r3, #3
 8002342:	e19c      	b.n	800267e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002344:	4b46      	ldr	r3, [pc, #280]	; (8002460 <HAL_RCC_OscConfig+0x2ac>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f003 0302 	and.w	r3, r3, #2
 800234c:	2b00      	cmp	r3, #0
 800234e:	d0f0      	beq.n	8002332 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002350:	4b43      	ldr	r3, [pc, #268]	; (8002460 <HAL_RCC_OscConfig+0x2ac>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	691b      	ldr	r3, [r3, #16]
 800235c:	00db      	lsls	r3, r3, #3
 800235e:	4940      	ldr	r1, [pc, #256]	; (8002460 <HAL_RCC_OscConfig+0x2ac>)
 8002360:	4313      	orrs	r3, r2
 8002362:	600b      	str	r3, [r1, #0]
 8002364:	e015      	b.n	8002392 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002366:	4b3f      	ldr	r3, [pc, #252]	; (8002464 <HAL_RCC_OscConfig+0x2b0>)
 8002368:	2200      	movs	r2, #0
 800236a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800236c:	f7fe fd42 	bl	8000df4 <HAL_GetTick>
 8002370:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002372:	e008      	b.n	8002386 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002374:	f7fe fd3e 	bl	8000df4 <HAL_GetTick>
 8002378:	4602      	mov	r2, r0
 800237a:	693b      	ldr	r3, [r7, #16]
 800237c:	1ad3      	subs	r3, r2, r3
 800237e:	2b02      	cmp	r3, #2
 8002380:	d901      	bls.n	8002386 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002382:	2303      	movs	r3, #3
 8002384:	e17b      	b.n	800267e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002386:	4b36      	ldr	r3, [pc, #216]	; (8002460 <HAL_RCC_OscConfig+0x2ac>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f003 0302 	and.w	r3, r3, #2
 800238e:	2b00      	cmp	r3, #0
 8002390:	d1f0      	bne.n	8002374 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f003 0308 	and.w	r3, r3, #8
 800239a:	2b00      	cmp	r3, #0
 800239c:	d030      	beq.n	8002400 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	695b      	ldr	r3, [r3, #20]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d016      	beq.n	80023d4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023a6:	4b30      	ldr	r3, [pc, #192]	; (8002468 <HAL_RCC_OscConfig+0x2b4>)
 80023a8:	2201      	movs	r2, #1
 80023aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023ac:	f7fe fd22 	bl	8000df4 <HAL_GetTick>
 80023b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023b2:	e008      	b.n	80023c6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023b4:	f7fe fd1e 	bl	8000df4 <HAL_GetTick>
 80023b8:	4602      	mov	r2, r0
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	1ad3      	subs	r3, r2, r3
 80023be:	2b02      	cmp	r3, #2
 80023c0:	d901      	bls.n	80023c6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80023c2:	2303      	movs	r3, #3
 80023c4:	e15b      	b.n	800267e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023c6:	4b26      	ldr	r3, [pc, #152]	; (8002460 <HAL_RCC_OscConfig+0x2ac>)
 80023c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023ca:	f003 0302 	and.w	r3, r3, #2
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d0f0      	beq.n	80023b4 <HAL_RCC_OscConfig+0x200>
 80023d2:	e015      	b.n	8002400 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023d4:	4b24      	ldr	r3, [pc, #144]	; (8002468 <HAL_RCC_OscConfig+0x2b4>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023da:	f7fe fd0b 	bl	8000df4 <HAL_GetTick>
 80023de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023e0:	e008      	b.n	80023f4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023e2:	f7fe fd07 	bl	8000df4 <HAL_GetTick>
 80023e6:	4602      	mov	r2, r0
 80023e8:	693b      	ldr	r3, [r7, #16]
 80023ea:	1ad3      	subs	r3, r2, r3
 80023ec:	2b02      	cmp	r3, #2
 80023ee:	d901      	bls.n	80023f4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80023f0:	2303      	movs	r3, #3
 80023f2:	e144      	b.n	800267e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023f4:	4b1a      	ldr	r3, [pc, #104]	; (8002460 <HAL_RCC_OscConfig+0x2ac>)
 80023f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023f8:	f003 0302 	and.w	r3, r3, #2
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d1f0      	bne.n	80023e2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f003 0304 	and.w	r3, r3, #4
 8002408:	2b00      	cmp	r3, #0
 800240a:	f000 80a0 	beq.w	800254e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800240e:	2300      	movs	r3, #0
 8002410:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002412:	4b13      	ldr	r3, [pc, #76]	; (8002460 <HAL_RCC_OscConfig+0x2ac>)
 8002414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002416:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800241a:	2b00      	cmp	r3, #0
 800241c:	d10f      	bne.n	800243e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800241e:	2300      	movs	r3, #0
 8002420:	60bb      	str	r3, [r7, #8]
 8002422:	4b0f      	ldr	r3, [pc, #60]	; (8002460 <HAL_RCC_OscConfig+0x2ac>)
 8002424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002426:	4a0e      	ldr	r2, [pc, #56]	; (8002460 <HAL_RCC_OscConfig+0x2ac>)
 8002428:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800242c:	6413      	str	r3, [r2, #64]	; 0x40
 800242e:	4b0c      	ldr	r3, [pc, #48]	; (8002460 <HAL_RCC_OscConfig+0x2ac>)
 8002430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002432:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002436:	60bb      	str	r3, [r7, #8]
 8002438:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800243a:	2301      	movs	r3, #1
 800243c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800243e:	4b0b      	ldr	r3, [pc, #44]	; (800246c <HAL_RCC_OscConfig+0x2b8>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002446:	2b00      	cmp	r3, #0
 8002448:	d121      	bne.n	800248e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800244a:	4b08      	ldr	r3, [pc, #32]	; (800246c <HAL_RCC_OscConfig+0x2b8>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a07      	ldr	r2, [pc, #28]	; (800246c <HAL_RCC_OscConfig+0x2b8>)
 8002450:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002454:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002456:	f7fe fccd 	bl	8000df4 <HAL_GetTick>
 800245a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800245c:	e011      	b.n	8002482 <HAL_RCC_OscConfig+0x2ce>
 800245e:	bf00      	nop
 8002460:	40023800 	.word	0x40023800
 8002464:	42470000 	.word	0x42470000
 8002468:	42470e80 	.word	0x42470e80
 800246c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002470:	f7fe fcc0 	bl	8000df4 <HAL_GetTick>
 8002474:	4602      	mov	r2, r0
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	1ad3      	subs	r3, r2, r3
 800247a:	2b02      	cmp	r3, #2
 800247c:	d901      	bls.n	8002482 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800247e:	2303      	movs	r3, #3
 8002480:	e0fd      	b.n	800267e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002482:	4b81      	ldr	r3, [pc, #516]	; (8002688 <HAL_RCC_OscConfig+0x4d4>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800248a:	2b00      	cmp	r3, #0
 800248c:	d0f0      	beq.n	8002470 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	2b01      	cmp	r3, #1
 8002494:	d106      	bne.n	80024a4 <HAL_RCC_OscConfig+0x2f0>
 8002496:	4b7d      	ldr	r3, [pc, #500]	; (800268c <HAL_RCC_OscConfig+0x4d8>)
 8002498:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800249a:	4a7c      	ldr	r2, [pc, #496]	; (800268c <HAL_RCC_OscConfig+0x4d8>)
 800249c:	f043 0301 	orr.w	r3, r3, #1
 80024a0:	6713      	str	r3, [r2, #112]	; 0x70
 80024a2:	e01c      	b.n	80024de <HAL_RCC_OscConfig+0x32a>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	689b      	ldr	r3, [r3, #8]
 80024a8:	2b05      	cmp	r3, #5
 80024aa:	d10c      	bne.n	80024c6 <HAL_RCC_OscConfig+0x312>
 80024ac:	4b77      	ldr	r3, [pc, #476]	; (800268c <HAL_RCC_OscConfig+0x4d8>)
 80024ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024b0:	4a76      	ldr	r2, [pc, #472]	; (800268c <HAL_RCC_OscConfig+0x4d8>)
 80024b2:	f043 0304 	orr.w	r3, r3, #4
 80024b6:	6713      	str	r3, [r2, #112]	; 0x70
 80024b8:	4b74      	ldr	r3, [pc, #464]	; (800268c <HAL_RCC_OscConfig+0x4d8>)
 80024ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024bc:	4a73      	ldr	r2, [pc, #460]	; (800268c <HAL_RCC_OscConfig+0x4d8>)
 80024be:	f043 0301 	orr.w	r3, r3, #1
 80024c2:	6713      	str	r3, [r2, #112]	; 0x70
 80024c4:	e00b      	b.n	80024de <HAL_RCC_OscConfig+0x32a>
 80024c6:	4b71      	ldr	r3, [pc, #452]	; (800268c <HAL_RCC_OscConfig+0x4d8>)
 80024c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024ca:	4a70      	ldr	r2, [pc, #448]	; (800268c <HAL_RCC_OscConfig+0x4d8>)
 80024cc:	f023 0301 	bic.w	r3, r3, #1
 80024d0:	6713      	str	r3, [r2, #112]	; 0x70
 80024d2:	4b6e      	ldr	r3, [pc, #440]	; (800268c <HAL_RCC_OscConfig+0x4d8>)
 80024d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024d6:	4a6d      	ldr	r2, [pc, #436]	; (800268c <HAL_RCC_OscConfig+0x4d8>)
 80024d8:	f023 0304 	bic.w	r3, r3, #4
 80024dc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	689b      	ldr	r3, [r3, #8]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d015      	beq.n	8002512 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024e6:	f7fe fc85 	bl	8000df4 <HAL_GetTick>
 80024ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024ec:	e00a      	b.n	8002504 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024ee:	f7fe fc81 	bl	8000df4 <HAL_GetTick>
 80024f2:	4602      	mov	r2, r0
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	1ad3      	subs	r3, r2, r3
 80024f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d901      	bls.n	8002504 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002500:	2303      	movs	r3, #3
 8002502:	e0bc      	b.n	800267e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002504:	4b61      	ldr	r3, [pc, #388]	; (800268c <HAL_RCC_OscConfig+0x4d8>)
 8002506:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002508:	f003 0302 	and.w	r3, r3, #2
 800250c:	2b00      	cmp	r3, #0
 800250e:	d0ee      	beq.n	80024ee <HAL_RCC_OscConfig+0x33a>
 8002510:	e014      	b.n	800253c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002512:	f7fe fc6f 	bl	8000df4 <HAL_GetTick>
 8002516:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002518:	e00a      	b.n	8002530 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800251a:	f7fe fc6b 	bl	8000df4 <HAL_GetTick>
 800251e:	4602      	mov	r2, r0
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	1ad3      	subs	r3, r2, r3
 8002524:	f241 3288 	movw	r2, #5000	; 0x1388
 8002528:	4293      	cmp	r3, r2
 800252a:	d901      	bls.n	8002530 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800252c:	2303      	movs	r3, #3
 800252e:	e0a6      	b.n	800267e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002530:	4b56      	ldr	r3, [pc, #344]	; (800268c <HAL_RCC_OscConfig+0x4d8>)
 8002532:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002534:	f003 0302 	and.w	r3, r3, #2
 8002538:	2b00      	cmp	r3, #0
 800253a:	d1ee      	bne.n	800251a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800253c:	7dfb      	ldrb	r3, [r7, #23]
 800253e:	2b01      	cmp	r3, #1
 8002540:	d105      	bne.n	800254e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002542:	4b52      	ldr	r3, [pc, #328]	; (800268c <HAL_RCC_OscConfig+0x4d8>)
 8002544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002546:	4a51      	ldr	r2, [pc, #324]	; (800268c <HAL_RCC_OscConfig+0x4d8>)
 8002548:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800254c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	699b      	ldr	r3, [r3, #24]
 8002552:	2b00      	cmp	r3, #0
 8002554:	f000 8092 	beq.w	800267c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002558:	4b4c      	ldr	r3, [pc, #304]	; (800268c <HAL_RCC_OscConfig+0x4d8>)
 800255a:	689b      	ldr	r3, [r3, #8]
 800255c:	f003 030c 	and.w	r3, r3, #12
 8002560:	2b08      	cmp	r3, #8
 8002562:	d05c      	beq.n	800261e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	699b      	ldr	r3, [r3, #24]
 8002568:	2b02      	cmp	r3, #2
 800256a:	d141      	bne.n	80025f0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800256c:	4b48      	ldr	r3, [pc, #288]	; (8002690 <HAL_RCC_OscConfig+0x4dc>)
 800256e:	2200      	movs	r2, #0
 8002570:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002572:	f7fe fc3f 	bl	8000df4 <HAL_GetTick>
 8002576:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002578:	e008      	b.n	800258c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800257a:	f7fe fc3b 	bl	8000df4 <HAL_GetTick>
 800257e:	4602      	mov	r2, r0
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	1ad3      	subs	r3, r2, r3
 8002584:	2b02      	cmp	r3, #2
 8002586:	d901      	bls.n	800258c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002588:	2303      	movs	r3, #3
 800258a:	e078      	b.n	800267e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800258c:	4b3f      	ldr	r3, [pc, #252]	; (800268c <HAL_RCC_OscConfig+0x4d8>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002594:	2b00      	cmp	r3, #0
 8002596:	d1f0      	bne.n	800257a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	69da      	ldr	r2, [r3, #28]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6a1b      	ldr	r3, [r3, #32]
 80025a0:	431a      	orrs	r2, r3
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a6:	019b      	lsls	r3, r3, #6
 80025a8:	431a      	orrs	r2, r3
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025ae:	085b      	lsrs	r3, r3, #1
 80025b0:	3b01      	subs	r3, #1
 80025b2:	041b      	lsls	r3, r3, #16
 80025b4:	431a      	orrs	r2, r3
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ba:	061b      	lsls	r3, r3, #24
 80025bc:	4933      	ldr	r1, [pc, #204]	; (800268c <HAL_RCC_OscConfig+0x4d8>)
 80025be:	4313      	orrs	r3, r2
 80025c0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025c2:	4b33      	ldr	r3, [pc, #204]	; (8002690 <HAL_RCC_OscConfig+0x4dc>)
 80025c4:	2201      	movs	r2, #1
 80025c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025c8:	f7fe fc14 	bl	8000df4 <HAL_GetTick>
 80025cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025ce:	e008      	b.n	80025e2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025d0:	f7fe fc10 	bl	8000df4 <HAL_GetTick>
 80025d4:	4602      	mov	r2, r0
 80025d6:	693b      	ldr	r3, [r7, #16]
 80025d8:	1ad3      	subs	r3, r2, r3
 80025da:	2b02      	cmp	r3, #2
 80025dc:	d901      	bls.n	80025e2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80025de:	2303      	movs	r3, #3
 80025e0:	e04d      	b.n	800267e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025e2:	4b2a      	ldr	r3, [pc, #168]	; (800268c <HAL_RCC_OscConfig+0x4d8>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d0f0      	beq.n	80025d0 <HAL_RCC_OscConfig+0x41c>
 80025ee:	e045      	b.n	800267c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025f0:	4b27      	ldr	r3, [pc, #156]	; (8002690 <HAL_RCC_OscConfig+0x4dc>)
 80025f2:	2200      	movs	r2, #0
 80025f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025f6:	f7fe fbfd 	bl	8000df4 <HAL_GetTick>
 80025fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025fc:	e008      	b.n	8002610 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025fe:	f7fe fbf9 	bl	8000df4 <HAL_GetTick>
 8002602:	4602      	mov	r2, r0
 8002604:	693b      	ldr	r3, [r7, #16]
 8002606:	1ad3      	subs	r3, r2, r3
 8002608:	2b02      	cmp	r3, #2
 800260a:	d901      	bls.n	8002610 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800260c:	2303      	movs	r3, #3
 800260e:	e036      	b.n	800267e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002610:	4b1e      	ldr	r3, [pc, #120]	; (800268c <HAL_RCC_OscConfig+0x4d8>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002618:	2b00      	cmp	r3, #0
 800261a:	d1f0      	bne.n	80025fe <HAL_RCC_OscConfig+0x44a>
 800261c:	e02e      	b.n	800267c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	699b      	ldr	r3, [r3, #24]
 8002622:	2b01      	cmp	r3, #1
 8002624:	d101      	bne.n	800262a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	e029      	b.n	800267e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800262a:	4b18      	ldr	r3, [pc, #96]	; (800268c <HAL_RCC_OscConfig+0x4d8>)
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	69db      	ldr	r3, [r3, #28]
 800263a:	429a      	cmp	r2, r3
 800263c:	d11c      	bne.n	8002678 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002648:	429a      	cmp	r2, r3
 800264a:	d115      	bne.n	8002678 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800264c:	68fa      	ldr	r2, [r7, #12]
 800264e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002652:	4013      	ands	r3, r2
 8002654:	687a      	ldr	r2, [r7, #4]
 8002656:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002658:	4293      	cmp	r3, r2
 800265a:	d10d      	bne.n	8002678 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002666:	429a      	cmp	r2, r3
 8002668:	d106      	bne.n	8002678 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002674:	429a      	cmp	r2, r3
 8002676:	d001      	beq.n	800267c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002678:	2301      	movs	r3, #1
 800267a:	e000      	b.n	800267e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800267c:	2300      	movs	r3, #0
}
 800267e:	4618      	mov	r0, r3
 8002680:	3718      	adds	r7, #24
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}
 8002686:	bf00      	nop
 8002688:	40007000 	.word	0x40007000
 800268c:	40023800 	.word	0x40023800
 8002690:	42470060 	.word	0x42470060

08002694 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b084      	sub	sp, #16
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
 800269c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d101      	bne.n	80026a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026a4:	2301      	movs	r3, #1
 80026a6:	e0cc      	b.n	8002842 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80026a8:	4b68      	ldr	r3, [pc, #416]	; (800284c <HAL_RCC_ClockConfig+0x1b8>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f003 030f 	and.w	r3, r3, #15
 80026b0:	683a      	ldr	r2, [r7, #0]
 80026b2:	429a      	cmp	r2, r3
 80026b4:	d90c      	bls.n	80026d0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026b6:	4b65      	ldr	r3, [pc, #404]	; (800284c <HAL_RCC_ClockConfig+0x1b8>)
 80026b8:	683a      	ldr	r2, [r7, #0]
 80026ba:	b2d2      	uxtb	r2, r2
 80026bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026be:	4b63      	ldr	r3, [pc, #396]	; (800284c <HAL_RCC_ClockConfig+0x1b8>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 030f 	and.w	r3, r3, #15
 80026c6:	683a      	ldr	r2, [r7, #0]
 80026c8:	429a      	cmp	r2, r3
 80026ca:	d001      	beq.n	80026d0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80026cc:	2301      	movs	r3, #1
 80026ce:	e0b8      	b.n	8002842 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f003 0302 	and.w	r3, r3, #2
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d020      	beq.n	800271e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f003 0304 	and.w	r3, r3, #4
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d005      	beq.n	80026f4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80026e8:	4b59      	ldr	r3, [pc, #356]	; (8002850 <HAL_RCC_ClockConfig+0x1bc>)
 80026ea:	689b      	ldr	r3, [r3, #8]
 80026ec:	4a58      	ldr	r2, [pc, #352]	; (8002850 <HAL_RCC_ClockConfig+0x1bc>)
 80026ee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80026f2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f003 0308 	and.w	r3, r3, #8
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d005      	beq.n	800270c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002700:	4b53      	ldr	r3, [pc, #332]	; (8002850 <HAL_RCC_ClockConfig+0x1bc>)
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	4a52      	ldr	r2, [pc, #328]	; (8002850 <HAL_RCC_ClockConfig+0x1bc>)
 8002706:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800270a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800270c:	4b50      	ldr	r3, [pc, #320]	; (8002850 <HAL_RCC_ClockConfig+0x1bc>)
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	689b      	ldr	r3, [r3, #8]
 8002718:	494d      	ldr	r1, [pc, #308]	; (8002850 <HAL_RCC_ClockConfig+0x1bc>)
 800271a:	4313      	orrs	r3, r2
 800271c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f003 0301 	and.w	r3, r3, #1
 8002726:	2b00      	cmp	r3, #0
 8002728:	d044      	beq.n	80027b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	2b01      	cmp	r3, #1
 8002730:	d107      	bne.n	8002742 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002732:	4b47      	ldr	r3, [pc, #284]	; (8002850 <HAL_RCC_ClockConfig+0x1bc>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800273a:	2b00      	cmp	r3, #0
 800273c:	d119      	bne.n	8002772 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	e07f      	b.n	8002842 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	2b02      	cmp	r3, #2
 8002748:	d003      	beq.n	8002752 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800274e:	2b03      	cmp	r3, #3
 8002750:	d107      	bne.n	8002762 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002752:	4b3f      	ldr	r3, [pc, #252]	; (8002850 <HAL_RCC_ClockConfig+0x1bc>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800275a:	2b00      	cmp	r3, #0
 800275c:	d109      	bne.n	8002772 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800275e:	2301      	movs	r3, #1
 8002760:	e06f      	b.n	8002842 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002762:	4b3b      	ldr	r3, [pc, #236]	; (8002850 <HAL_RCC_ClockConfig+0x1bc>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f003 0302 	and.w	r3, r3, #2
 800276a:	2b00      	cmp	r3, #0
 800276c:	d101      	bne.n	8002772 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	e067      	b.n	8002842 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002772:	4b37      	ldr	r3, [pc, #220]	; (8002850 <HAL_RCC_ClockConfig+0x1bc>)
 8002774:	689b      	ldr	r3, [r3, #8]
 8002776:	f023 0203 	bic.w	r2, r3, #3
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	4934      	ldr	r1, [pc, #208]	; (8002850 <HAL_RCC_ClockConfig+0x1bc>)
 8002780:	4313      	orrs	r3, r2
 8002782:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002784:	f7fe fb36 	bl	8000df4 <HAL_GetTick>
 8002788:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800278a:	e00a      	b.n	80027a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800278c:	f7fe fb32 	bl	8000df4 <HAL_GetTick>
 8002790:	4602      	mov	r2, r0
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	1ad3      	subs	r3, r2, r3
 8002796:	f241 3288 	movw	r2, #5000	; 0x1388
 800279a:	4293      	cmp	r3, r2
 800279c:	d901      	bls.n	80027a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800279e:	2303      	movs	r3, #3
 80027a0:	e04f      	b.n	8002842 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027a2:	4b2b      	ldr	r3, [pc, #172]	; (8002850 <HAL_RCC_ClockConfig+0x1bc>)
 80027a4:	689b      	ldr	r3, [r3, #8]
 80027a6:	f003 020c 	and.w	r2, r3, #12
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	009b      	lsls	r3, r3, #2
 80027b0:	429a      	cmp	r2, r3
 80027b2:	d1eb      	bne.n	800278c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80027b4:	4b25      	ldr	r3, [pc, #148]	; (800284c <HAL_RCC_ClockConfig+0x1b8>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f003 030f 	and.w	r3, r3, #15
 80027bc:	683a      	ldr	r2, [r7, #0]
 80027be:	429a      	cmp	r2, r3
 80027c0:	d20c      	bcs.n	80027dc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027c2:	4b22      	ldr	r3, [pc, #136]	; (800284c <HAL_RCC_ClockConfig+0x1b8>)
 80027c4:	683a      	ldr	r2, [r7, #0]
 80027c6:	b2d2      	uxtb	r2, r2
 80027c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027ca:	4b20      	ldr	r3, [pc, #128]	; (800284c <HAL_RCC_ClockConfig+0x1b8>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f003 030f 	and.w	r3, r3, #15
 80027d2:	683a      	ldr	r2, [r7, #0]
 80027d4:	429a      	cmp	r2, r3
 80027d6:	d001      	beq.n	80027dc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80027d8:	2301      	movs	r3, #1
 80027da:	e032      	b.n	8002842 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f003 0304 	and.w	r3, r3, #4
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d008      	beq.n	80027fa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027e8:	4b19      	ldr	r3, [pc, #100]	; (8002850 <HAL_RCC_ClockConfig+0x1bc>)
 80027ea:	689b      	ldr	r3, [r3, #8]
 80027ec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	68db      	ldr	r3, [r3, #12]
 80027f4:	4916      	ldr	r1, [pc, #88]	; (8002850 <HAL_RCC_ClockConfig+0x1bc>)
 80027f6:	4313      	orrs	r3, r2
 80027f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f003 0308 	and.w	r3, r3, #8
 8002802:	2b00      	cmp	r3, #0
 8002804:	d009      	beq.n	800281a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002806:	4b12      	ldr	r3, [pc, #72]	; (8002850 <HAL_RCC_ClockConfig+0x1bc>)
 8002808:	689b      	ldr	r3, [r3, #8]
 800280a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	691b      	ldr	r3, [r3, #16]
 8002812:	00db      	lsls	r3, r3, #3
 8002814:	490e      	ldr	r1, [pc, #56]	; (8002850 <HAL_RCC_ClockConfig+0x1bc>)
 8002816:	4313      	orrs	r3, r2
 8002818:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800281a:	f000 f821 	bl	8002860 <HAL_RCC_GetSysClockFreq>
 800281e:	4601      	mov	r1, r0
 8002820:	4b0b      	ldr	r3, [pc, #44]	; (8002850 <HAL_RCC_ClockConfig+0x1bc>)
 8002822:	689b      	ldr	r3, [r3, #8]
 8002824:	091b      	lsrs	r3, r3, #4
 8002826:	f003 030f 	and.w	r3, r3, #15
 800282a:	4a0a      	ldr	r2, [pc, #40]	; (8002854 <HAL_RCC_ClockConfig+0x1c0>)
 800282c:	5cd3      	ldrb	r3, [r2, r3]
 800282e:	fa21 f303 	lsr.w	r3, r1, r3
 8002832:	4a09      	ldr	r2, [pc, #36]	; (8002858 <HAL_RCC_ClockConfig+0x1c4>)
 8002834:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002836:	4b09      	ldr	r3, [pc, #36]	; (800285c <HAL_RCC_ClockConfig+0x1c8>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4618      	mov	r0, r3
 800283c:	f7fe fa96 	bl	8000d6c <HAL_InitTick>

  return HAL_OK;
 8002840:	2300      	movs	r3, #0
}
 8002842:	4618      	mov	r0, r3
 8002844:	3710      	adds	r7, #16
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}
 800284a:	bf00      	nop
 800284c:	40023c00 	.word	0x40023c00
 8002850:	40023800 	.word	0x40023800
 8002854:	08003f70 	.word	0x08003f70
 8002858:	20000004 	.word	0x20000004
 800285c:	20000008 	.word	0x20000008

08002860 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002860:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002862:	b085      	sub	sp, #20
 8002864:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002866:	2300      	movs	r3, #0
 8002868:	607b      	str	r3, [r7, #4]
 800286a:	2300      	movs	r3, #0
 800286c:	60fb      	str	r3, [r7, #12]
 800286e:	2300      	movs	r3, #0
 8002870:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002872:	2300      	movs	r3, #0
 8002874:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002876:	4b63      	ldr	r3, [pc, #396]	; (8002a04 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002878:	689b      	ldr	r3, [r3, #8]
 800287a:	f003 030c 	and.w	r3, r3, #12
 800287e:	2b04      	cmp	r3, #4
 8002880:	d007      	beq.n	8002892 <HAL_RCC_GetSysClockFreq+0x32>
 8002882:	2b08      	cmp	r3, #8
 8002884:	d008      	beq.n	8002898 <HAL_RCC_GetSysClockFreq+0x38>
 8002886:	2b00      	cmp	r3, #0
 8002888:	f040 80b4 	bne.w	80029f4 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800288c:	4b5e      	ldr	r3, [pc, #376]	; (8002a08 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800288e:	60bb      	str	r3, [r7, #8]
       break;
 8002890:	e0b3      	b.n	80029fa <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002892:	4b5e      	ldr	r3, [pc, #376]	; (8002a0c <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002894:	60bb      	str	r3, [r7, #8]
      break;
 8002896:	e0b0      	b.n	80029fa <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002898:	4b5a      	ldr	r3, [pc, #360]	; (8002a04 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80028a0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80028a2:	4b58      	ldr	r3, [pc, #352]	; (8002a04 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d04a      	beq.n	8002944 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028ae:	4b55      	ldr	r3, [pc, #340]	; (8002a04 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	099b      	lsrs	r3, r3, #6
 80028b4:	f04f 0400 	mov.w	r4, #0
 80028b8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80028bc:	f04f 0200 	mov.w	r2, #0
 80028c0:	ea03 0501 	and.w	r5, r3, r1
 80028c4:	ea04 0602 	and.w	r6, r4, r2
 80028c8:	4629      	mov	r1, r5
 80028ca:	4632      	mov	r2, r6
 80028cc:	f04f 0300 	mov.w	r3, #0
 80028d0:	f04f 0400 	mov.w	r4, #0
 80028d4:	0154      	lsls	r4, r2, #5
 80028d6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80028da:	014b      	lsls	r3, r1, #5
 80028dc:	4619      	mov	r1, r3
 80028de:	4622      	mov	r2, r4
 80028e0:	1b49      	subs	r1, r1, r5
 80028e2:	eb62 0206 	sbc.w	r2, r2, r6
 80028e6:	f04f 0300 	mov.w	r3, #0
 80028ea:	f04f 0400 	mov.w	r4, #0
 80028ee:	0194      	lsls	r4, r2, #6
 80028f0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80028f4:	018b      	lsls	r3, r1, #6
 80028f6:	1a5b      	subs	r3, r3, r1
 80028f8:	eb64 0402 	sbc.w	r4, r4, r2
 80028fc:	f04f 0100 	mov.w	r1, #0
 8002900:	f04f 0200 	mov.w	r2, #0
 8002904:	00e2      	lsls	r2, r4, #3
 8002906:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800290a:	00d9      	lsls	r1, r3, #3
 800290c:	460b      	mov	r3, r1
 800290e:	4614      	mov	r4, r2
 8002910:	195b      	adds	r3, r3, r5
 8002912:	eb44 0406 	adc.w	r4, r4, r6
 8002916:	f04f 0100 	mov.w	r1, #0
 800291a:	f04f 0200 	mov.w	r2, #0
 800291e:	0262      	lsls	r2, r4, #9
 8002920:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002924:	0259      	lsls	r1, r3, #9
 8002926:	460b      	mov	r3, r1
 8002928:	4614      	mov	r4, r2
 800292a:	4618      	mov	r0, r3
 800292c:	4621      	mov	r1, r4
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	f04f 0400 	mov.w	r4, #0
 8002934:	461a      	mov	r2, r3
 8002936:	4623      	mov	r3, r4
 8002938:	f7fd fcb2 	bl	80002a0 <__aeabi_uldivmod>
 800293c:	4603      	mov	r3, r0
 800293e:	460c      	mov	r4, r1
 8002940:	60fb      	str	r3, [r7, #12]
 8002942:	e049      	b.n	80029d8 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002944:	4b2f      	ldr	r3, [pc, #188]	; (8002a04 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	099b      	lsrs	r3, r3, #6
 800294a:	f04f 0400 	mov.w	r4, #0
 800294e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002952:	f04f 0200 	mov.w	r2, #0
 8002956:	ea03 0501 	and.w	r5, r3, r1
 800295a:	ea04 0602 	and.w	r6, r4, r2
 800295e:	4629      	mov	r1, r5
 8002960:	4632      	mov	r2, r6
 8002962:	f04f 0300 	mov.w	r3, #0
 8002966:	f04f 0400 	mov.w	r4, #0
 800296a:	0154      	lsls	r4, r2, #5
 800296c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002970:	014b      	lsls	r3, r1, #5
 8002972:	4619      	mov	r1, r3
 8002974:	4622      	mov	r2, r4
 8002976:	1b49      	subs	r1, r1, r5
 8002978:	eb62 0206 	sbc.w	r2, r2, r6
 800297c:	f04f 0300 	mov.w	r3, #0
 8002980:	f04f 0400 	mov.w	r4, #0
 8002984:	0194      	lsls	r4, r2, #6
 8002986:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800298a:	018b      	lsls	r3, r1, #6
 800298c:	1a5b      	subs	r3, r3, r1
 800298e:	eb64 0402 	sbc.w	r4, r4, r2
 8002992:	f04f 0100 	mov.w	r1, #0
 8002996:	f04f 0200 	mov.w	r2, #0
 800299a:	00e2      	lsls	r2, r4, #3
 800299c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80029a0:	00d9      	lsls	r1, r3, #3
 80029a2:	460b      	mov	r3, r1
 80029a4:	4614      	mov	r4, r2
 80029a6:	195b      	adds	r3, r3, r5
 80029a8:	eb44 0406 	adc.w	r4, r4, r6
 80029ac:	f04f 0100 	mov.w	r1, #0
 80029b0:	f04f 0200 	mov.w	r2, #0
 80029b4:	02a2      	lsls	r2, r4, #10
 80029b6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80029ba:	0299      	lsls	r1, r3, #10
 80029bc:	460b      	mov	r3, r1
 80029be:	4614      	mov	r4, r2
 80029c0:	4618      	mov	r0, r3
 80029c2:	4621      	mov	r1, r4
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	f04f 0400 	mov.w	r4, #0
 80029ca:	461a      	mov	r2, r3
 80029cc:	4623      	mov	r3, r4
 80029ce:	f7fd fc67 	bl	80002a0 <__aeabi_uldivmod>
 80029d2:	4603      	mov	r3, r0
 80029d4:	460c      	mov	r4, r1
 80029d6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80029d8:	4b0a      	ldr	r3, [pc, #40]	; (8002a04 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	0c1b      	lsrs	r3, r3, #16
 80029de:	f003 0303 	and.w	r3, r3, #3
 80029e2:	3301      	adds	r3, #1
 80029e4:	005b      	lsls	r3, r3, #1
 80029e6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80029e8:	68fa      	ldr	r2, [r7, #12]
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80029f0:	60bb      	str	r3, [r7, #8]
      break;
 80029f2:	e002      	b.n	80029fa <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80029f4:	4b04      	ldr	r3, [pc, #16]	; (8002a08 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80029f6:	60bb      	str	r3, [r7, #8]
      break;
 80029f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80029fa:	68bb      	ldr	r3, [r7, #8]
}
 80029fc:	4618      	mov	r0, r3
 80029fe:	3714      	adds	r7, #20
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a04:	40023800 	.word	0x40023800
 8002a08:	00f42400 	.word	0x00f42400
 8002a0c:	007a1200 	.word	0x007a1200

08002a10 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a10:	b480      	push	{r7}
 8002a12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a14:	4b03      	ldr	r3, [pc, #12]	; (8002a24 <HAL_RCC_GetHCLKFreq+0x14>)
 8002a16:	681b      	ldr	r3, [r3, #0]
}
 8002a18:	4618      	mov	r0, r3
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a20:	4770      	bx	lr
 8002a22:	bf00      	nop
 8002a24:	20000004 	.word	0x20000004

08002a28 <__libc_init_array>:
 8002a28:	b570      	push	{r4, r5, r6, lr}
 8002a2a:	4e0d      	ldr	r6, [pc, #52]	; (8002a60 <__libc_init_array+0x38>)
 8002a2c:	4c0d      	ldr	r4, [pc, #52]	; (8002a64 <__libc_init_array+0x3c>)
 8002a2e:	1ba4      	subs	r4, r4, r6
 8002a30:	10a4      	asrs	r4, r4, #2
 8002a32:	2500      	movs	r5, #0
 8002a34:	42a5      	cmp	r5, r4
 8002a36:	d109      	bne.n	8002a4c <__libc_init_array+0x24>
 8002a38:	4e0b      	ldr	r6, [pc, #44]	; (8002a68 <__libc_init_array+0x40>)
 8002a3a:	4c0c      	ldr	r4, [pc, #48]	; (8002a6c <__libc_init_array+0x44>)
 8002a3c:	f001 fa3a 	bl	8003eb4 <_init>
 8002a40:	1ba4      	subs	r4, r4, r6
 8002a42:	10a4      	asrs	r4, r4, #2
 8002a44:	2500      	movs	r5, #0
 8002a46:	42a5      	cmp	r5, r4
 8002a48:	d105      	bne.n	8002a56 <__libc_init_array+0x2e>
 8002a4a:	bd70      	pop	{r4, r5, r6, pc}
 8002a4c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002a50:	4798      	blx	r3
 8002a52:	3501      	adds	r5, #1
 8002a54:	e7ee      	b.n	8002a34 <__libc_init_array+0xc>
 8002a56:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002a5a:	4798      	blx	r3
 8002a5c:	3501      	adds	r5, #1
 8002a5e:	e7f2      	b.n	8002a46 <__libc_init_array+0x1e>
 8002a60:	0800403c 	.word	0x0800403c
 8002a64:	0800403c 	.word	0x0800403c
 8002a68:	0800403c 	.word	0x0800403c
 8002a6c:	08004040 	.word	0x08004040

08002a70 <memset>:
 8002a70:	4402      	add	r2, r0
 8002a72:	4603      	mov	r3, r0
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d100      	bne.n	8002a7a <memset+0xa>
 8002a78:	4770      	bx	lr
 8002a7a:	f803 1b01 	strb.w	r1, [r3], #1
 8002a7e:	e7f9      	b.n	8002a74 <memset+0x4>

08002a80 <iprintf>:
 8002a80:	b40f      	push	{r0, r1, r2, r3}
 8002a82:	4b0a      	ldr	r3, [pc, #40]	; (8002aac <iprintf+0x2c>)
 8002a84:	b513      	push	{r0, r1, r4, lr}
 8002a86:	681c      	ldr	r4, [r3, #0]
 8002a88:	b124      	cbz	r4, 8002a94 <iprintf+0x14>
 8002a8a:	69a3      	ldr	r3, [r4, #24]
 8002a8c:	b913      	cbnz	r3, 8002a94 <iprintf+0x14>
 8002a8e:	4620      	mov	r0, r4
 8002a90:	f000 fa22 	bl	8002ed8 <__sinit>
 8002a94:	ab05      	add	r3, sp, #20
 8002a96:	9a04      	ldr	r2, [sp, #16]
 8002a98:	68a1      	ldr	r1, [r4, #8]
 8002a9a:	9301      	str	r3, [sp, #4]
 8002a9c:	4620      	mov	r0, r4
 8002a9e:	f000 fbdb 	bl	8003258 <_vfiprintf_r>
 8002aa2:	b002      	add	sp, #8
 8002aa4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002aa8:	b004      	add	sp, #16
 8002aaa:	4770      	bx	lr
 8002aac:	20000010 	.word	0x20000010

08002ab0 <_puts_r>:
 8002ab0:	b570      	push	{r4, r5, r6, lr}
 8002ab2:	460e      	mov	r6, r1
 8002ab4:	4605      	mov	r5, r0
 8002ab6:	b118      	cbz	r0, 8002ac0 <_puts_r+0x10>
 8002ab8:	6983      	ldr	r3, [r0, #24]
 8002aba:	b90b      	cbnz	r3, 8002ac0 <_puts_r+0x10>
 8002abc:	f000 fa0c 	bl	8002ed8 <__sinit>
 8002ac0:	69ab      	ldr	r3, [r5, #24]
 8002ac2:	68ac      	ldr	r4, [r5, #8]
 8002ac4:	b913      	cbnz	r3, 8002acc <_puts_r+0x1c>
 8002ac6:	4628      	mov	r0, r5
 8002ac8:	f000 fa06 	bl	8002ed8 <__sinit>
 8002acc:	4b23      	ldr	r3, [pc, #140]	; (8002b5c <_puts_r+0xac>)
 8002ace:	429c      	cmp	r4, r3
 8002ad0:	d117      	bne.n	8002b02 <_puts_r+0x52>
 8002ad2:	686c      	ldr	r4, [r5, #4]
 8002ad4:	89a3      	ldrh	r3, [r4, #12]
 8002ad6:	071b      	lsls	r3, r3, #28
 8002ad8:	d51d      	bpl.n	8002b16 <_puts_r+0x66>
 8002ada:	6923      	ldr	r3, [r4, #16]
 8002adc:	b1db      	cbz	r3, 8002b16 <_puts_r+0x66>
 8002ade:	3e01      	subs	r6, #1
 8002ae0:	68a3      	ldr	r3, [r4, #8]
 8002ae2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002ae6:	3b01      	subs	r3, #1
 8002ae8:	60a3      	str	r3, [r4, #8]
 8002aea:	b9e9      	cbnz	r1, 8002b28 <_puts_r+0x78>
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	da2e      	bge.n	8002b4e <_puts_r+0x9e>
 8002af0:	4622      	mov	r2, r4
 8002af2:	210a      	movs	r1, #10
 8002af4:	4628      	mov	r0, r5
 8002af6:	f000 f83f 	bl	8002b78 <__swbuf_r>
 8002afa:	3001      	adds	r0, #1
 8002afc:	d011      	beq.n	8002b22 <_puts_r+0x72>
 8002afe:	200a      	movs	r0, #10
 8002b00:	e011      	b.n	8002b26 <_puts_r+0x76>
 8002b02:	4b17      	ldr	r3, [pc, #92]	; (8002b60 <_puts_r+0xb0>)
 8002b04:	429c      	cmp	r4, r3
 8002b06:	d101      	bne.n	8002b0c <_puts_r+0x5c>
 8002b08:	68ac      	ldr	r4, [r5, #8]
 8002b0a:	e7e3      	b.n	8002ad4 <_puts_r+0x24>
 8002b0c:	4b15      	ldr	r3, [pc, #84]	; (8002b64 <_puts_r+0xb4>)
 8002b0e:	429c      	cmp	r4, r3
 8002b10:	bf08      	it	eq
 8002b12:	68ec      	ldreq	r4, [r5, #12]
 8002b14:	e7de      	b.n	8002ad4 <_puts_r+0x24>
 8002b16:	4621      	mov	r1, r4
 8002b18:	4628      	mov	r0, r5
 8002b1a:	f000 f87f 	bl	8002c1c <__swsetup_r>
 8002b1e:	2800      	cmp	r0, #0
 8002b20:	d0dd      	beq.n	8002ade <_puts_r+0x2e>
 8002b22:	f04f 30ff 	mov.w	r0, #4294967295
 8002b26:	bd70      	pop	{r4, r5, r6, pc}
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	da04      	bge.n	8002b36 <_puts_r+0x86>
 8002b2c:	69a2      	ldr	r2, [r4, #24]
 8002b2e:	429a      	cmp	r2, r3
 8002b30:	dc06      	bgt.n	8002b40 <_puts_r+0x90>
 8002b32:	290a      	cmp	r1, #10
 8002b34:	d004      	beq.n	8002b40 <_puts_r+0x90>
 8002b36:	6823      	ldr	r3, [r4, #0]
 8002b38:	1c5a      	adds	r2, r3, #1
 8002b3a:	6022      	str	r2, [r4, #0]
 8002b3c:	7019      	strb	r1, [r3, #0]
 8002b3e:	e7cf      	b.n	8002ae0 <_puts_r+0x30>
 8002b40:	4622      	mov	r2, r4
 8002b42:	4628      	mov	r0, r5
 8002b44:	f000 f818 	bl	8002b78 <__swbuf_r>
 8002b48:	3001      	adds	r0, #1
 8002b4a:	d1c9      	bne.n	8002ae0 <_puts_r+0x30>
 8002b4c:	e7e9      	b.n	8002b22 <_puts_r+0x72>
 8002b4e:	6823      	ldr	r3, [r4, #0]
 8002b50:	200a      	movs	r0, #10
 8002b52:	1c5a      	adds	r2, r3, #1
 8002b54:	6022      	str	r2, [r4, #0]
 8002b56:	7018      	strb	r0, [r3, #0]
 8002b58:	e7e5      	b.n	8002b26 <_puts_r+0x76>
 8002b5a:	bf00      	nop
 8002b5c:	08003fa4 	.word	0x08003fa4
 8002b60:	08003fc4 	.word	0x08003fc4
 8002b64:	08003f84 	.word	0x08003f84

08002b68 <puts>:
 8002b68:	4b02      	ldr	r3, [pc, #8]	; (8002b74 <puts+0xc>)
 8002b6a:	4601      	mov	r1, r0
 8002b6c:	6818      	ldr	r0, [r3, #0]
 8002b6e:	f7ff bf9f 	b.w	8002ab0 <_puts_r>
 8002b72:	bf00      	nop
 8002b74:	20000010 	.word	0x20000010

08002b78 <__swbuf_r>:
 8002b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b7a:	460e      	mov	r6, r1
 8002b7c:	4614      	mov	r4, r2
 8002b7e:	4605      	mov	r5, r0
 8002b80:	b118      	cbz	r0, 8002b8a <__swbuf_r+0x12>
 8002b82:	6983      	ldr	r3, [r0, #24]
 8002b84:	b90b      	cbnz	r3, 8002b8a <__swbuf_r+0x12>
 8002b86:	f000 f9a7 	bl	8002ed8 <__sinit>
 8002b8a:	4b21      	ldr	r3, [pc, #132]	; (8002c10 <__swbuf_r+0x98>)
 8002b8c:	429c      	cmp	r4, r3
 8002b8e:	d12a      	bne.n	8002be6 <__swbuf_r+0x6e>
 8002b90:	686c      	ldr	r4, [r5, #4]
 8002b92:	69a3      	ldr	r3, [r4, #24]
 8002b94:	60a3      	str	r3, [r4, #8]
 8002b96:	89a3      	ldrh	r3, [r4, #12]
 8002b98:	071a      	lsls	r2, r3, #28
 8002b9a:	d52e      	bpl.n	8002bfa <__swbuf_r+0x82>
 8002b9c:	6923      	ldr	r3, [r4, #16]
 8002b9e:	b363      	cbz	r3, 8002bfa <__swbuf_r+0x82>
 8002ba0:	6923      	ldr	r3, [r4, #16]
 8002ba2:	6820      	ldr	r0, [r4, #0]
 8002ba4:	1ac0      	subs	r0, r0, r3
 8002ba6:	6963      	ldr	r3, [r4, #20]
 8002ba8:	b2f6      	uxtb	r6, r6
 8002baa:	4283      	cmp	r3, r0
 8002bac:	4637      	mov	r7, r6
 8002bae:	dc04      	bgt.n	8002bba <__swbuf_r+0x42>
 8002bb0:	4621      	mov	r1, r4
 8002bb2:	4628      	mov	r0, r5
 8002bb4:	f000 f926 	bl	8002e04 <_fflush_r>
 8002bb8:	bb28      	cbnz	r0, 8002c06 <__swbuf_r+0x8e>
 8002bba:	68a3      	ldr	r3, [r4, #8]
 8002bbc:	3b01      	subs	r3, #1
 8002bbe:	60a3      	str	r3, [r4, #8]
 8002bc0:	6823      	ldr	r3, [r4, #0]
 8002bc2:	1c5a      	adds	r2, r3, #1
 8002bc4:	6022      	str	r2, [r4, #0]
 8002bc6:	701e      	strb	r6, [r3, #0]
 8002bc8:	6963      	ldr	r3, [r4, #20]
 8002bca:	3001      	adds	r0, #1
 8002bcc:	4283      	cmp	r3, r0
 8002bce:	d004      	beq.n	8002bda <__swbuf_r+0x62>
 8002bd0:	89a3      	ldrh	r3, [r4, #12]
 8002bd2:	07db      	lsls	r3, r3, #31
 8002bd4:	d519      	bpl.n	8002c0a <__swbuf_r+0x92>
 8002bd6:	2e0a      	cmp	r6, #10
 8002bd8:	d117      	bne.n	8002c0a <__swbuf_r+0x92>
 8002bda:	4621      	mov	r1, r4
 8002bdc:	4628      	mov	r0, r5
 8002bde:	f000 f911 	bl	8002e04 <_fflush_r>
 8002be2:	b190      	cbz	r0, 8002c0a <__swbuf_r+0x92>
 8002be4:	e00f      	b.n	8002c06 <__swbuf_r+0x8e>
 8002be6:	4b0b      	ldr	r3, [pc, #44]	; (8002c14 <__swbuf_r+0x9c>)
 8002be8:	429c      	cmp	r4, r3
 8002bea:	d101      	bne.n	8002bf0 <__swbuf_r+0x78>
 8002bec:	68ac      	ldr	r4, [r5, #8]
 8002bee:	e7d0      	b.n	8002b92 <__swbuf_r+0x1a>
 8002bf0:	4b09      	ldr	r3, [pc, #36]	; (8002c18 <__swbuf_r+0xa0>)
 8002bf2:	429c      	cmp	r4, r3
 8002bf4:	bf08      	it	eq
 8002bf6:	68ec      	ldreq	r4, [r5, #12]
 8002bf8:	e7cb      	b.n	8002b92 <__swbuf_r+0x1a>
 8002bfa:	4621      	mov	r1, r4
 8002bfc:	4628      	mov	r0, r5
 8002bfe:	f000 f80d 	bl	8002c1c <__swsetup_r>
 8002c02:	2800      	cmp	r0, #0
 8002c04:	d0cc      	beq.n	8002ba0 <__swbuf_r+0x28>
 8002c06:	f04f 37ff 	mov.w	r7, #4294967295
 8002c0a:	4638      	mov	r0, r7
 8002c0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002c0e:	bf00      	nop
 8002c10:	08003fa4 	.word	0x08003fa4
 8002c14:	08003fc4 	.word	0x08003fc4
 8002c18:	08003f84 	.word	0x08003f84

08002c1c <__swsetup_r>:
 8002c1c:	4b32      	ldr	r3, [pc, #200]	; (8002ce8 <__swsetup_r+0xcc>)
 8002c1e:	b570      	push	{r4, r5, r6, lr}
 8002c20:	681d      	ldr	r5, [r3, #0]
 8002c22:	4606      	mov	r6, r0
 8002c24:	460c      	mov	r4, r1
 8002c26:	b125      	cbz	r5, 8002c32 <__swsetup_r+0x16>
 8002c28:	69ab      	ldr	r3, [r5, #24]
 8002c2a:	b913      	cbnz	r3, 8002c32 <__swsetup_r+0x16>
 8002c2c:	4628      	mov	r0, r5
 8002c2e:	f000 f953 	bl	8002ed8 <__sinit>
 8002c32:	4b2e      	ldr	r3, [pc, #184]	; (8002cec <__swsetup_r+0xd0>)
 8002c34:	429c      	cmp	r4, r3
 8002c36:	d10f      	bne.n	8002c58 <__swsetup_r+0x3c>
 8002c38:	686c      	ldr	r4, [r5, #4]
 8002c3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002c3e:	b29a      	uxth	r2, r3
 8002c40:	0715      	lsls	r5, r2, #28
 8002c42:	d42c      	bmi.n	8002c9e <__swsetup_r+0x82>
 8002c44:	06d0      	lsls	r0, r2, #27
 8002c46:	d411      	bmi.n	8002c6c <__swsetup_r+0x50>
 8002c48:	2209      	movs	r2, #9
 8002c4a:	6032      	str	r2, [r6, #0]
 8002c4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c50:	81a3      	strh	r3, [r4, #12]
 8002c52:	f04f 30ff 	mov.w	r0, #4294967295
 8002c56:	e03e      	b.n	8002cd6 <__swsetup_r+0xba>
 8002c58:	4b25      	ldr	r3, [pc, #148]	; (8002cf0 <__swsetup_r+0xd4>)
 8002c5a:	429c      	cmp	r4, r3
 8002c5c:	d101      	bne.n	8002c62 <__swsetup_r+0x46>
 8002c5e:	68ac      	ldr	r4, [r5, #8]
 8002c60:	e7eb      	b.n	8002c3a <__swsetup_r+0x1e>
 8002c62:	4b24      	ldr	r3, [pc, #144]	; (8002cf4 <__swsetup_r+0xd8>)
 8002c64:	429c      	cmp	r4, r3
 8002c66:	bf08      	it	eq
 8002c68:	68ec      	ldreq	r4, [r5, #12]
 8002c6a:	e7e6      	b.n	8002c3a <__swsetup_r+0x1e>
 8002c6c:	0751      	lsls	r1, r2, #29
 8002c6e:	d512      	bpl.n	8002c96 <__swsetup_r+0x7a>
 8002c70:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002c72:	b141      	cbz	r1, 8002c86 <__swsetup_r+0x6a>
 8002c74:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002c78:	4299      	cmp	r1, r3
 8002c7a:	d002      	beq.n	8002c82 <__swsetup_r+0x66>
 8002c7c:	4630      	mov	r0, r6
 8002c7e:	f000 fa19 	bl	80030b4 <_free_r>
 8002c82:	2300      	movs	r3, #0
 8002c84:	6363      	str	r3, [r4, #52]	; 0x34
 8002c86:	89a3      	ldrh	r3, [r4, #12]
 8002c88:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002c8c:	81a3      	strh	r3, [r4, #12]
 8002c8e:	2300      	movs	r3, #0
 8002c90:	6063      	str	r3, [r4, #4]
 8002c92:	6923      	ldr	r3, [r4, #16]
 8002c94:	6023      	str	r3, [r4, #0]
 8002c96:	89a3      	ldrh	r3, [r4, #12]
 8002c98:	f043 0308 	orr.w	r3, r3, #8
 8002c9c:	81a3      	strh	r3, [r4, #12]
 8002c9e:	6923      	ldr	r3, [r4, #16]
 8002ca0:	b94b      	cbnz	r3, 8002cb6 <__swsetup_r+0x9a>
 8002ca2:	89a3      	ldrh	r3, [r4, #12]
 8002ca4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002ca8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002cac:	d003      	beq.n	8002cb6 <__swsetup_r+0x9a>
 8002cae:	4621      	mov	r1, r4
 8002cb0:	4630      	mov	r0, r6
 8002cb2:	f000 f9bf 	bl	8003034 <__smakebuf_r>
 8002cb6:	89a2      	ldrh	r2, [r4, #12]
 8002cb8:	f012 0301 	ands.w	r3, r2, #1
 8002cbc:	d00c      	beq.n	8002cd8 <__swsetup_r+0xbc>
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	60a3      	str	r3, [r4, #8]
 8002cc2:	6963      	ldr	r3, [r4, #20]
 8002cc4:	425b      	negs	r3, r3
 8002cc6:	61a3      	str	r3, [r4, #24]
 8002cc8:	6923      	ldr	r3, [r4, #16]
 8002cca:	b953      	cbnz	r3, 8002ce2 <__swsetup_r+0xc6>
 8002ccc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002cd0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8002cd4:	d1ba      	bne.n	8002c4c <__swsetup_r+0x30>
 8002cd6:	bd70      	pop	{r4, r5, r6, pc}
 8002cd8:	0792      	lsls	r2, r2, #30
 8002cda:	bf58      	it	pl
 8002cdc:	6963      	ldrpl	r3, [r4, #20]
 8002cde:	60a3      	str	r3, [r4, #8]
 8002ce0:	e7f2      	b.n	8002cc8 <__swsetup_r+0xac>
 8002ce2:	2000      	movs	r0, #0
 8002ce4:	e7f7      	b.n	8002cd6 <__swsetup_r+0xba>
 8002ce6:	bf00      	nop
 8002ce8:	20000010 	.word	0x20000010
 8002cec:	08003fa4 	.word	0x08003fa4
 8002cf0:	08003fc4 	.word	0x08003fc4
 8002cf4:	08003f84 	.word	0x08003f84

08002cf8 <__sflush_r>:
 8002cf8:	898a      	ldrh	r2, [r1, #12]
 8002cfa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002cfe:	4605      	mov	r5, r0
 8002d00:	0710      	lsls	r0, r2, #28
 8002d02:	460c      	mov	r4, r1
 8002d04:	d458      	bmi.n	8002db8 <__sflush_r+0xc0>
 8002d06:	684b      	ldr	r3, [r1, #4]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	dc05      	bgt.n	8002d18 <__sflush_r+0x20>
 8002d0c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	dc02      	bgt.n	8002d18 <__sflush_r+0x20>
 8002d12:	2000      	movs	r0, #0
 8002d14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002d18:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002d1a:	2e00      	cmp	r6, #0
 8002d1c:	d0f9      	beq.n	8002d12 <__sflush_r+0x1a>
 8002d1e:	2300      	movs	r3, #0
 8002d20:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002d24:	682f      	ldr	r7, [r5, #0]
 8002d26:	6a21      	ldr	r1, [r4, #32]
 8002d28:	602b      	str	r3, [r5, #0]
 8002d2a:	d032      	beq.n	8002d92 <__sflush_r+0x9a>
 8002d2c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002d2e:	89a3      	ldrh	r3, [r4, #12]
 8002d30:	075a      	lsls	r2, r3, #29
 8002d32:	d505      	bpl.n	8002d40 <__sflush_r+0x48>
 8002d34:	6863      	ldr	r3, [r4, #4]
 8002d36:	1ac0      	subs	r0, r0, r3
 8002d38:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002d3a:	b10b      	cbz	r3, 8002d40 <__sflush_r+0x48>
 8002d3c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002d3e:	1ac0      	subs	r0, r0, r3
 8002d40:	2300      	movs	r3, #0
 8002d42:	4602      	mov	r2, r0
 8002d44:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002d46:	6a21      	ldr	r1, [r4, #32]
 8002d48:	4628      	mov	r0, r5
 8002d4a:	47b0      	blx	r6
 8002d4c:	1c43      	adds	r3, r0, #1
 8002d4e:	89a3      	ldrh	r3, [r4, #12]
 8002d50:	d106      	bne.n	8002d60 <__sflush_r+0x68>
 8002d52:	6829      	ldr	r1, [r5, #0]
 8002d54:	291d      	cmp	r1, #29
 8002d56:	d848      	bhi.n	8002dea <__sflush_r+0xf2>
 8002d58:	4a29      	ldr	r2, [pc, #164]	; (8002e00 <__sflush_r+0x108>)
 8002d5a:	40ca      	lsrs	r2, r1
 8002d5c:	07d6      	lsls	r6, r2, #31
 8002d5e:	d544      	bpl.n	8002dea <__sflush_r+0xf2>
 8002d60:	2200      	movs	r2, #0
 8002d62:	6062      	str	r2, [r4, #4]
 8002d64:	04d9      	lsls	r1, r3, #19
 8002d66:	6922      	ldr	r2, [r4, #16]
 8002d68:	6022      	str	r2, [r4, #0]
 8002d6a:	d504      	bpl.n	8002d76 <__sflush_r+0x7e>
 8002d6c:	1c42      	adds	r2, r0, #1
 8002d6e:	d101      	bne.n	8002d74 <__sflush_r+0x7c>
 8002d70:	682b      	ldr	r3, [r5, #0]
 8002d72:	b903      	cbnz	r3, 8002d76 <__sflush_r+0x7e>
 8002d74:	6560      	str	r0, [r4, #84]	; 0x54
 8002d76:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002d78:	602f      	str	r7, [r5, #0]
 8002d7a:	2900      	cmp	r1, #0
 8002d7c:	d0c9      	beq.n	8002d12 <__sflush_r+0x1a>
 8002d7e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002d82:	4299      	cmp	r1, r3
 8002d84:	d002      	beq.n	8002d8c <__sflush_r+0x94>
 8002d86:	4628      	mov	r0, r5
 8002d88:	f000 f994 	bl	80030b4 <_free_r>
 8002d8c:	2000      	movs	r0, #0
 8002d8e:	6360      	str	r0, [r4, #52]	; 0x34
 8002d90:	e7c0      	b.n	8002d14 <__sflush_r+0x1c>
 8002d92:	2301      	movs	r3, #1
 8002d94:	4628      	mov	r0, r5
 8002d96:	47b0      	blx	r6
 8002d98:	1c41      	adds	r1, r0, #1
 8002d9a:	d1c8      	bne.n	8002d2e <__sflush_r+0x36>
 8002d9c:	682b      	ldr	r3, [r5, #0]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d0c5      	beq.n	8002d2e <__sflush_r+0x36>
 8002da2:	2b1d      	cmp	r3, #29
 8002da4:	d001      	beq.n	8002daa <__sflush_r+0xb2>
 8002da6:	2b16      	cmp	r3, #22
 8002da8:	d101      	bne.n	8002dae <__sflush_r+0xb6>
 8002daa:	602f      	str	r7, [r5, #0]
 8002dac:	e7b1      	b.n	8002d12 <__sflush_r+0x1a>
 8002dae:	89a3      	ldrh	r3, [r4, #12]
 8002db0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002db4:	81a3      	strh	r3, [r4, #12]
 8002db6:	e7ad      	b.n	8002d14 <__sflush_r+0x1c>
 8002db8:	690f      	ldr	r7, [r1, #16]
 8002dba:	2f00      	cmp	r7, #0
 8002dbc:	d0a9      	beq.n	8002d12 <__sflush_r+0x1a>
 8002dbe:	0793      	lsls	r3, r2, #30
 8002dc0:	680e      	ldr	r6, [r1, #0]
 8002dc2:	bf08      	it	eq
 8002dc4:	694b      	ldreq	r3, [r1, #20]
 8002dc6:	600f      	str	r7, [r1, #0]
 8002dc8:	bf18      	it	ne
 8002dca:	2300      	movne	r3, #0
 8002dcc:	eba6 0807 	sub.w	r8, r6, r7
 8002dd0:	608b      	str	r3, [r1, #8]
 8002dd2:	f1b8 0f00 	cmp.w	r8, #0
 8002dd6:	dd9c      	ble.n	8002d12 <__sflush_r+0x1a>
 8002dd8:	4643      	mov	r3, r8
 8002dda:	463a      	mov	r2, r7
 8002ddc:	6a21      	ldr	r1, [r4, #32]
 8002dde:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002de0:	4628      	mov	r0, r5
 8002de2:	47b0      	blx	r6
 8002de4:	2800      	cmp	r0, #0
 8002de6:	dc06      	bgt.n	8002df6 <__sflush_r+0xfe>
 8002de8:	89a3      	ldrh	r3, [r4, #12]
 8002dea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002dee:	81a3      	strh	r3, [r4, #12]
 8002df0:	f04f 30ff 	mov.w	r0, #4294967295
 8002df4:	e78e      	b.n	8002d14 <__sflush_r+0x1c>
 8002df6:	4407      	add	r7, r0
 8002df8:	eba8 0800 	sub.w	r8, r8, r0
 8002dfc:	e7e9      	b.n	8002dd2 <__sflush_r+0xda>
 8002dfe:	bf00      	nop
 8002e00:	20400001 	.word	0x20400001

08002e04 <_fflush_r>:
 8002e04:	b538      	push	{r3, r4, r5, lr}
 8002e06:	690b      	ldr	r3, [r1, #16]
 8002e08:	4605      	mov	r5, r0
 8002e0a:	460c      	mov	r4, r1
 8002e0c:	b1db      	cbz	r3, 8002e46 <_fflush_r+0x42>
 8002e0e:	b118      	cbz	r0, 8002e18 <_fflush_r+0x14>
 8002e10:	6983      	ldr	r3, [r0, #24]
 8002e12:	b90b      	cbnz	r3, 8002e18 <_fflush_r+0x14>
 8002e14:	f000 f860 	bl	8002ed8 <__sinit>
 8002e18:	4b0c      	ldr	r3, [pc, #48]	; (8002e4c <_fflush_r+0x48>)
 8002e1a:	429c      	cmp	r4, r3
 8002e1c:	d109      	bne.n	8002e32 <_fflush_r+0x2e>
 8002e1e:	686c      	ldr	r4, [r5, #4]
 8002e20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002e24:	b17b      	cbz	r3, 8002e46 <_fflush_r+0x42>
 8002e26:	4621      	mov	r1, r4
 8002e28:	4628      	mov	r0, r5
 8002e2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002e2e:	f7ff bf63 	b.w	8002cf8 <__sflush_r>
 8002e32:	4b07      	ldr	r3, [pc, #28]	; (8002e50 <_fflush_r+0x4c>)
 8002e34:	429c      	cmp	r4, r3
 8002e36:	d101      	bne.n	8002e3c <_fflush_r+0x38>
 8002e38:	68ac      	ldr	r4, [r5, #8]
 8002e3a:	e7f1      	b.n	8002e20 <_fflush_r+0x1c>
 8002e3c:	4b05      	ldr	r3, [pc, #20]	; (8002e54 <_fflush_r+0x50>)
 8002e3e:	429c      	cmp	r4, r3
 8002e40:	bf08      	it	eq
 8002e42:	68ec      	ldreq	r4, [r5, #12]
 8002e44:	e7ec      	b.n	8002e20 <_fflush_r+0x1c>
 8002e46:	2000      	movs	r0, #0
 8002e48:	bd38      	pop	{r3, r4, r5, pc}
 8002e4a:	bf00      	nop
 8002e4c:	08003fa4 	.word	0x08003fa4
 8002e50:	08003fc4 	.word	0x08003fc4
 8002e54:	08003f84 	.word	0x08003f84

08002e58 <std>:
 8002e58:	2300      	movs	r3, #0
 8002e5a:	b510      	push	{r4, lr}
 8002e5c:	4604      	mov	r4, r0
 8002e5e:	e9c0 3300 	strd	r3, r3, [r0]
 8002e62:	6083      	str	r3, [r0, #8]
 8002e64:	8181      	strh	r1, [r0, #12]
 8002e66:	6643      	str	r3, [r0, #100]	; 0x64
 8002e68:	81c2      	strh	r2, [r0, #14]
 8002e6a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002e6e:	6183      	str	r3, [r0, #24]
 8002e70:	4619      	mov	r1, r3
 8002e72:	2208      	movs	r2, #8
 8002e74:	305c      	adds	r0, #92	; 0x5c
 8002e76:	f7ff fdfb 	bl	8002a70 <memset>
 8002e7a:	4b05      	ldr	r3, [pc, #20]	; (8002e90 <std+0x38>)
 8002e7c:	6263      	str	r3, [r4, #36]	; 0x24
 8002e7e:	4b05      	ldr	r3, [pc, #20]	; (8002e94 <std+0x3c>)
 8002e80:	62a3      	str	r3, [r4, #40]	; 0x28
 8002e82:	4b05      	ldr	r3, [pc, #20]	; (8002e98 <std+0x40>)
 8002e84:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002e86:	4b05      	ldr	r3, [pc, #20]	; (8002e9c <std+0x44>)
 8002e88:	6224      	str	r4, [r4, #32]
 8002e8a:	6323      	str	r3, [r4, #48]	; 0x30
 8002e8c:	bd10      	pop	{r4, pc}
 8002e8e:	bf00      	nop
 8002e90:	080037b5 	.word	0x080037b5
 8002e94:	080037d7 	.word	0x080037d7
 8002e98:	0800380f 	.word	0x0800380f
 8002e9c:	08003833 	.word	0x08003833

08002ea0 <_cleanup_r>:
 8002ea0:	4901      	ldr	r1, [pc, #4]	; (8002ea8 <_cleanup_r+0x8>)
 8002ea2:	f000 b885 	b.w	8002fb0 <_fwalk_reent>
 8002ea6:	bf00      	nop
 8002ea8:	08002e05 	.word	0x08002e05

08002eac <__sfmoreglue>:
 8002eac:	b570      	push	{r4, r5, r6, lr}
 8002eae:	1e4a      	subs	r2, r1, #1
 8002eb0:	2568      	movs	r5, #104	; 0x68
 8002eb2:	4355      	muls	r5, r2
 8002eb4:	460e      	mov	r6, r1
 8002eb6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002eba:	f000 f949 	bl	8003150 <_malloc_r>
 8002ebe:	4604      	mov	r4, r0
 8002ec0:	b140      	cbz	r0, 8002ed4 <__sfmoreglue+0x28>
 8002ec2:	2100      	movs	r1, #0
 8002ec4:	e9c0 1600 	strd	r1, r6, [r0]
 8002ec8:	300c      	adds	r0, #12
 8002eca:	60a0      	str	r0, [r4, #8]
 8002ecc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002ed0:	f7ff fdce 	bl	8002a70 <memset>
 8002ed4:	4620      	mov	r0, r4
 8002ed6:	bd70      	pop	{r4, r5, r6, pc}

08002ed8 <__sinit>:
 8002ed8:	6983      	ldr	r3, [r0, #24]
 8002eda:	b510      	push	{r4, lr}
 8002edc:	4604      	mov	r4, r0
 8002ede:	bb33      	cbnz	r3, 8002f2e <__sinit+0x56>
 8002ee0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8002ee4:	6503      	str	r3, [r0, #80]	; 0x50
 8002ee6:	4b12      	ldr	r3, [pc, #72]	; (8002f30 <__sinit+0x58>)
 8002ee8:	4a12      	ldr	r2, [pc, #72]	; (8002f34 <__sinit+0x5c>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	6282      	str	r2, [r0, #40]	; 0x28
 8002eee:	4298      	cmp	r0, r3
 8002ef0:	bf04      	itt	eq
 8002ef2:	2301      	moveq	r3, #1
 8002ef4:	6183      	streq	r3, [r0, #24]
 8002ef6:	f000 f81f 	bl	8002f38 <__sfp>
 8002efa:	6060      	str	r0, [r4, #4]
 8002efc:	4620      	mov	r0, r4
 8002efe:	f000 f81b 	bl	8002f38 <__sfp>
 8002f02:	60a0      	str	r0, [r4, #8]
 8002f04:	4620      	mov	r0, r4
 8002f06:	f000 f817 	bl	8002f38 <__sfp>
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	60e0      	str	r0, [r4, #12]
 8002f0e:	2104      	movs	r1, #4
 8002f10:	6860      	ldr	r0, [r4, #4]
 8002f12:	f7ff ffa1 	bl	8002e58 <std>
 8002f16:	2201      	movs	r2, #1
 8002f18:	2109      	movs	r1, #9
 8002f1a:	68a0      	ldr	r0, [r4, #8]
 8002f1c:	f7ff ff9c 	bl	8002e58 <std>
 8002f20:	2202      	movs	r2, #2
 8002f22:	2112      	movs	r1, #18
 8002f24:	68e0      	ldr	r0, [r4, #12]
 8002f26:	f7ff ff97 	bl	8002e58 <std>
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	61a3      	str	r3, [r4, #24]
 8002f2e:	bd10      	pop	{r4, pc}
 8002f30:	08003f80 	.word	0x08003f80
 8002f34:	08002ea1 	.word	0x08002ea1

08002f38 <__sfp>:
 8002f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f3a:	4b1b      	ldr	r3, [pc, #108]	; (8002fa8 <__sfp+0x70>)
 8002f3c:	681e      	ldr	r6, [r3, #0]
 8002f3e:	69b3      	ldr	r3, [r6, #24]
 8002f40:	4607      	mov	r7, r0
 8002f42:	b913      	cbnz	r3, 8002f4a <__sfp+0x12>
 8002f44:	4630      	mov	r0, r6
 8002f46:	f7ff ffc7 	bl	8002ed8 <__sinit>
 8002f4a:	3648      	adds	r6, #72	; 0x48
 8002f4c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002f50:	3b01      	subs	r3, #1
 8002f52:	d503      	bpl.n	8002f5c <__sfp+0x24>
 8002f54:	6833      	ldr	r3, [r6, #0]
 8002f56:	b133      	cbz	r3, 8002f66 <__sfp+0x2e>
 8002f58:	6836      	ldr	r6, [r6, #0]
 8002f5a:	e7f7      	b.n	8002f4c <__sfp+0x14>
 8002f5c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002f60:	b16d      	cbz	r5, 8002f7e <__sfp+0x46>
 8002f62:	3468      	adds	r4, #104	; 0x68
 8002f64:	e7f4      	b.n	8002f50 <__sfp+0x18>
 8002f66:	2104      	movs	r1, #4
 8002f68:	4638      	mov	r0, r7
 8002f6a:	f7ff ff9f 	bl	8002eac <__sfmoreglue>
 8002f6e:	6030      	str	r0, [r6, #0]
 8002f70:	2800      	cmp	r0, #0
 8002f72:	d1f1      	bne.n	8002f58 <__sfp+0x20>
 8002f74:	230c      	movs	r3, #12
 8002f76:	603b      	str	r3, [r7, #0]
 8002f78:	4604      	mov	r4, r0
 8002f7a:	4620      	mov	r0, r4
 8002f7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002f7e:	4b0b      	ldr	r3, [pc, #44]	; (8002fac <__sfp+0x74>)
 8002f80:	6665      	str	r5, [r4, #100]	; 0x64
 8002f82:	e9c4 5500 	strd	r5, r5, [r4]
 8002f86:	60a5      	str	r5, [r4, #8]
 8002f88:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8002f8c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8002f90:	2208      	movs	r2, #8
 8002f92:	4629      	mov	r1, r5
 8002f94:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002f98:	f7ff fd6a 	bl	8002a70 <memset>
 8002f9c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002fa0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002fa4:	e7e9      	b.n	8002f7a <__sfp+0x42>
 8002fa6:	bf00      	nop
 8002fa8:	08003f80 	.word	0x08003f80
 8002fac:	ffff0001 	.word	0xffff0001

08002fb0 <_fwalk_reent>:
 8002fb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002fb4:	4680      	mov	r8, r0
 8002fb6:	4689      	mov	r9, r1
 8002fb8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002fbc:	2600      	movs	r6, #0
 8002fbe:	b914      	cbnz	r4, 8002fc6 <_fwalk_reent+0x16>
 8002fc0:	4630      	mov	r0, r6
 8002fc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002fc6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8002fca:	3f01      	subs	r7, #1
 8002fcc:	d501      	bpl.n	8002fd2 <_fwalk_reent+0x22>
 8002fce:	6824      	ldr	r4, [r4, #0]
 8002fd0:	e7f5      	b.n	8002fbe <_fwalk_reent+0xe>
 8002fd2:	89ab      	ldrh	r3, [r5, #12]
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	d907      	bls.n	8002fe8 <_fwalk_reent+0x38>
 8002fd8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002fdc:	3301      	adds	r3, #1
 8002fde:	d003      	beq.n	8002fe8 <_fwalk_reent+0x38>
 8002fe0:	4629      	mov	r1, r5
 8002fe2:	4640      	mov	r0, r8
 8002fe4:	47c8      	blx	r9
 8002fe6:	4306      	orrs	r6, r0
 8002fe8:	3568      	adds	r5, #104	; 0x68
 8002fea:	e7ee      	b.n	8002fca <_fwalk_reent+0x1a>

08002fec <__swhatbuf_r>:
 8002fec:	b570      	push	{r4, r5, r6, lr}
 8002fee:	460e      	mov	r6, r1
 8002ff0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002ff4:	2900      	cmp	r1, #0
 8002ff6:	b096      	sub	sp, #88	; 0x58
 8002ff8:	4614      	mov	r4, r2
 8002ffa:	461d      	mov	r5, r3
 8002ffc:	da07      	bge.n	800300e <__swhatbuf_r+0x22>
 8002ffe:	2300      	movs	r3, #0
 8003000:	602b      	str	r3, [r5, #0]
 8003002:	89b3      	ldrh	r3, [r6, #12]
 8003004:	061a      	lsls	r2, r3, #24
 8003006:	d410      	bmi.n	800302a <__swhatbuf_r+0x3e>
 8003008:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800300c:	e00e      	b.n	800302c <__swhatbuf_r+0x40>
 800300e:	466a      	mov	r2, sp
 8003010:	f000 fc36 	bl	8003880 <_fstat_r>
 8003014:	2800      	cmp	r0, #0
 8003016:	dbf2      	blt.n	8002ffe <__swhatbuf_r+0x12>
 8003018:	9a01      	ldr	r2, [sp, #4]
 800301a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800301e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003022:	425a      	negs	r2, r3
 8003024:	415a      	adcs	r2, r3
 8003026:	602a      	str	r2, [r5, #0]
 8003028:	e7ee      	b.n	8003008 <__swhatbuf_r+0x1c>
 800302a:	2340      	movs	r3, #64	; 0x40
 800302c:	2000      	movs	r0, #0
 800302e:	6023      	str	r3, [r4, #0]
 8003030:	b016      	add	sp, #88	; 0x58
 8003032:	bd70      	pop	{r4, r5, r6, pc}

08003034 <__smakebuf_r>:
 8003034:	898b      	ldrh	r3, [r1, #12]
 8003036:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003038:	079d      	lsls	r5, r3, #30
 800303a:	4606      	mov	r6, r0
 800303c:	460c      	mov	r4, r1
 800303e:	d507      	bpl.n	8003050 <__smakebuf_r+0x1c>
 8003040:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003044:	6023      	str	r3, [r4, #0]
 8003046:	6123      	str	r3, [r4, #16]
 8003048:	2301      	movs	r3, #1
 800304a:	6163      	str	r3, [r4, #20]
 800304c:	b002      	add	sp, #8
 800304e:	bd70      	pop	{r4, r5, r6, pc}
 8003050:	ab01      	add	r3, sp, #4
 8003052:	466a      	mov	r2, sp
 8003054:	f7ff ffca 	bl	8002fec <__swhatbuf_r>
 8003058:	9900      	ldr	r1, [sp, #0]
 800305a:	4605      	mov	r5, r0
 800305c:	4630      	mov	r0, r6
 800305e:	f000 f877 	bl	8003150 <_malloc_r>
 8003062:	b948      	cbnz	r0, 8003078 <__smakebuf_r+0x44>
 8003064:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003068:	059a      	lsls	r2, r3, #22
 800306a:	d4ef      	bmi.n	800304c <__smakebuf_r+0x18>
 800306c:	f023 0303 	bic.w	r3, r3, #3
 8003070:	f043 0302 	orr.w	r3, r3, #2
 8003074:	81a3      	strh	r3, [r4, #12]
 8003076:	e7e3      	b.n	8003040 <__smakebuf_r+0xc>
 8003078:	4b0d      	ldr	r3, [pc, #52]	; (80030b0 <__smakebuf_r+0x7c>)
 800307a:	62b3      	str	r3, [r6, #40]	; 0x28
 800307c:	89a3      	ldrh	r3, [r4, #12]
 800307e:	6020      	str	r0, [r4, #0]
 8003080:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003084:	81a3      	strh	r3, [r4, #12]
 8003086:	9b00      	ldr	r3, [sp, #0]
 8003088:	6163      	str	r3, [r4, #20]
 800308a:	9b01      	ldr	r3, [sp, #4]
 800308c:	6120      	str	r0, [r4, #16]
 800308e:	b15b      	cbz	r3, 80030a8 <__smakebuf_r+0x74>
 8003090:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003094:	4630      	mov	r0, r6
 8003096:	f000 fc05 	bl	80038a4 <_isatty_r>
 800309a:	b128      	cbz	r0, 80030a8 <__smakebuf_r+0x74>
 800309c:	89a3      	ldrh	r3, [r4, #12]
 800309e:	f023 0303 	bic.w	r3, r3, #3
 80030a2:	f043 0301 	orr.w	r3, r3, #1
 80030a6:	81a3      	strh	r3, [r4, #12]
 80030a8:	89a3      	ldrh	r3, [r4, #12]
 80030aa:	431d      	orrs	r5, r3
 80030ac:	81a5      	strh	r5, [r4, #12]
 80030ae:	e7cd      	b.n	800304c <__smakebuf_r+0x18>
 80030b0:	08002ea1 	.word	0x08002ea1

080030b4 <_free_r>:
 80030b4:	b538      	push	{r3, r4, r5, lr}
 80030b6:	4605      	mov	r5, r0
 80030b8:	2900      	cmp	r1, #0
 80030ba:	d045      	beq.n	8003148 <_free_r+0x94>
 80030bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80030c0:	1f0c      	subs	r4, r1, #4
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	bfb8      	it	lt
 80030c6:	18e4      	addlt	r4, r4, r3
 80030c8:	f000 fc0e 	bl	80038e8 <__malloc_lock>
 80030cc:	4a1f      	ldr	r2, [pc, #124]	; (800314c <_free_r+0x98>)
 80030ce:	6813      	ldr	r3, [r2, #0]
 80030d0:	4610      	mov	r0, r2
 80030d2:	b933      	cbnz	r3, 80030e2 <_free_r+0x2e>
 80030d4:	6063      	str	r3, [r4, #4]
 80030d6:	6014      	str	r4, [r2, #0]
 80030d8:	4628      	mov	r0, r5
 80030da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80030de:	f000 bc04 	b.w	80038ea <__malloc_unlock>
 80030e2:	42a3      	cmp	r3, r4
 80030e4:	d90c      	bls.n	8003100 <_free_r+0x4c>
 80030e6:	6821      	ldr	r1, [r4, #0]
 80030e8:	1862      	adds	r2, r4, r1
 80030ea:	4293      	cmp	r3, r2
 80030ec:	bf04      	itt	eq
 80030ee:	681a      	ldreq	r2, [r3, #0]
 80030f0:	685b      	ldreq	r3, [r3, #4]
 80030f2:	6063      	str	r3, [r4, #4]
 80030f4:	bf04      	itt	eq
 80030f6:	1852      	addeq	r2, r2, r1
 80030f8:	6022      	streq	r2, [r4, #0]
 80030fa:	6004      	str	r4, [r0, #0]
 80030fc:	e7ec      	b.n	80030d8 <_free_r+0x24>
 80030fe:	4613      	mov	r3, r2
 8003100:	685a      	ldr	r2, [r3, #4]
 8003102:	b10a      	cbz	r2, 8003108 <_free_r+0x54>
 8003104:	42a2      	cmp	r2, r4
 8003106:	d9fa      	bls.n	80030fe <_free_r+0x4a>
 8003108:	6819      	ldr	r1, [r3, #0]
 800310a:	1858      	adds	r0, r3, r1
 800310c:	42a0      	cmp	r0, r4
 800310e:	d10b      	bne.n	8003128 <_free_r+0x74>
 8003110:	6820      	ldr	r0, [r4, #0]
 8003112:	4401      	add	r1, r0
 8003114:	1858      	adds	r0, r3, r1
 8003116:	4282      	cmp	r2, r0
 8003118:	6019      	str	r1, [r3, #0]
 800311a:	d1dd      	bne.n	80030d8 <_free_r+0x24>
 800311c:	6810      	ldr	r0, [r2, #0]
 800311e:	6852      	ldr	r2, [r2, #4]
 8003120:	605a      	str	r2, [r3, #4]
 8003122:	4401      	add	r1, r0
 8003124:	6019      	str	r1, [r3, #0]
 8003126:	e7d7      	b.n	80030d8 <_free_r+0x24>
 8003128:	d902      	bls.n	8003130 <_free_r+0x7c>
 800312a:	230c      	movs	r3, #12
 800312c:	602b      	str	r3, [r5, #0]
 800312e:	e7d3      	b.n	80030d8 <_free_r+0x24>
 8003130:	6820      	ldr	r0, [r4, #0]
 8003132:	1821      	adds	r1, r4, r0
 8003134:	428a      	cmp	r2, r1
 8003136:	bf04      	itt	eq
 8003138:	6811      	ldreq	r1, [r2, #0]
 800313a:	6852      	ldreq	r2, [r2, #4]
 800313c:	6062      	str	r2, [r4, #4]
 800313e:	bf04      	itt	eq
 8003140:	1809      	addeq	r1, r1, r0
 8003142:	6021      	streq	r1, [r4, #0]
 8003144:	605c      	str	r4, [r3, #4]
 8003146:	e7c7      	b.n	80030d8 <_free_r+0x24>
 8003148:	bd38      	pop	{r3, r4, r5, pc}
 800314a:	bf00      	nop
 800314c:	200000a0 	.word	0x200000a0

08003150 <_malloc_r>:
 8003150:	b570      	push	{r4, r5, r6, lr}
 8003152:	1ccd      	adds	r5, r1, #3
 8003154:	f025 0503 	bic.w	r5, r5, #3
 8003158:	3508      	adds	r5, #8
 800315a:	2d0c      	cmp	r5, #12
 800315c:	bf38      	it	cc
 800315e:	250c      	movcc	r5, #12
 8003160:	2d00      	cmp	r5, #0
 8003162:	4606      	mov	r6, r0
 8003164:	db01      	blt.n	800316a <_malloc_r+0x1a>
 8003166:	42a9      	cmp	r1, r5
 8003168:	d903      	bls.n	8003172 <_malloc_r+0x22>
 800316a:	230c      	movs	r3, #12
 800316c:	6033      	str	r3, [r6, #0]
 800316e:	2000      	movs	r0, #0
 8003170:	bd70      	pop	{r4, r5, r6, pc}
 8003172:	f000 fbb9 	bl	80038e8 <__malloc_lock>
 8003176:	4a21      	ldr	r2, [pc, #132]	; (80031fc <_malloc_r+0xac>)
 8003178:	6814      	ldr	r4, [r2, #0]
 800317a:	4621      	mov	r1, r4
 800317c:	b991      	cbnz	r1, 80031a4 <_malloc_r+0x54>
 800317e:	4c20      	ldr	r4, [pc, #128]	; (8003200 <_malloc_r+0xb0>)
 8003180:	6823      	ldr	r3, [r4, #0]
 8003182:	b91b      	cbnz	r3, 800318c <_malloc_r+0x3c>
 8003184:	4630      	mov	r0, r6
 8003186:	f000 fb05 	bl	8003794 <_sbrk_r>
 800318a:	6020      	str	r0, [r4, #0]
 800318c:	4629      	mov	r1, r5
 800318e:	4630      	mov	r0, r6
 8003190:	f000 fb00 	bl	8003794 <_sbrk_r>
 8003194:	1c43      	adds	r3, r0, #1
 8003196:	d124      	bne.n	80031e2 <_malloc_r+0x92>
 8003198:	230c      	movs	r3, #12
 800319a:	6033      	str	r3, [r6, #0]
 800319c:	4630      	mov	r0, r6
 800319e:	f000 fba4 	bl	80038ea <__malloc_unlock>
 80031a2:	e7e4      	b.n	800316e <_malloc_r+0x1e>
 80031a4:	680b      	ldr	r3, [r1, #0]
 80031a6:	1b5b      	subs	r3, r3, r5
 80031a8:	d418      	bmi.n	80031dc <_malloc_r+0x8c>
 80031aa:	2b0b      	cmp	r3, #11
 80031ac:	d90f      	bls.n	80031ce <_malloc_r+0x7e>
 80031ae:	600b      	str	r3, [r1, #0]
 80031b0:	50cd      	str	r5, [r1, r3]
 80031b2:	18cc      	adds	r4, r1, r3
 80031b4:	4630      	mov	r0, r6
 80031b6:	f000 fb98 	bl	80038ea <__malloc_unlock>
 80031ba:	f104 000b 	add.w	r0, r4, #11
 80031be:	1d23      	adds	r3, r4, #4
 80031c0:	f020 0007 	bic.w	r0, r0, #7
 80031c4:	1ac3      	subs	r3, r0, r3
 80031c6:	d0d3      	beq.n	8003170 <_malloc_r+0x20>
 80031c8:	425a      	negs	r2, r3
 80031ca:	50e2      	str	r2, [r4, r3]
 80031cc:	e7d0      	b.n	8003170 <_malloc_r+0x20>
 80031ce:	428c      	cmp	r4, r1
 80031d0:	684b      	ldr	r3, [r1, #4]
 80031d2:	bf16      	itet	ne
 80031d4:	6063      	strne	r3, [r4, #4]
 80031d6:	6013      	streq	r3, [r2, #0]
 80031d8:	460c      	movne	r4, r1
 80031da:	e7eb      	b.n	80031b4 <_malloc_r+0x64>
 80031dc:	460c      	mov	r4, r1
 80031de:	6849      	ldr	r1, [r1, #4]
 80031e0:	e7cc      	b.n	800317c <_malloc_r+0x2c>
 80031e2:	1cc4      	adds	r4, r0, #3
 80031e4:	f024 0403 	bic.w	r4, r4, #3
 80031e8:	42a0      	cmp	r0, r4
 80031ea:	d005      	beq.n	80031f8 <_malloc_r+0xa8>
 80031ec:	1a21      	subs	r1, r4, r0
 80031ee:	4630      	mov	r0, r6
 80031f0:	f000 fad0 	bl	8003794 <_sbrk_r>
 80031f4:	3001      	adds	r0, #1
 80031f6:	d0cf      	beq.n	8003198 <_malloc_r+0x48>
 80031f8:	6025      	str	r5, [r4, #0]
 80031fa:	e7db      	b.n	80031b4 <_malloc_r+0x64>
 80031fc:	200000a0 	.word	0x200000a0
 8003200:	200000a4 	.word	0x200000a4

08003204 <__sfputc_r>:
 8003204:	6893      	ldr	r3, [r2, #8]
 8003206:	3b01      	subs	r3, #1
 8003208:	2b00      	cmp	r3, #0
 800320a:	b410      	push	{r4}
 800320c:	6093      	str	r3, [r2, #8]
 800320e:	da08      	bge.n	8003222 <__sfputc_r+0x1e>
 8003210:	6994      	ldr	r4, [r2, #24]
 8003212:	42a3      	cmp	r3, r4
 8003214:	db01      	blt.n	800321a <__sfputc_r+0x16>
 8003216:	290a      	cmp	r1, #10
 8003218:	d103      	bne.n	8003222 <__sfputc_r+0x1e>
 800321a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800321e:	f7ff bcab 	b.w	8002b78 <__swbuf_r>
 8003222:	6813      	ldr	r3, [r2, #0]
 8003224:	1c58      	adds	r0, r3, #1
 8003226:	6010      	str	r0, [r2, #0]
 8003228:	7019      	strb	r1, [r3, #0]
 800322a:	4608      	mov	r0, r1
 800322c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003230:	4770      	bx	lr

08003232 <__sfputs_r>:
 8003232:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003234:	4606      	mov	r6, r0
 8003236:	460f      	mov	r7, r1
 8003238:	4614      	mov	r4, r2
 800323a:	18d5      	adds	r5, r2, r3
 800323c:	42ac      	cmp	r4, r5
 800323e:	d101      	bne.n	8003244 <__sfputs_r+0x12>
 8003240:	2000      	movs	r0, #0
 8003242:	e007      	b.n	8003254 <__sfputs_r+0x22>
 8003244:	463a      	mov	r2, r7
 8003246:	f814 1b01 	ldrb.w	r1, [r4], #1
 800324a:	4630      	mov	r0, r6
 800324c:	f7ff ffda 	bl	8003204 <__sfputc_r>
 8003250:	1c43      	adds	r3, r0, #1
 8003252:	d1f3      	bne.n	800323c <__sfputs_r+0xa>
 8003254:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003258 <_vfiprintf_r>:
 8003258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800325c:	460c      	mov	r4, r1
 800325e:	b09d      	sub	sp, #116	; 0x74
 8003260:	4617      	mov	r7, r2
 8003262:	461d      	mov	r5, r3
 8003264:	4606      	mov	r6, r0
 8003266:	b118      	cbz	r0, 8003270 <_vfiprintf_r+0x18>
 8003268:	6983      	ldr	r3, [r0, #24]
 800326a:	b90b      	cbnz	r3, 8003270 <_vfiprintf_r+0x18>
 800326c:	f7ff fe34 	bl	8002ed8 <__sinit>
 8003270:	4b7c      	ldr	r3, [pc, #496]	; (8003464 <_vfiprintf_r+0x20c>)
 8003272:	429c      	cmp	r4, r3
 8003274:	d158      	bne.n	8003328 <_vfiprintf_r+0xd0>
 8003276:	6874      	ldr	r4, [r6, #4]
 8003278:	89a3      	ldrh	r3, [r4, #12]
 800327a:	0718      	lsls	r0, r3, #28
 800327c:	d55e      	bpl.n	800333c <_vfiprintf_r+0xe4>
 800327e:	6923      	ldr	r3, [r4, #16]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d05b      	beq.n	800333c <_vfiprintf_r+0xe4>
 8003284:	2300      	movs	r3, #0
 8003286:	9309      	str	r3, [sp, #36]	; 0x24
 8003288:	2320      	movs	r3, #32
 800328a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800328e:	2330      	movs	r3, #48	; 0x30
 8003290:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003294:	9503      	str	r5, [sp, #12]
 8003296:	f04f 0b01 	mov.w	fp, #1
 800329a:	46b8      	mov	r8, r7
 800329c:	4645      	mov	r5, r8
 800329e:	f815 3b01 	ldrb.w	r3, [r5], #1
 80032a2:	b10b      	cbz	r3, 80032a8 <_vfiprintf_r+0x50>
 80032a4:	2b25      	cmp	r3, #37	; 0x25
 80032a6:	d154      	bne.n	8003352 <_vfiprintf_r+0xfa>
 80032a8:	ebb8 0a07 	subs.w	sl, r8, r7
 80032ac:	d00b      	beq.n	80032c6 <_vfiprintf_r+0x6e>
 80032ae:	4653      	mov	r3, sl
 80032b0:	463a      	mov	r2, r7
 80032b2:	4621      	mov	r1, r4
 80032b4:	4630      	mov	r0, r6
 80032b6:	f7ff ffbc 	bl	8003232 <__sfputs_r>
 80032ba:	3001      	adds	r0, #1
 80032bc:	f000 80c2 	beq.w	8003444 <_vfiprintf_r+0x1ec>
 80032c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80032c2:	4453      	add	r3, sl
 80032c4:	9309      	str	r3, [sp, #36]	; 0x24
 80032c6:	f898 3000 	ldrb.w	r3, [r8]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	f000 80ba 	beq.w	8003444 <_vfiprintf_r+0x1ec>
 80032d0:	2300      	movs	r3, #0
 80032d2:	f04f 32ff 	mov.w	r2, #4294967295
 80032d6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80032da:	9304      	str	r3, [sp, #16]
 80032dc:	9307      	str	r3, [sp, #28]
 80032de:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80032e2:	931a      	str	r3, [sp, #104]	; 0x68
 80032e4:	46a8      	mov	r8, r5
 80032e6:	2205      	movs	r2, #5
 80032e8:	f818 1b01 	ldrb.w	r1, [r8], #1
 80032ec:	485e      	ldr	r0, [pc, #376]	; (8003468 <_vfiprintf_r+0x210>)
 80032ee:	f7fc ff7f 	bl	80001f0 <memchr>
 80032f2:	9b04      	ldr	r3, [sp, #16]
 80032f4:	bb78      	cbnz	r0, 8003356 <_vfiprintf_r+0xfe>
 80032f6:	06d9      	lsls	r1, r3, #27
 80032f8:	bf44      	itt	mi
 80032fa:	2220      	movmi	r2, #32
 80032fc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003300:	071a      	lsls	r2, r3, #28
 8003302:	bf44      	itt	mi
 8003304:	222b      	movmi	r2, #43	; 0x2b
 8003306:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800330a:	782a      	ldrb	r2, [r5, #0]
 800330c:	2a2a      	cmp	r2, #42	; 0x2a
 800330e:	d02a      	beq.n	8003366 <_vfiprintf_r+0x10e>
 8003310:	9a07      	ldr	r2, [sp, #28]
 8003312:	46a8      	mov	r8, r5
 8003314:	2000      	movs	r0, #0
 8003316:	250a      	movs	r5, #10
 8003318:	4641      	mov	r1, r8
 800331a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800331e:	3b30      	subs	r3, #48	; 0x30
 8003320:	2b09      	cmp	r3, #9
 8003322:	d969      	bls.n	80033f8 <_vfiprintf_r+0x1a0>
 8003324:	b360      	cbz	r0, 8003380 <_vfiprintf_r+0x128>
 8003326:	e024      	b.n	8003372 <_vfiprintf_r+0x11a>
 8003328:	4b50      	ldr	r3, [pc, #320]	; (800346c <_vfiprintf_r+0x214>)
 800332a:	429c      	cmp	r4, r3
 800332c:	d101      	bne.n	8003332 <_vfiprintf_r+0xda>
 800332e:	68b4      	ldr	r4, [r6, #8]
 8003330:	e7a2      	b.n	8003278 <_vfiprintf_r+0x20>
 8003332:	4b4f      	ldr	r3, [pc, #316]	; (8003470 <_vfiprintf_r+0x218>)
 8003334:	429c      	cmp	r4, r3
 8003336:	bf08      	it	eq
 8003338:	68f4      	ldreq	r4, [r6, #12]
 800333a:	e79d      	b.n	8003278 <_vfiprintf_r+0x20>
 800333c:	4621      	mov	r1, r4
 800333e:	4630      	mov	r0, r6
 8003340:	f7ff fc6c 	bl	8002c1c <__swsetup_r>
 8003344:	2800      	cmp	r0, #0
 8003346:	d09d      	beq.n	8003284 <_vfiprintf_r+0x2c>
 8003348:	f04f 30ff 	mov.w	r0, #4294967295
 800334c:	b01d      	add	sp, #116	; 0x74
 800334e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003352:	46a8      	mov	r8, r5
 8003354:	e7a2      	b.n	800329c <_vfiprintf_r+0x44>
 8003356:	4a44      	ldr	r2, [pc, #272]	; (8003468 <_vfiprintf_r+0x210>)
 8003358:	1a80      	subs	r0, r0, r2
 800335a:	fa0b f000 	lsl.w	r0, fp, r0
 800335e:	4318      	orrs	r0, r3
 8003360:	9004      	str	r0, [sp, #16]
 8003362:	4645      	mov	r5, r8
 8003364:	e7be      	b.n	80032e4 <_vfiprintf_r+0x8c>
 8003366:	9a03      	ldr	r2, [sp, #12]
 8003368:	1d11      	adds	r1, r2, #4
 800336a:	6812      	ldr	r2, [r2, #0]
 800336c:	9103      	str	r1, [sp, #12]
 800336e:	2a00      	cmp	r2, #0
 8003370:	db01      	blt.n	8003376 <_vfiprintf_r+0x11e>
 8003372:	9207      	str	r2, [sp, #28]
 8003374:	e004      	b.n	8003380 <_vfiprintf_r+0x128>
 8003376:	4252      	negs	r2, r2
 8003378:	f043 0302 	orr.w	r3, r3, #2
 800337c:	9207      	str	r2, [sp, #28]
 800337e:	9304      	str	r3, [sp, #16]
 8003380:	f898 3000 	ldrb.w	r3, [r8]
 8003384:	2b2e      	cmp	r3, #46	; 0x2e
 8003386:	d10e      	bne.n	80033a6 <_vfiprintf_r+0x14e>
 8003388:	f898 3001 	ldrb.w	r3, [r8, #1]
 800338c:	2b2a      	cmp	r3, #42	; 0x2a
 800338e:	d138      	bne.n	8003402 <_vfiprintf_r+0x1aa>
 8003390:	9b03      	ldr	r3, [sp, #12]
 8003392:	1d1a      	adds	r2, r3, #4
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	9203      	str	r2, [sp, #12]
 8003398:	2b00      	cmp	r3, #0
 800339a:	bfb8      	it	lt
 800339c:	f04f 33ff 	movlt.w	r3, #4294967295
 80033a0:	f108 0802 	add.w	r8, r8, #2
 80033a4:	9305      	str	r3, [sp, #20]
 80033a6:	4d33      	ldr	r5, [pc, #204]	; (8003474 <_vfiprintf_r+0x21c>)
 80033a8:	f898 1000 	ldrb.w	r1, [r8]
 80033ac:	2203      	movs	r2, #3
 80033ae:	4628      	mov	r0, r5
 80033b0:	f7fc ff1e 	bl	80001f0 <memchr>
 80033b4:	b140      	cbz	r0, 80033c8 <_vfiprintf_r+0x170>
 80033b6:	2340      	movs	r3, #64	; 0x40
 80033b8:	1b40      	subs	r0, r0, r5
 80033ba:	fa03 f000 	lsl.w	r0, r3, r0
 80033be:	9b04      	ldr	r3, [sp, #16]
 80033c0:	4303      	orrs	r3, r0
 80033c2:	f108 0801 	add.w	r8, r8, #1
 80033c6:	9304      	str	r3, [sp, #16]
 80033c8:	f898 1000 	ldrb.w	r1, [r8]
 80033cc:	482a      	ldr	r0, [pc, #168]	; (8003478 <_vfiprintf_r+0x220>)
 80033ce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80033d2:	2206      	movs	r2, #6
 80033d4:	f108 0701 	add.w	r7, r8, #1
 80033d8:	f7fc ff0a 	bl	80001f0 <memchr>
 80033dc:	2800      	cmp	r0, #0
 80033de:	d037      	beq.n	8003450 <_vfiprintf_r+0x1f8>
 80033e0:	4b26      	ldr	r3, [pc, #152]	; (800347c <_vfiprintf_r+0x224>)
 80033e2:	bb1b      	cbnz	r3, 800342c <_vfiprintf_r+0x1d4>
 80033e4:	9b03      	ldr	r3, [sp, #12]
 80033e6:	3307      	adds	r3, #7
 80033e8:	f023 0307 	bic.w	r3, r3, #7
 80033ec:	3308      	adds	r3, #8
 80033ee:	9303      	str	r3, [sp, #12]
 80033f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80033f2:	444b      	add	r3, r9
 80033f4:	9309      	str	r3, [sp, #36]	; 0x24
 80033f6:	e750      	b.n	800329a <_vfiprintf_r+0x42>
 80033f8:	fb05 3202 	mla	r2, r5, r2, r3
 80033fc:	2001      	movs	r0, #1
 80033fe:	4688      	mov	r8, r1
 8003400:	e78a      	b.n	8003318 <_vfiprintf_r+0xc0>
 8003402:	2300      	movs	r3, #0
 8003404:	f108 0801 	add.w	r8, r8, #1
 8003408:	9305      	str	r3, [sp, #20]
 800340a:	4619      	mov	r1, r3
 800340c:	250a      	movs	r5, #10
 800340e:	4640      	mov	r0, r8
 8003410:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003414:	3a30      	subs	r2, #48	; 0x30
 8003416:	2a09      	cmp	r2, #9
 8003418:	d903      	bls.n	8003422 <_vfiprintf_r+0x1ca>
 800341a:	2b00      	cmp	r3, #0
 800341c:	d0c3      	beq.n	80033a6 <_vfiprintf_r+0x14e>
 800341e:	9105      	str	r1, [sp, #20]
 8003420:	e7c1      	b.n	80033a6 <_vfiprintf_r+0x14e>
 8003422:	fb05 2101 	mla	r1, r5, r1, r2
 8003426:	2301      	movs	r3, #1
 8003428:	4680      	mov	r8, r0
 800342a:	e7f0      	b.n	800340e <_vfiprintf_r+0x1b6>
 800342c:	ab03      	add	r3, sp, #12
 800342e:	9300      	str	r3, [sp, #0]
 8003430:	4622      	mov	r2, r4
 8003432:	4b13      	ldr	r3, [pc, #76]	; (8003480 <_vfiprintf_r+0x228>)
 8003434:	a904      	add	r1, sp, #16
 8003436:	4630      	mov	r0, r6
 8003438:	f3af 8000 	nop.w
 800343c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003440:	4681      	mov	r9, r0
 8003442:	d1d5      	bne.n	80033f0 <_vfiprintf_r+0x198>
 8003444:	89a3      	ldrh	r3, [r4, #12]
 8003446:	065b      	lsls	r3, r3, #25
 8003448:	f53f af7e 	bmi.w	8003348 <_vfiprintf_r+0xf0>
 800344c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800344e:	e77d      	b.n	800334c <_vfiprintf_r+0xf4>
 8003450:	ab03      	add	r3, sp, #12
 8003452:	9300      	str	r3, [sp, #0]
 8003454:	4622      	mov	r2, r4
 8003456:	4b0a      	ldr	r3, [pc, #40]	; (8003480 <_vfiprintf_r+0x228>)
 8003458:	a904      	add	r1, sp, #16
 800345a:	4630      	mov	r0, r6
 800345c:	f000 f888 	bl	8003570 <_printf_i>
 8003460:	e7ec      	b.n	800343c <_vfiprintf_r+0x1e4>
 8003462:	bf00      	nop
 8003464:	08003fa4 	.word	0x08003fa4
 8003468:	08003fe4 	.word	0x08003fe4
 800346c:	08003fc4 	.word	0x08003fc4
 8003470:	08003f84 	.word	0x08003f84
 8003474:	08003fea 	.word	0x08003fea
 8003478:	08003fee 	.word	0x08003fee
 800347c:	00000000 	.word	0x00000000
 8003480:	08003233 	.word	0x08003233

08003484 <_printf_common>:
 8003484:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003488:	4691      	mov	r9, r2
 800348a:	461f      	mov	r7, r3
 800348c:	688a      	ldr	r2, [r1, #8]
 800348e:	690b      	ldr	r3, [r1, #16]
 8003490:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003494:	4293      	cmp	r3, r2
 8003496:	bfb8      	it	lt
 8003498:	4613      	movlt	r3, r2
 800349a:	f8c9 3000 	str.w	r3, [r9]
 800349e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80034a2:	4606      	mov	r6, r0
 80034a4:	460c      	mov	r4, r1
 80034a6:	b112      	cbz	r2, 80034ae <_printf_common+0x2a>
 80034a8:	3301      	adds	r3, #1
 80034aa:	f8c9 3000 	str.w	r3, [r9]
 80034ae:	6823      	ldr	r3, [r4, #0]
 80034b0:	0699      	lsls	r1, r3, #26
 80034b2:	bf42      	ittt	mi
 80034b4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80034b8:	3302      	addmi	r3, #2
 80034ba:	f8c9 3000 	strmi.w	r3, [r9]
 80034be:	6825      	ldr	r5, [r4, #0]
 80034c0:	f015 0506 	ands.w	r5, r5, #6
 80034c4:	d107      	bne.n	80034d6 <_printf_common+0x52>
 80034c6:	f104 0a19 	add.w	sl, r4, #25
 80034ca:	68e3      	ldr	r3, [r4, #12]
 80034cc:	f8d9 2000 	ldr.w	r2, [r9]
 80034d0:	1a9b      	subs	r3, r3, r2
 80034d2:	42ab      	cmp	r3, r5
 80034d4:	dc28      	bgt.n	8003528 <_printf_common+0xa4>
 80034d6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80034da:	6822      	ldr	r2, [r4, #0]
 80034dc:	3300      	adds	r3, #0
 80034de:	bf18      	it	ne
 80034e0:	2301      	movne	r3, #1
 80034e2:	0692      	lsls	r2, r2, #26
 80034e4:	d42d      	bmi.n	8003542 <_printf_common+0xbe>
 80034e6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80034ea:	4639      	mov	r1, r7
 80034ec:	4630      	mov	r0, r6
 80034ee:	47c0      	blx	r8
 80034f0:	3001      	adds	r0, #1
 80034f2:	d020      	beq.n	8003536 <_printf_common+0xb2>
 80034f4:	6823      	ldr	r3, [r4, #0]
 80034f6:	68e5      	ldr	r5, [r4, #12]
 80034f8:	f8d9 2000 	ldr.w	r2, [r9]
 80034fc:	f003 0306 	and.w	r3, r3, #6
 8003500:	2b04      	cmp	r3, #4
 8003502:	bf08      	it	eq
 8003504:	1aad      	subeq	r5, r5, r2
 8003506:	68a3      	ldr	r3, [r4, #8]
 8003508:	6922      	ldr	r2, [r4, #16]
 800350a:	bf0c      	ite	eq
 800350c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003510:	2500      	movne	r5, #0
 8003512:	4293      	cmp	r3, r2
 8003514:	bfc4      	itt	gt
 8003516:	1a9b      	subgt	r3, r3, r2
 8003518:	18ed      	addgt	r5, r5, r3
 800351a:	f04f 0900 	mov.w	r9, #0
 800351e:	341a      	adds	r4, #26
 8003520:	454d      	cmp	r5, r9
 8003522:	d11a      	bne.n	800355a <_printf_common+0xd6>
 8003524:	2000      	movs	r0, #0
 8003526:	e008      	b.n	800353a <_printf_common+0xb6>
 8003528:	2301      	movs	r3, #1
 800352a:	4652      	mov	r2, sl
 800352c:	4639      	mov	r1, r7
 800352e:	4630      	mov	r0, r6
 8003530:	47c0      	blx	r8
 8003532:	3001      	adds	r0, #1
 8003534:	d103      	bne.n	800353e <_printf_common+0xba>
 8003536:	f04f 30ff 	mov.w	r0, #4294967295
 800353a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800353e:	3501      	adds	r5, #1
 8003540:	e7c3      	b.n	80034ca <_printf_common+0x46>
 8003542:	18e1      	adds	r1, r4, r3
 8003544:	1c5a      	adds	r2, r3, #1
 8003546:	2030      	movs	r0, #48	; 0x30
 8003548:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800354c:	4422      	add	r2, r4
 800354e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003552:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003556:	3302      	adds	r3, #2
 8003558:	e7c5      	b.n	80034e6 <_printf_common+0x62>
 800355a:	2301      	movs	r3, #1
 800355c:	4622      	mov	r2, r4
 800355e:	4639      	mov	r1, r7
 8003560:	4630      	mov	r0, r6
 8003562:	47c0      	blx	r8
 8003564:	3001      	adds	r0, #1
 8003566:	d0e6      	beq.n	8003536 <_printf_common+0xb2>
 8003568:	f109 0901 	add.w	r9, r9, #1
 800356c:	e7d8      	b.n	8003520 <_printf_common+0x9c>
	...

08003570 <_printf_i>:
 8003570:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003574:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003578:	460c      	mov	r4, r1
 800357a:	7e09      	ldrb	r1, [r1, #24]
 800357c:	b085      	sub	sp, #20
 800357e:	296e      	cmp	r1, #110	; 0x6e
 8003580:	4617      	mov	r7, r2
 8003582:	4606      	mov	r6, r0
 8003584:	4698      	mov	r8, r3
 8003586:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003588:	f000 80b3 	beq.w	80036f2 <_printf_i+0x182>
 800358c:	d822      	bhi.n	80035d4 <_printf_i+0x64>
 800358e:	2963      	cmp	r1, #99	; 0x63
 8003590:	d036      	beq.n	8003600 <_printf_i+0x90>
 8003592:	d80a      	bhi.n	80035aa <_printf_i+0x3a>
 8003594:	2900      	cmp	r1, #0
 8003596:	f000 80b9 	beq.w	800370c <_printf_i+0x19c>
 800359a:	2958      	cmp	r1, #88	; 0x58
 800359c:	f000 8083 	beq.w	80036a6 <_printf_i+0x136>
 80035a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80035a4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80035a8:	e032      	b.n	8003610 <_printf_i+0xa0>
 80035aa:	2964      	cmp	r1, #100	; 0x64
 80035ac:	d001      	beq.n	80035b2 <_printf_i+0x42>
 80035ae:	2969      	cmp	r1, #105	; 0x69
 80035b0:	d1f6      	bne.n	80035a0 <_printf_i+0x30>
 80035b2:	6820      	ldr	r0, [r4, #0]
 80035b4:	6813      	ldr	r3, [r2, #0]
 80035b6:	0605      	lsls	r5, r0, #24
 80035b8:	f103 0104 	add.w	r1, r3, #4
 80035bc:	d52a      	bpl.n	8003614 <_printf_i+0xa4>
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	6011      	str	r1, [r2, #0]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	da03      	bge.n	80035ce <_printf_i+0x5e>
 80035c6:	222d      	movs	r2, #45	; 0x2d
 80035c8:	425b      	negs	r3, r3
 80035ca:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80035ce:	486f      	ldr	r0, [pc, #444]	; (800378c <_printf_i+0x21c>)
 80035d0:	220a      	movs	r2, #10
 80035d2:	e039      	b.n	8003648 <_printf_i+0xd8>
 80035d4:	2973      	cmp	r1, #115	; 0x73
 80035d6:	f000 809d 	beq.w	8003714 <_printf_i+0x1a4>
 80035da:	d808      	bhi.n	80035ee <_printf_i+0x7e>
 80035dc:	296f      	cmp	r1, #111	; 0x6f
 80035de:	d020      	beq.n	8003622 <_printf_i+0xb2>
 80035e0:	2970      	cmp	r1, #112	; 0x70
 80035e2:	d1dd      	bne.n	80035a0 <_printf_i+0x30>
 80035e4:	6823      	ldr	r3, [r4, #0]
 80035e6:	f043 0320 	orr.w	r3, r3, #32
 80035ea:	6023      	str	r3, [r4, #0]
 80035ec:	e003      	b.n	80035f6 <_printf_i+0x86>
 80035ee:	2975      	cmp	r1, #117	; 0x75
 80035f0:	d017      	beq.n	8003622 <_printf_i+0xb2>
 80035f2:	2978      	cmp	r1, #120	; 0x78
 80035f4:	d1d4      	bne.n	80035a0 <_printf_i+0x30>
 80035f6:	2378      	movs	r3, #120	; 0x78
 80035f8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80035fc:	4864      	ldr	r0, [pc, #400]	; (8003790 <_printf_i+0x220>)
 80035fe:	e055      	b.n	80036ac <_printf_i+0x13c>
 8003600:	6813      	ldr	r3, [r2, #0]
 8003602:	1d19      	adds	r1, r3, #4
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	6011      	str	r1, [r2, #0]
 8003608:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800360c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003610:	2301      	movs	r3, #1
 8003612:	e08c      	b.n	800372e <_printf_i+0x1be>
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	6011      	str	r1, [r2, #0]
 8003618:	f010 0f40 	tst.w	r0, #64	; 0x40
 800361c:	bf18      	it	ne
 800361e:	b21b      	sxthne	r3, r3
 8003620:	e7cf      	b.n	80035c2 <_printf_i+0x52>
 8003622:	6813      	ldr	r3, [r2, #0]
 8003624:	6825      	ldr	r5, [r4, #0]
 8003626:	1d18      	adds	r0, r3, #4
 8003628:	6010      	str	r0, [r2, #0]
 800362a:	0628      	lsls	r0, r5, #24
 800362c:	d501      	bpl.n	8003632 <_printf_i+0xc2>
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	e002      	b.n	8003638 <_printf_i+0xc8>
 8003632:	0668      	lsls	r0, r5, #25
 8003634:	d5fb      	bpl.n	800362e <_printf_i+0xbe>
 8003636:	881b      	ldrh	r3, [r3, #0]
 8003638:	4854      	ldr	r0, [pc, #336]	; (800378c <_printf_i+0x21c>)
 800363a:	296f      	cmp	r1, #111	; 0x6f
 800363c:	bf14      	ite	ne
 800363e:	220a      	movne	r2, #10
 8003640:	2208      	moveq	r2, #8
 8003642:	2100      	movs	r1, #0
 8003644:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003648:	6865      	ldr	r5, [r4, #4]
 800364a:	60a5      	str	r5, [r4, #8]
 800364c:	2d00      	cmp	r5, #0
 800364e:	f2c0 8095 	blt.w	800377c <_printf_i+0x20c>
 8003652:	6821      	ldr	r1, [r4, #0]
 8003654:	f021 0104 	bic.w	r1, r1, #4
 8003658:	6021      	str	r1, [r4, #0]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d13d      	bne.n	80036da <_printf_i+0x16a>
 800365e:	2d00      	cmp	r5, #0
 8003660:	f040 808e 	bne.w	8003780 <_printf_i+0x210>
 8003664:	4665      	mov	r5, ip
 8003666:	2a08      	cmp	r2, #8
 8003668:	d10b      	bne.n	8003682 <_printf_i+0x112>
 800366a:	6823      	ldr	r3, [r4, #0]
 800366c:	07db      	lsls	r3, r3, #31
 800366e:	d508      	bpl.n	8003682 <_printf_i+0x112>
 8003670:	6923      	ldr	r3, [r4, #16]
 8003672:	6862      	ldr	r2, [r4, #4]
 8003674:	429a      	cmp	r2, r3
 8003676:	bfde      	ittt	le
 8003678:	2330      	movle	r3, #48	; 0x30
 800367a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800367e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003682:	ebac 0305 	sub.w	r3, ip, r5
 8003686:	6123      	str	r3, [r4, #16]
 8003688:	f8cd 8000 	str.w	r8, [sp]
 800368c:	463b      	mov	r3, r7
 800368e:	aa03      	add	r2, sp, #12
 8003690:	4621      	mov	r1, r4
 8003692:	4630      	mov	r0, r6
 8003694:	f7ff fef6 	bl	8003484 <_printf_common>
 8003698:	3001      	adds	r0, #1
 800369a:	d14d      	bne.n	8003738 <_printf_i+0x1c8>
 800369c:	f04f 30ff 	mov.w	r0, #4294967295
 80036a0:	b005      	add	sp, #20
 80036a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80036a6:	4839      	ldr	r0, [pc, #228]	; (800378c <_printf_i+0x21c>)
 80036a8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80036ac:	6813      	ldr	r3, [r2, #0]
 80036ae:	6821      	ldr	r1, [r4, #0]
 80036b0:	1d1d      	adds	r5, r3, #4
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	6015      	str	r5, [r2, #0]
 80036b6:	060a      	lsls	r2, r1, #24
 80036b8:	d50b      	bpl.n	80036d2 <_printf_i+0x162>
 80036ba:	07ca      	lsls	r2, r1, #31
 80036bc:	bf44      	itt	mi
 80036be:	f041 0120 	orrmi.w	r1, r1, #32
 80036c2:	6021      	strmi	r1, [r4, #0]
 80036c4:	b91b      	cbnz	r3, 80036ce <_printf_i+0x15e>
 80036c6:	6822      	ldr	r2, [r4, #0]
 80036c8:	f022 0220 	bic.w	r2, r2, #32
 80036cc:	6022      	str	r2, [r4, #0]
 80036ce:	2210      	movs	r2, #16
 80036d0:	e7b7      	b.n	8003642 <_printf_i+0xd2>
 80036d2:	064d      	lsls	r5, r1, #25
 80036d4:	bf48      	it	mi
 80036d6:	b29b      	uxthmi	r3, r3
 80036d8:	e7ef      	b.n	80036ba <_printf_i+0x14a>
 80036da:	4665      	mov	r5, ip
 80036dc:	fbb3 f1f2 	udiv	r1, r3, r2
 80036e0:	fb02 3311 	mls	r3, r2, r1, r3
 80036e4:	5cc3      	ldrb	r3, [r0, r3]
 80036e6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80036ea:	460b      	mov	r3, r1
 80036ec:	2900      	cmp	r1, #0
 80036ee:	d1f5      	bne.n	80036dc <_printf_i+0x16c>
 80036f0:	e7b9      	b.n	8003666 <_printf_i+0xf6>
 80036f2:	6813      	ldr	r3, [r2, #0]
 80036f4:	6825      	ldr	r5, [r4, #0]
 80036f6:	6961      	ldr	r1, [r4, #20]
 80036f8:	1d18      	adds	r0, r3, #4
 80036fa:	6010      	str	r0, [r2, #0]
 80036fc:	0628      	lsls	r0, r5, #24
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	d501      	bpl.n	8003706 <_printf_i+0x196>
 8003702:	6019      	str	r1, [r3, #0]
 8003704:	e002      	b.n	800370c <_printf_i+0x19c>
 8003706:	066a      	lsls	r2, r5, #25
 8003708:	d5fb      	bpl.n	8003702 <_printf_i+0x192>
 800370a:	8019      	strh	r1, [r3, #0]
 800370c:	2300      	movs	r3, #0
 800370e:	6123      	str	r3, [r4, #16]
 8003710:	4665      	mov	r5, ip
 8003712:	e7b9      	b.n	8003688 <_printf_i+0x118>
 8003714:	6813      	ldr	r3, [r2, #0]
 8003716:	1d19      	adds	r1, r3, #4
 8003718:	6011      	str	r1, [r2, #0]
 800371a:	681d      	ldr	r5, [r3, #0]
 800371c:	6862      	ldr	r2, [r4, #4]
 800371e:	2100      	movs	r1, #0
 8003720:	4628      	mov	r0, r5
 8003722:	f7fc fd65 	bl	80001f0 <memchr>
 8003726:	b108      	cbz	r0, 800372c <_printf_i+0x1bc>
 8003728:	1b40      	subs	r0, r0, r5
 800372a:	6060      	str	r0, [r4, #4]
 800372c:	6863      	ldr	r3, [r4, #4]
 800372e:	6123      	str	r3, [r4, #16]
 8003730:	2300      	movs	r3, #0
 8003732:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003736:	e7a7      	b.n	8003688 <_printf_i+0x118>
 8003738:	6923      	ldr	r3, [r4, #16]
 800373a:	462a      	mov	r2, r5
 800373c:	4639      	mov	r1, r7
 800373e:	4630      	mov	r0, r6
 8003740:	47c0      	blx	r8
 8003742:	3001      	adds	r0, #1
 8003744:	d0aa      	beq.n	800369c <_printf_i+0x12c>
 8003746:	6823      	ldr	r3, [r4, #0]
 8003748:	079b      	lsls	r3, r3, #30
 800374a:	d413      	bmi.n	8003774 <_printf_i+0x204>
 800374c:	68e0      	ldr	r0, [r4, #12]
 800374e:	9b03      	ldr	r3, [sp, #12]
 8003750:	4298      	cmp	r0, r3
 8003752:	bfb8      	it	lt
 8003754:	4618      	movlt	r0, r3
 8003756:	e7a3      	b.n	80036a0 <_printf_i+0x130>
 8003758:	2301      	movs	r3, #1
 800375a:	464a      	mov	r2, r9
 800375c:	4639      	mov	r1, r7
 800375e:	4630      	mov	r0, r6
 8003760:	47c0      	blx	r8
 8003762:	3001      	adds	r0, #1
 8003764:	d09a      	beq.n	800369c <_printf_i+0x12c>
 8003766:	3501      	adds	r5, #1
 8003768:	68e3      	ldr	r3, [r4, #12]
 800376a:	9a03      	ldr	r2, [sp, #12]
 800376c:	1a9b      	subs	r3, r3, r2
 800376e:	42ab      	cmp	r3, r5
 8003770:	dcf2      	bgt.n	8003758 <_printf_i+0x1e8>
 8003772:	e7eb      	b.n	800374c <_printf_i+0x1dc>
 8003774:	2500      	movs	r5, #0
 8003776:	f104 0919 	add.w	r9, r4, #25
 800377a:	e7f5      	b.n	8003768 <_printf_i+0x1f8>
 800377c:	2b00      	cmp	r3, #0
 800377e:	d1ac      	bne.n	80036da <_printf_i+0x16a>
 8003780:	7803      	ldrb	r3, [r0, #0]
 8003782:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003786:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800378a:	e76c      	b.n	8003666 <_printf_i+0xf6>
 800378c:	08003ff5 	.word	0x08003ff5
 8003790:	08004006 	.word	0x08004006

08003794 <_sbrk_r>:
 8003794:	b538      	push	{r3, r4, r5, lr}
 8003796:	4c06      	ldr	r4, [pc, #24]	; (80037b0 <_sbrk_r+0x1c>)
 8003798:	2300      	movs	r3, #0
 800379a:	4605      	mov	r5, r0
 800379c:	4608      	mov	r0, r1
 800379e:	6023      	str	r3, [r4, #0]
 80037a0:	f000 f9bc 	bl	8003b1c <_sbrk>
 80037a4:	1c43      	adds	r3, r0, #1
 80037a6:	d102      	bne.n	80037ae <_sbrk_r+0x1a>
 80037a8:	6823      	ldr	r3, [r4, #0]
 80037aa:	b103      	cbz	r3, 80037ae <_sbrk_r+0x1a>
 80037ac:	602b      	str	r3, [r5, #0]
 80037ae:	bd38      	pop	{r3, r4, r5, pc}
 80037b0:	200001e4 	.word	0x200001e4

080037b4 <__sread>:
 80037b4:	b510      	push	{r4, lr}
 80037b6:	460c      	mov	r4, r1
 80037b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80037bc:	f000 f896 	bl	80038ec <_read_r>
 80037c0:	2800      	cmp	r0, #0
 80037c2:	bfab      	itete	ge
 80037c4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80037c6:	89a3      	ldrhlt	r3, [r4, #12]
 80037c8:	181b      	addge	r3, r3, r0
 80037ca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80037ce:	bfac      	ite	ge
 80037d0:	6563      	strge	r3, [r4, #84]	; 0x54
 80037d2:	81a3      	strhlt	r3, [r4, #12]
 80037d4:	bd10      	pop	{r4, pc}

080037d6 <__swrite>:
 80037d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80037da:	461f      	mov	r7, r3
 80037dc:	898b      	ldrh	r3, [r1, #12]
 80037de:	05db      	lsls	r3, r3, #23
 80037e0:	4605      	mov	r5, r0
 80037e2:	460c      	mov	r4, r1
 80037e4:	4616      	mov	r6, r2
 80037e6:	d505      	bpl.n	80037f4 <__swrite+0x1e>
 80037e8:	2302      	movs	r3, #2
 80037ea:	2200      	movs	r2, #0
 80037ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80037f0:	f000 f868 	bl	80038c4 <_lseek_r>
 80037f4:	89a3      	ldrh	r3, [r4, #12]
 80037f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80037fa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80037fe:	81a3      	strh	r3, [r4, #12]
 8003800:	4632      	mov	r2, r6
 8003802:	463b      	mov	r3, r7
 8003804:	4628      	mov	r0, r5
 8003806:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800380a:	f000 b817 	b.w	800383c <_write_r>

0800380e <__sseek>:
 800380e:	b510      	push	{r4, lr}
 8003810:	460c      	mov	r4, r1
 8003812:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003816:	f000 f855 	bl	80038c4 <_lseek_r>
 800381a:	1c43      	adds	r3, r0, #1
 800381c:	89a3      	ldrh	r3, [r4, #12]
 800381e:	bf15      	itete	ne
 8003820:	6560      	strne	r0, [r4, #84]	; 0x54
 8003822:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003826:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800382a:	81a3      	strheq	r3, [r4, #12]
 800382c:	bf18      	it	ne
 800382e:	81a3      	strhne	r3, [r4, #12]
 8003830:	bd10      	pop	{r4, pc}

08003832 <__sclose>:
 8003832:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003836:	f000 b813 	b.w	8003860 <_close_r>
	...

0800383c <_write_r>:
 800383c:	b538      	push	{r3, r4, r5, lr}
 800383e:	4c07      	ldr	r4, [pc, #28]	; (800385c <_write_r+0x20>)
 8003840:	4605      	mov	r5, r0
 8003842:	4608      	mov	r0, r1
 8003844:	4611      	mov	r1, r2
 8003846:	2200      	movs	r2, #0
 8003848:	6022      	str	r2, [r4, #0]
 800384a:	461a      	mov	r2, r3
 800384c:	f000 f911 	bl	8003a72 <_write>
 8003850:	1c43      	adds	r3, r0, #1
 8003852:	d102      	bne.n	800385a <_write_r+0x1e>
 8003854:	6823      	ldr	r3, [r4, #0]
 8003856:	b103      	cbz	r3, 800385a <_write_r+0x1e>
 8003858:	602b      	str	r3, [r5, #0]
 800385a:	bd38      	pop	{r3, r4, r5, pc}
 800385c:	200001e4 	.word	0x200001e4

08003860 <_close_r>:
 8003860:	b538      	push	{r3, r4, r5, lr}
 8003862:	4c06      	ldr	r4, [pc, #24]	; (800387c <_close_r+0x1c>)
 8003864:	2300      	movs	r3, #0
 8003866:	4605      	mov	r5, r0
 8003868:	4608      	mov	r0, r1
 800386a:	6023      	str	r3, [r4, #0]
 800386c:	f000 f930 	bl	8003ad0 <_close>
 8003870:	1c43      	adds	r3, r0, #1
 8003872:	d102      	bne.n	800387a <_close_r+0x1a>
 8003874:	6823      	ldr	r3, [r4, #0]
 8003876:	b103      	cbz	r3, 800387a <_close_r+0x1a>
 8003878:	602b      	str	r3, [r5, #0]
 800387a:	bd38      	pop	{r3, r4, r5, pc}
 800387c:	200001e4 	.word	0x200001e4

08003880 <_fstat_r>:
 8003880:	b538      	push	{r3, r4, r5, lr}
 8003882:	4c07      	ldr	r4, [pc, #28]	; (80038a0 <_fstat_r+0x20>)
 8003884:	2300      	movs	r3, #0
 8003886:	4605      	mov	r5, r0
 8003888:	4608      	mov	r0, r1
 800388a:	4611      	mov	r1, r2
 800388c:	6023      	str	r3, [r4, #0]
 800388e:	f000 f98a 	bl	8003ba6 <_fstat>
 8003892:	1c43      	adds	r3, r0, #1
 8003894:	d102      	bne.n	800389c <_fstat_r+0x1c>
 8003896:	6823      	ldr	r3, [r4, #0]
 8003898:	b103      	cbz	r3, 800389c <_fstat_r+0x1c>
 800389a:	602b      	str	r3, [r5, #0]
 800389c:	bd38      	pop	{r3, r4, r5, pc}
 800389e:	bf00      	nop
 80038a0:	200001e4 	.word	0x200001e4

080038a4 <_isatty_r>:
 80038a4:	b538      	push	{r3, r4, r5, lr}
 80038a6:	4c06      	ldr	r4, [pc, #24]	; (80038c0 <_isatty_r+0x1c>)
 80038a8:	2300      	movs	r3, #0
 80038aa:	4605      	mov	r5, r0
 80038ac:	4608      	mov	r0, r1
 80038ae:	6023      	str	r3, [r4, #0]
 80038b0:	f000 fade 	bl	8003e70 <_isatty>
 80038b4:	1c43      	adds	r3, r0, #1
 80038b6:	d102      	bne.n	80038be <_isatty_r+0x1a>
 80038b8:	6823      	ldr	r3, [r4, #0]
 80038ba:	b103      	cbz	r3, 80038be <_isatty_r+0x1a>
 80038bc:	602b      	str	r3, [r5, #0]
 80038be:	bd38      	pop	{r3, r4, r5, pc}
 80038c0:	200001e4 	.word	0x200001e4

080038c4 <_lseek_r>:
 80038c4:	b538      	push	{r3, r4, r5, lr}
 80038c6:	4c07      	ldr	r4, [pc, #28]	; (80038e4 <_lseek_r+0x20>)
 80038c8:	4605      	mov	r5, r0
 80038ca:	4608      	mov	r0, r1
 80038cc:	4611      	mov	r1, r2
 80038ce:	2200      	movs	r2, #0
 80038d0:	6022      	str	r2, [r4, #0]
 80038d2:	461a      	mov	r2, r3
 80038d4:	f000 f8bb 	bl	8003a4e <_lseek>
 80038d8:	1c43      	adds	r3, r0, #1
 80038da:	d102      	bne.n	80038e2 <_lseek_r+0x1e>
 80038dc:	6823      	ldr	r3, [r4, #0]
 80038de:	b103      	cbz	r3, 80038e2 <_lseek_r+0x1e>
 80038e0:	602b      	str	r3, [r5, #0]
 80038e2:	bd38      	pop	{r3, r4, r5, pc}
 80038e4:	200001e4 	.word	0x200001e4

080038e8 <__malloc_lock>:
 80038e8:	4770      	bx	lr

080038ea <__malloc_unlock>:
 80038ea:	4770      	bx	lr

080038ec <_read_r>:
 80038ec:	b538      	push	{r3, r4, r5, lr}
 80038ee:	4c07      	ldr	r4, [pc, #28]	; (800390c <_read_r+0x20>)
 80038f0:	4605      	mov	r5, r0
 80038f2:	4608      	mov	r0, r1
 80038f4:	4611      	mov	r1, r2
 80038f6:	2200      	movs	r2, #0
 80038f8:	6022      	str	r2, [r4, #0]
 80038fa:	461a      	mov	r2, r3
 80038fc:	f000 f850 	bl	80039a0 <_read>
 8003900:	1c43      	adds	r3, r0, #1
 8003902:	d102      	bne.n	800390a <_read_r+0x1e>
 8003904:	6823      	ldr	r3, [r4, #0]
 8003906:	b103      	cbz	r3, 800390a <_read_r+0x1e>
 8003908:	602b      	str	r3, [r5, #0]
 800390a:	bd38      	pop	{r3, r4, r5, pc}
 800390c:	200001e4 	.word	0x200001e4

08003910 <findslot>:
 8003910:	4b0a      	ldr	r3, [pc, #40]	; (800393c <findslot+0x2c>)
 8003912:	b510      	push	{r4, lr}
 8003914:	4604      	mov	r4, r0
 8003916:	6818      	ldr	r0, [r3, #0]
 8003918:	b118      	cbz	r0, 8003922 <findslot+0x12>
 800391a:	6983      	ldr	r3, [r0, #24]
 800391c:	b90b      	cbnz	r3, 8003922 <findslot+0x12>
 800391e:	f7ff fadb 	bl	8002ed8 <__sinit>
 8003922:	2c13      	cmp	r4, #19
 8003924:	d807      	bhi.n	8003936 <findslot+0x26>
 8003926:	4806      	ldr	r0, [pc, #24]	; (8003940 <findslot+0x30>)
 8003928:	f850 3034 	ldr.w	r3, [r0, r4, lsl #3]
 800392c:	3301      	adds	r3, #1
 800392e:	d002      	beq.n	8003936 <findslot+0x26>
 8003930:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8003934:	bd10      	pop	{r4, pc}
 8003936:	2000      	movs	r0, #0
 8003938:	e7fc      	b.n	8003934 <findslot+0x24>
 800393a:	bf00      	nop
 800393c:	20000010 	.word	0x20000010
 8003940:	200000b8 	.word	0x200000b8

08003944 <checkerror>:
 8003944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003946:	1c43      	adds	r3, r0, #1
 8003948:	4605      	mov	r5, r0
 800394a:	d109      	bne.n	8003960 <checkerror+0x1c>
 800394c:	f000 faac 	bl	8003ea8 <__errno>
 8003950:	2413      	movs	r4, #19
 8003952:	4606      	mov	r6, r0
 8003954:	2700      	movs	r7, #0
 8003956:	4620      	mov	r0, r4
 8003958:	4639      	mov	r1, r7
 800395a:	beab      	bkpt	0x00ab
 800395c:	4604      	mov	r4, r0
 800395e:	6034      	str	r4, [r6, #0]
 8003960:	4628      	mov	r0, r5
 8003962:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003964 <error>:
 8003964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003966:	4605      	mov	r5, r0
 8003968:	f000 fa9e 	bl	8003ea8 <__errno>
 800396c:	2413      	movs	r4, #19
 800396e:	4606      	mov	r6, r0
 8003970:	2700      	movs	r7, #0
 8003972:	4620      	mov	r0, r4
 8003974:	4639      	mov	r1, r7
 8003976:	beab      	bkpt	0x00ab
 8003978:	4604      	mov	r4, r0
 800397a:	6034      	str	r4, [r6, #0]
 800397c:	4628      	mov	r0, r5
 800397e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003980 <_swiread>:
 8003980:	b530      	push	{r4, r5, lr}
 8003982:	b085      	sub	sp, #20
 8003984:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8003988:	9203      	str	r2, [sp, #12]
 800398a:	2406      	movs	r4, #6
 800398c:	ad01      	add	r5, sp, #4
 800398e:	4620      	mov	r0, r4
 8003990:	4629      	mov	r1, r5
 8003992:	beab      	bkpt	0x00ab
 8003994:	4604      	mov	r4, r0
 8003996:	4620      	mov	r0, r4
 8003998:	f7ff ffd4 	bl	8003944 <checkerror>
 800399c:	b005      	add	sp, #20
 800399e:	bd30      	pop	{r4, r5, pc}

080039a0 <_read>:
 80039a0:	b570      	push	{r4, r5, r6, lr}
 80039a2:	460e      	mov	r6, r1
 80039a4:	4615      	mov	r5, r2
 80039a6:	f7ff ffb3 	bl	8003910 <findslot>
 80039aa:	4604      	mov	r4, r0
 80039ac:	b930      	cbnz	r0, 80039bc <_read+0x1c>
 80039ae:	f000 fa7b 	bl	8003ea8 <__errno>
 80039b2:	2309      	movs	r3, #9
 80039b4:	6003      	str	r3, [r0, #0]
 80039b6:	f04f 30ff 	mov.w	r0, #4294967295
 80039ba:	bd70      	pop	{r4, r5, r6, pc}
 80039bc:	462a      	mov	r2, r5
 80039be:	4631      	mov	r1, r6
 80039c0:	6800      	ldr	r0, [r0, #0]
 80039c2:	f7ff ffdd 	bl	8003980 <_swiread>
 80039c6:	1c43      	adds	r3, r0, #1
 80039c8:	bf1f      	itttt	ne
 80039ca:	6863      	ldrne	r3, [r4, #4]
 80039cc:	1a28      	subne	r0, r5, r0
 80039ce:	181b      	addne	r3, r3, r0
 80039d0:	6063      	strne	r3, [r4, #4]
 80039d2:	e7f2      	b.n	80039ba <_read+0x1a>

080039d4 <_swilseek>:
 80039d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80039d6:	460c      	mov	r4, r1
 80039d8:	4616      	mov	r6, r2
 80039da:	f7ff ff99 	bl	8003910 <findslot>
 80039de:	4605      	mov	r5, r0
 80039e0:	b940      	cbnz	r0, 80039f4 <_swilseek+0x20>
 80039e2:	f000 fa61 	bl	8003ea8 <__errno>
 80039e6:	2309      	movs	r3, #9
 80039e8:	6003      	str	r3, [r0, #0]
 80039ea:	f04f 34ff 	mov.w	r4, #4294967295
 80039ee:	4620      	mov	r0, r4
 80039f0:	b003      	add	sp, #12
 80039f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80039f4:	2e02      	cmp	r6, #2
 80039f6:	d903      	bls.n	8003a00 <_swilseek+0x2c>
 80039f8:	f000 fa56 	bl	8003ea8 <__errno>
 80039fc:	2316      	movs	r3, #22
 80039fe:	e7f3      	b.n	80039e8 <_swilseek+0x14>
 8003a00:	2e01      	cmp	r6, #1
 8003a02:	d112      	bne.n	8003a2a <_swilseek+0x56>
 8003a04:	6843      	ldr	r3, [r0, #4]
 8003a06:	18e4      	adds	r4, r4, r3
 8003a08:	d4f6      	bmi.n	80039f8 <_swilseek+0x24>
 8003a0a:	682b      	ldr	r3, [r5, #0]
 8003a0c:	260a      	movs	r6, #10
 8003a0e:	e9cd 3400 	strd	r3, r4, [sp]
 8003a12:	466f      	mov	r7, sp
 8003a14:	4630      	mov	r0, r6
 8003a16:	4639      	mov	r1, r7
 8003a18:	beab      	bkpt	0x00ab
 8003a1a:	4606      	mov	r6, r0
 8003a1c:	4630      	mov	r0, r6
 8003a1e:	f7ff ff91 	bl	8003944 <checkerror>
 8003a22:	2800      	cmp	r0, #0
 8003a24:	dbe1      	blt.n	80039ea <_swilseek+0x16>
 8003a26:	606c      	str	r4, [r5, #4]
 8003a28:	e7e1      	b.n	80039ee <_swilseek+0x1a>
 8003a2a:	2e02      	cmp	r6, #2
 8003a2c:	d1ed      	bne.n	8003a0a <_swilseek+0x36>
 8003a2e:	af02      	add	r7, sp, #8
 8003a30:	6803      	ldr	r3, [r0, #0]
 8003a32:	f847 3d08 	str.w	r3, [r7, #-8]!
 8003a36:	260c      	movs	r6, #12
 8003a38:	4630      	mov	r0, r6
 8003a3a:	4639      	mov	r1, r7
 8003a3c:	beab      	bkpt	0x00ab
 8003a3e:	4606      	mov	r6, r0
 8003a40:	4630      	mov	r0, r6
 8003a42:	f7ff ff7f 	bl	8003944 <checkerror>
 8003a46:	1c43      	adds	r3, r0, #1
 8003a48:	d0cf      	beq.n	80039ea <_swilseek+0x16>
 8003a4a:	4404      	add	r4, r0
 8003a4c:	e7dd      	b.n	8003a0a <_swilseek+0x36>

08003a4e <_lseek>:
 8003a4e:	f7ff bfc1 	b.w	80039d4 <_swilseek>

08003a52 <_swiwrite>:
 8003a52:	b530      	push	{r4, r5, lr}
 8003a54:	b085      	sub	sp, #20
 8003a56:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8003a5a:	9203      	str	r2, [sp, #12]
 8003a5c:	2405      	movs	r4, #5
 8003a5e:	ad01      	add	r5, sp, #4
 8003a60:	4620      	mov	r0, r4
 8003a62:	4629      	mov	r1, r5
 8003a64:	beab      	bkpt	0x00ab
 8003a66:	4604      	mov	r4, r0
 8003a68:	4620      	mov	r0, r4
 8003a6a:	f7ff ff6b 	bl	8003944 <checkerror>
 8003a6e:	b005      	add	sp, #20
 8003a70:	bd30      	pop	{r4, r5, pc}

08003a72 <_write>:
 8003a72:	b570      	push	{r4, r5, r6, lr}
 8003a74:	460e      	mov	r6, r1
 8003a76:	4615      	mov	r5, r2
 8003a78:	f7ff ff4a 	bl	8003910 <findslot>
 8003a7c:	4604      	mov	r4, r0
 8003a7e:	b930      	cbnz	r0, 8003a8e <_write+0x1c>
 8003a80:	f000 fa12 	bl	8003ea8 <__errno>
 8003a84:	2309      	movs	r3, #9
 8003a86:	6003      	str	r3, [r0, #0]
 8003a88:	f04f 30ff 	mov.w	r0, #4294967295
 8003a8c:	bd70      	pop	{r4, r5, r6, pc}
 8003a8e:	462a      	mov	r2, r5
 8003a90:	4631      	mov	r1, r6
 8003a92:	6800      	ldr	r0, [r0, #0]
 8003a94:	f7ff ffdd 	bl	8003a52 <_swiwrite>
 8003a98:	1e02      	subs	r2, r0, #0
 8003a9a:	dbf5      	blt.n	8003a88 <_write+0x16>
 8003a9c:	6863      	ldr	r3, [r4, #4]
 8003a9e:	1aa8      	subs	r0, r5, r2
 8003aa0:	4403      	add	r3, r0
 8003aa2:	42aa      	cmp	r2, r5
 8003aa4:	6063      	str	r3, [r4, #4]
 8003aa6:	d1f1      	bne.n	8003a8c <_write+0x1a>
 8003aa8:	2000      	movs	r0, #0
 8003aaa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8003aae:	f7ff bf59 	b.w	8003964 <error>

08003ab2 <_swiclose>:
 8003ab2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003ab4:	ad02      	add	r5, sp, #8
 8003ab6:	2402      	movs	r4, #2
 8003ab8:	f845 0d04 	str.w	r0, [r5, #-4]!
 8003abc:	4620      	mov	r0, r4
 8003abe:	4629      	mov	r1, r5
 8003ac0:	beab      	bkpt	0x00ab
 8003ac2:	4604      	mov	r4, r0
 8003ac4:	4620      	mov	r0, r4
 8003ac6:	f7ff ff3d 	bl	8003944 <checkerror>
 8003aca:	b003      	add	sp, #12
 8003acc:	bd30      	pop	{r4, r5, pc}
	...

08003ad0 <_close>:
 8003ad0:	b538      	push	{r3, r4, r5, lr}
 8003ad2:	4605      	mov	r5, r0
 8003ad4:	f7ff ff1c 	bl	8003910 <findslot>
 8003ad8:	4604      	mov	r4, r0
 8003ada:	b930      	cbnz	r0, 8003aea <_close+0x1a>
 8003adc:	f000 f9e4 	bl	8003ea8 <__errno>
 8003ae0:	2309      	movs	r3, #9
 8003ae2:	6003      	str	r3, [r0, #0]
 8003ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8003ae8:	bd38      	pop	{r3, r4, r5, pc}
 8003aea:	3d01      	subs	r5, #1
 8003aec:	2d01      	cmp	r5, #1
 8003aee:	d809      	bhi.n	8003b04 <_close+0x34>
 8003af0:	4b09      	ldr	r3, [pc, #36]	; (8003b18 <_close+0x48>)
 8003af2:	689a      	ldr	r2, [r3, #8]
 8003af4:	691b      	ldr	r3, [r3, #16]
 8003af6:	429a      	cmp	r2, r3
 8003af8:	d104      	bne.n	8003b04 <_close+0x34>
 8003afa:	f04f 33ff 	mov.w	r3, #4294967295
 8003afe:	6003      	str	r3, [r0, #0]
 8003b00:	2000      	movs	r0, #0
 8003b02:	e7f1      	b.n	8003ae8 <_close+0x18>
 8003b04:	6820      	ldr	r0, [r4, #0]
 8003b06:	f7ff ffd4 	bl	8003ab2 <_swiclose>
 8003b0a:	2800      	cmp	r0, #0
 8003b0c:	d1ec      	bne.n	8003ae8 <_close+0x18>
 8003b0e:	f04f 33ff 	mov.w	r3, #4294967295
 8003b12:	6023      	str	r3, [r4, #0]
 8003b14:	e7e8      	b.n	8003ae8 <_close+0x18>
 8003b16:	bf00      	nop
 8003b18:	200000b8 	.word	0x200000b8

08003b1c <_sbrk>:
 8003b1c:	4b0d      	ldr	r3, [pc, #52]	; (8003b54 <_sbrk+0x38>)
 8003b1e:	6819      	ldr	r1, [r3, #0]
 8003b20:	b510      	push	{r4, lr}
 8003b22:	4602      	mov	r2, r0
 8003b24:	b909      	cbnz	r1, 8003b2a <_sbrk+0xe>
 8003b26:	490c      	ldr	r1, [pc, #48]	; (8003b58 <_sbrk+0x3c>)
 8003b28:	6019      	str	r1, [r3, #0]
 8003b2a:	6818      	ldr	r0, [r3, #0]
 8003b2c:	4669      	mov	r1, sp
 8003b2e:	4402      	add	r2, r0
 8003b30:	428a      	cmp	r2, r1
 8003b32:	d806      	bhi.n	8003b42 <_sbrk+0x26>
 8003b34:	4909      	ldr	r1, [pc, #36]	; (8003b5c <_sbrk+0x40>)
 8003b36:	4c0a      	ldr	r4, [pc, #40]	; (8003b60 <_sbrk+0x44>)
 8003b38:	6809      	ldr	r1, [r1, #0]
 8003b3a:	42a1      	cmp	r1, r4
 8003b3c:	d008      	beq.n	8003b50 <_sbrk+0x34>
 8003b3e:	428a      	cmp	r2, r1
 8003b40:	d906      	bls.n	8003b50 <_sbrk+0x34>
 8003b42:	f000 f9b1 	bl	8003ea8 <__errno>
 8003b46:	230c      	movs	r3, #12
 8003b48:	6003      	str	r3, [r0, #0]
 8003b4a:	f04f 30ff 	mov.w	r0, #4294967295
 8003b4e:	bd10      	pop	{r4, pc}
 8003b50:	601a      	str	r2, [r3, #0]
 8003b52:	e7fc      	b.n	8003b4e <_sbrk+0x32>
 8003b54:	200000a8 	.word	0x200000a8
 8003b58:	200001e8 	.word	0x200001e8
 8003b5c:	20000074 	.word	0x20000074
 8003b60:	cafedead 	.word	0xcafedead

08003b64 <_swistat>:
 8003b64:	b570      	push	{r4, r5, r6, lr}
 8003b66:	460c      	mov	r4, r1
 8003b68:	f7ff fed2 	bl	8003910 <findslot>
 8003b6c:	4606      	mov	r6, r0
 8003b6e:	b930      	cbnz	r0, 8003b7e <_swistat+0x1a>
 8003b70:	f000 f99a 	bl	8003ea8 <__errno>
 8003b74:	2309      	movs	r3, #9
 8003b76:	6003      	str	r3, [r0, #0]
 8003b78:	f04f 30ff 	mov.w	r0, #4294967295
 8003b7c:	bd70      	pop	{r4, r5, r6, pc}
 8003b7e:	6863      	ldr	r3, [r4, #4]
 8003b80:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003b84:	6063      	str	r3, [r4, #4]
 8003b86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003b8a:	6463      	str	r3, [r4, #68]	; 0x44
 8003b8c:	250c      	movs	r5, #12
 8003b8e:	4628      	mov	r0, r5
 8003b90:	4631      	mov	r1, r6
 8003b92:	beab      	bkpt	0x00ab
 8003b94:	4605      	mov	r5, r0
 8003b96:	4628      	mov	r0, r5
 8003b98:	f7ff fed4 	bl	8003944 <checkerror>
 8003b9c:	1c43      	adds	r3, r0, #1
 8003b9e:	bf1c      	itt	ne
 8003ba0:	6120      	strne	r0, [r4, #16]
 8003ba2:	2000      	movne	r0, #0
 8003ba4:	e7ea      	b.n	8003b7c <_swistat+0x18>

08003ba6 <_fstat>:
 8003ba6:	460b      	mov	r3, r1
 8003ba8:	b510      	push	{r4, lr}
 8003baa:	2100      	movs	r1, #0
 8003bac:	4604      	mov	r4, r0
 8003bae:	2258      	movs	r2, #88	; 0x58
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	f7fe ff5d 	bl	8002a70 <memset>
 8003bb6:	4601      	mov	r1, r0
 8003bb8:	4620      	mov	r0, r4
 8003bba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003bbe:	f7ff bfd1 	b.w	8003b64 <_swistat>

08003bc2 <_stat>:
 8003bc2:	b538      	push	{r3, r4, r5, lr}
 8003bc4:	460d      	mov	r5, r1
 8003bc6:	4604      	mov	r4, r0
 8003bc8:	2258      	movs	r2, #88	; 0x58
 8003bca:	2100      	movs	r1, #0
 8003bcc:	4628      	mov	r0, r5
 8003bce:	f7fe ff4f 	bl	8002a70 <memset>
 8003bd2:	4620      	mov	r0, r4
 8003bd4:	2100      	movs	r1, #0
 8003bd6:	f000 f811 	bl	8003bfc <_swiopen>
 8003bda:	1c43      	adds	r3, r0, #1
 8003bdc:	4604      	mov	r4, r0
 8003bde:	d00b      	beq.n	8003bf8 <_stat+0x36>
 8003be0:	686b      	ldr	r3, [r5, #4]
 8003be2:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8003be6:	606b      	str	r3, [r5, #4]
 8003be8:	4629      	mov	r1, r5
 8003bea:	f7ff ffbb 	bl	8003b64 <_swistat>
 8003bee:	4605      	mov	r5, r0
 8003bf0:	4620      	mov	r0, r4
 8003bf2:	f7ff ff6d 	bl	8003ad0 <_close>
 8003bf6:	462c      	mov	r4, r5
 8003bf8:	4620      	mov	r0, r4
 8003bfa:	bd38      	pop	{r3, r4, r5, pc}

08003bfc <_swiopen>:
 8003bfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c00:	4b2b      	ldr	r3, [pc, #172]	; (8003cb0 <_swiopen+0xb4>)
 8003c02:	b096      	sub	sp, #88	; 0x58
 8003c04:	4682      	mov	sl, r0
 8003c06:	460e      	mov	r6, r1
 8003c08:	2500      	movs	r5, #0
 8003c0a:	4698      	mov	r8, r3
 8003c0c:	f853 4035 	ldr.w	r4, [r3, r5, lsl #3]
 8003c10:	1c61      	adds	r1, r4, #1
 8003c12:	ea4f 07c5 	mov.w	r7, r5, lsl #3
 8003c16:	d036      	beq.n	8003c86 <_swiopen+0x8a>
 8003c18:	3501      	adds	r5, #1
 8003c1a:	2d14      	cmp	r5, #20
 8003c1c:	d1f6      	bne.n	8003c0c <_swiopen+0x10>
 8003c1e:	f000 f943 	bl	8003ea8 <__errno>
 8003c22:	2318      	movs	r3, #24
 8003c24:	6003      	str	r3, [r0, #0]
 8003c26:	f04f 34ff 	mov.w	r4, #4294967295
 8003c2a:	e03c      	b.n	8003ca6 <_swiopen+0xaa>
 8003c2c:	f3c6 4400 	ubfx	r4, r6, #16, #1
 8003c30:	f240 6301 	movw	r3, #1537	; 0x601
 8003c34:	07b2      	lsls	r2, r6, #30
 8003c36:	bf48      	it	mi
 8003c38:	f044 0402 	orrmi.w	r4, r4, #2
 8003c3c:	421e      	tst	r6, r3
 8003c3e:	bf18      	it	ne
 8003c40:	f044 0404 	orrne.w	r4, r4, #4
 8003c44:	0733      	lsls	r3, r6, #28
 8003c46:	bf48      	it	mi
 8003c48:	f024 0404 	bicmi.w	r4, r4, #4
 8003c4c:	4650      	mov	r0, sl
 8003c4e:	bf48      	it	mi
 8003c50:	f044 0408 	orrmi.w	r4, r4, #8
 8003c54:	f8cd a000 	str.w	sl, [sp]
 8003c58:	f7fc fb1a 	bl	8000290 <strlen>
 8003c5c:	e9cd 4001 	strd	r4, r0, [sp, #4]
 8003c60:	2401      	movs	r4, #1
 8003c62:	4620      	mov	r0, r4
 8003c64:	4649      	mov	r1, r9
 8003c66:	beab      	bkpt	0x00ab
 8003c68:	4604      	mov	r4, r0
 8003c6a:	2c00      	cmp	r4, #0
 8003c6c:	db06      	blt.n	8003c7c <_swiopen+0x80>
 8003c6e:	4447      	add	r7, r8
 8003c70:	2300      	movs	r3, #0
 8003c72:	f848 4035 	str.w	r4, [r8, r5, lsl #3]
 8003c76:	607b      	str	r3, [r7, #4]
 8003c78:	462c      	mov	r4, r5
 8003c7a:	e014      	b.n	8003ca6 <_swiopen+0xaa>
 8003c7c:	4620      	mov	r0, r4
 8003c7e:	f7ff fe71 	bl	8003964 <error>
 8003c82:	4604      	mov	r4, r0
 8003c84:	e00f      	b.n	8003ca6 <_swiopen+0xaa>
 8003c86:	f406 6320 	and.w	r3, r6, #2560	; 0xa00
 8003c8a:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8003c8e:	46e9      	mov	r9, sp
 8003c90:	d1cc      	bne.n	8003c2c <_swiopen+0x30>
 8003c92:	4649      	mov	r1, r9
 8003c94:	4650      	mov	r0, sl
 8003c96:	f7ff ff94 	bl	8003bc2 <_stat>
 8003c9a:	3001      	adds	r0, #1
 8003c9c:	d0c6      	beq.n	8003c2c <_swiopen+0x30>
 8003c9e:	f000 f903 	bl	8003ea8 <__errno>
 8003ca2:	2311      	movs	r3, #17
 8003ca4:	6003      	str	r3, [r0, #0]
 8003ca6:	4620      	mov	r0, r4
 8003ca8:	b016      	add	sp, #88	; 0x58
 8003caa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003cae:	bf00      	nop
 8003cb0:	200000b8 	.word	0x200000b8

08003cb4 <_get_semihosting_exts>:
 8003cb4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003cb8:	4607      	mov	r7, r0
 8003cba:	4688      	mov	r8, r1
 8003cbc:	4829      	ldr	r0, [pc, #164]	; (8003d64 <_get_semihosting_exts+0xb0>)
 8003cbe:	2100      	movs	r1, #0
 8003cc0:	4615      	mov	r5, r2
 8003cc2:	f7ff ff9b 	bl	8003bfc <_swiopen>
 8003cc6:	462a      	mov	r2, r5
 8003cc8:	4604      	mov	r4, r0
 8003cca:	2100      	movs	r1, #0
 8003ccc:	4638      	mov	r0, r7
 8003cce:	f7fe fecf 	bl	8002a70 <memset>
 8003cd2:	1c63      	adds	r3, r4, #1
 8003cd4:	d015      	beq.n	8003d02 <_get_semihosting_exts+0x4e>
 8003cd6:	4620      	mov	r0, r4
 8003cd8:	f7ff fe1a 	bl	8003910 <findslot>
 8003cdc:	260c      	movs	r6, #12
 8003cde:	4681      	mov	r9, r0
 8003ce0:	4630      	mov	r0, r6
 8003ce2:	4649      	mov	r1, r9
 8003ce4:	beab      	bkpt	0x00ab
 8003ce6:	4606      	mov	r6, r0
 8003ce8:	4630      	mov	r0, r6
 8003cea:	f7ff fe2b 	bl	8003944 <checkerror>
 8003cee:	2803      	cmp	r0, #3
 8003cf0:	dd02      	ble.n	8003cf8 <_get_semihosting_exts+0x44>
 8003cf2:	3803      	subs	r0, #3
 8003cf4:	42a8      	cmp	r0, r5
 8003cf6:	dc08      	bgt.n	8003d0a <_get_semihosting_exts+0x56>
 8003cf8:	4620      	mov	r0, r4
 8003cfa:	f7ff fee9 	bl	8003ad0 <_close>
 8003cfe:	f04f 34ff 	mov.w	r4, #4294967295
 8003d02:	4620      	mov	r0, r4
 8003d04:	b003      	add	sp, #12
 8003d06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003d0a:	2204      	movs	r2, #4
 8003d0c:	eb0d 0102 	add.w	r1, sp, r2
 8003d10:	4620      	mov	r0, r4
 8003d12:	f7ff fe45 	bl	80039a0 <_read>
 8003d16:	2803      	cmp	r0, #3
 8003d18:	ddee      	ble.n	8003cf8 <_get_semihosting_exts+0x44>
 8003d1a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003d1e:	2b53      	cmp	r3, #83	; 0x53
 8003d20:	d1ea      	bne.n	8003cf8 <_get_semihosting_exts+0x44>
 8003d22:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8003d26:	2b48      	cmp	r3, #72	; 0x48
 8003d28:	d1e6      	bne.n	8003cf8 <_get_semihosting_exts+0x44>
 8003d2a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8003d2e:	2b46      	cmp	r3, #70	; 0x46
 8003d30:	d1e2      	bne.n	8003cf8 <_get_semihosting_exts+0x44>
 8003d32:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003d36:	2b42      	cmp	r3, #66	; 0x42
 8003d38:	d1de      	bne.n	8003cf8 <_get_semihosting_exts+0x44>
 8003d3a:	2201      	movs	r2, #1
 8003d3c:	4641      	mov	r1, r8
 8003d3e:	4620      	mov	r0, r4
 8003d40:	f7ff fe48 	bl	80039d4 <_swilseek>
 8003d44:	2800      	cmp	r0, #0
 8003d46:	dbd7      	blt.n	8003cf8 <_get_semihosting_exts+0x44>
 8003d48:	462a      	mov	r2, r5
 8003d4a:	4639      	mov	r1, r7
 8003d4c:	4620      	mov	r0, r4
 8003d4e:	f7ff fe27 	bl	80039a0 <_read>
 8003d52:	4605      	mov	r5, r0
 8003d54:	4620      	mov	r0, r4
 8003d56:	f7ff febb 	bl	8003ad0 <_close>
 8003d5a:	4628      	mov	r0, r5
 8003d5c:	f7ff fdf2 	bl	8003944 <checkerror>
 8003d60:	4604      	mov	r4, r0
 8003d62:	e7ce      	b.n	8003d02 <_get_semihosting_exts+0x4e>
 8003d64:	08004017 	.word	0x08004017

08003d68 <initialise_semihosting_exts>:
 8003d68:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003d6a:	4d0a      	ldr	r5, [pc, #40]	; (8003d94 <initialise_semihosting_exts+0x2c>)
 8003d6c:	4c0a      	ldr	r4, [pc, #40]	; (8003d98 <initialise_semihosting_exts+0x30>)
 8003d6e:	2100      	movs	r1, #0
 8003d70:	2201      	movs	r2, #1
 8003d72:	a801      	add	r0, sp, #4
 8003d74:	6029      	str	r1, [r5, #0]
 8003d76:	6022      	str	r2, [r4, #0]
 8003d78:	f7ff ff9c 	bl	8003cb4 <_get_semihosting_exts>
 8003d7c:	2800      	cmp	r0, #0
 8003d7e:	dd07      	ble.n	8003d90 <initialise_semihosting_exts+0x28>
 8003d80:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003d84:	f003 0201 	and.w	r2, r3, #1
 8003d88:	f003 0302 	and.w	r3, r3, #2
 8003d8c:	602a      	str	r2, [r5, #0]
 8003d8e:	6023      	str	r3, [r4, #0]
 8003d90:	b003      	add	sp, #12
 8003d92:	bd30      	pop	{r4, r5, pc}
 8003d94:	20000078 	.word	0x20000078
 8003d98:	2000007c 	.word	0x2000007c

08003d9c <_has_ext_stdout_stderr>:
 8003d9c:	b510      	push	{r4, lr}
 8003d9e:	4c04      	ldr	r4, [pc, #16]	; (8003db0 <_has_ext_stdout_stderr+0x14>)
 8003da0:	6822      	ldr	r2, [r4, #0]
 8003da2:	2a00      	cmp	r2, #0
 8003da4:	da01      	bge.n	8003daa <_has_ext_stdout_stderr+0xe>
 8003da6:	f7ff ffdf 	bl	8003d68 <initialise_semihosting_exts>
 8003daa:	6820      	ldr	r0, [r4, #0]
 8003dac:	bd10      	pop	{r4, pc}
 8003dae:	bf00      	nop
 8003db0:	2000007c 	.word	0x2000007c

08003db4 <initialise_monitor_handles>:
 8003db4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003db8:	b085      	sub	sp, #20
 8003dba:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 8003e6c <initialise_monitor_handles+0xb8>
 8003dbe:	f8cd 9004 	str.w	r9, [sp, #4]
 8003dc2:	2303      	movs	r3, #3
 8003dc4:	2400      	movs	r4, #0
 8003dc6:	9303      	str	r3, [sp, #12]
 8003dc8:	f10d 0804 	add.w	r8, sp, #4
 8003dcc:	9402      	str	r4, [sp, #8]
 8003dce:	2501      	movs	r5, #1
 8003dd0:	4628      	mov	r0, r5
 8003dd2:	4641      	mov	r1, r8
 8003dd4:	beab      	bkpt	0x00ab
 8003dd6:	4605      	mov	r5, r0
 8003dd8:	4e20      	ldr	r6, [pc, #128]	; (8003e5c <initialise_monitor_handles+0xa8>)
 8003dda:	4a21      	ldr	r2, [pc, #132]	; (8003e60 <initialise_monitor_handles+0xac>)
 8003ddc:	6035      	str	r5, [r6, #0]
 8003dde:	4623      	mov	r3, r4
 8003de0:	f04f 31ff 	mov.w	r1, #4294967295
 8003de4:	4614      	mov	r4, r2
 8003de6:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
 8003dea:	3301      	adds	r3, #1
 8003dec:	2b14      	cmp	r3, #20
 8003dee:	d1fa      	bne.n	8003de6 <initialise_monitor_handles+0x32>
 8003df0:	f7ff ffd4 	bl	8003d9c <_has_ext_stdout_stderr>
 8003df4:	4d1b      	ldr	r5, [pc, #108]	; (8003e64 <initialise_monitor_handles+0xb0>)
 8003df6:	b1d0      	cbz	r0, 8003e2e <initialise_monitor_handles+0x7a>
 8003df8:	f04f 0a03 	mov.w	sl, #3
 8003dfc:	2304      	movs	r3, #4
 8003dfe:	f8cd 9004 	str.w	r9, [sp, #4]
 8003e02:	2701      	movs	r7, #1
 8003e04:	f8cd a00c 	str.w	sl, [sp, #12]
 8003e08:	9302      	str	r3, [sp, #8]
 8003e0a:	4638      	mov	r0, r7
 8003e0c:	4641      	mov	r1, r8
 8003e0e:	beab      	bkpt	0x00ab
 8003e10:	4683      	mov	fp, r0
 8003e12:	4b15      	ldr	r3, [pc, #84]	; (8003e68 <initialise_monitor_handles+0xb4>)
 8003e14:	f8cd 9004 	str.w	r9, [sp, #4]
 8003e18:	f8c3 b000 	str.w	fp, [r3]
 8003e1c:	2308      	movs	r3, #8
 8003e1e:	f8cd a00c 	str.w	sl, [sp, #12]
 8003e22:	9302      	str	r3, [sp, #8]
 8003e24:	4638      	mov	r0, r7
 8003e26:	4641      	mov	r1, r8
 8003e28:	beab      	bkpt	0x00ab
 8003e2a:	4607      	mov	r7, r0
 8003e2c:	602f      	str	r7, [r5, #0]
 8003e2e:	682b      	ldr	r3, [r5, #0]
 8003e30:	3301      	adds	r3, #1
 8003e32:	bf02      	ittt	eq
 8003e34:	4b0c      	ldreq	r3, [pc, #48]	; (8003e68 <initialise_monitor_handles+0xb4>)
 8003e36:	681b      	ldreq	r3, [r3, #0]
 8003e38:	602b      	streq	r3, [r5, #0]
 8003e3a:	6833      	ldr	r3, [r6, #0]
 8003e3c:	6023      	str	r3, [r4, #0]
 8003e3e:	2600      	movs	r6, #0
 8003e40:	6066      	str	r6, [r4, #4]
 8003e42:	f7ff ffab 	bl	8003d9c <_has_ext_stdout_stderr>
 8003e46:	b130      	cbz	r0, 8003e56 <initialise_monitor_handles+0xa2>
 8003e48:	4b07      	ldr	r3, [pc, #28]	; (8003e68 <initialise_monitor_handles+0xb4>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	e9c4 3602 	strd	r3, r6, [r4, #8]
 8003e50:	682b      	ldr	r3, [r5, #0]
 8003e52:	e9c4 3604 	strd	r3, r6, [r4, #16]
 8003e56:	b005      	add	sp, #20
 8003e58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e5c:	200000b0 	.word	0x200000b0
 8003e60:	200000b8 	.word	0x200000b8
 8003e64:	200000ac 	.word	0x200000ac
 8003e68:	200000b4 	.word	0x200000b4
 8003e6c:	0800402d 	.word	0x0800402d

08003e70 <_isatty>:
 8003e70:	b570      	push	{r4, r5, r6, lr}
 8003e72:	f7ff fd4d 	bl	8003910 <findslot>
 8003e76:	2509      	movs	r5, #9
 8003e78:	4604      	mov	r4, r0
 8003e7a:	b920      	cbnz	r0, 8003e86 <_isatty+0x16>
 8003e7c:	f000 f814 	bl	8003ea8 <__errno>
 8003e80:	6005      	str	r5, [r0, #0]
 8003e82:	4620      	mov	r0, r4
 8003e84:	bd70      	pop	{r4, r5, r6, pc}
 8003e86:	4628      	mov	r0, r5
 8003e88:	4621      	mov	r1, r4
 8003e8a:	beab      	bkpt	0x00ab
 8003e8c:	4604      	mov	r4, r0
 8003e8e:	2c01      	cmp	r4, #1
 8003e90:	d0f7      	beq.n	8003e82 <_isatty+0x12>
 8003e92:	f000 f809 	bl	8003ea8 <__errno>
 8003e96:	2400      	movs	r4, #0
 8003e98:	4606      	mov	r6, r0
 8003e9a:	2513      	movs	r5, #19
 8003e9c:	4628      	mov	r0, r5
 8003e9e:	4621      	mov	r1, r4
 8003ea0:	beab      	bkpt	0x00ab
 8003ea2:	4605      	mov	r5, r0
 8003ea4:	6035      	str	r5, [r6, #0]
 8003ea6:	e7ec      	b.n	8003e82 <_isatty+0x12>

08003ea8 <__errno>:
 8003ea8:	4b01      	ldr	r3, [pc, #4]	; (8003eb0 <__errno+0x8>)
 8003eaa:	6818      	ldr	r0, [r3, #0]
 8003eac:	4770      	bx	lr
 8003eae:	bf00      	nop
 8003eb0:	20000010 	.word	0x20000010

08003eb4 <_init>:
 8003eb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003eb6:	bf00      	nop
 8003eb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003eba:	bc08      	pop	{r3}
 8003ebc:	469e      	mov	lr, r3
 8003ebe:	4770      	bx	lr

08003ec0 <_fini>:
 8003ec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ec2:	bf00      	nop
 8003ec4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ec6:	bc08      	pop	{r3}
 8003ec8:	469e      	mov	lr, r3
 8003eca:	4770      	bx	lr
